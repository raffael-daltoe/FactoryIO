
TP3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b84  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001484  08005c44  08005c44  00015c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080070c8  080070c8  000170c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080070cc  080070cc  000170cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000018  20000000  080070d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000034e8  20000018  080070e8  00020018  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20003500  080070e8  00023500  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 10 .debug_info   000087d4  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001b24  00000000  00000000  00028857  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000900  00000000  00000000  0002a380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000006e1  00000000  00000000  0002ac80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00002295  00000000  00000000  0002b361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000ada7  00000000  00000000  0002d5f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0007226c  00000000  00000000  0003839d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00001f68  00000000  00000000  000aa60c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000055  00000000  00000000  000ac574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000018 	.word	0x20000018
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005c2c 	.word	0x08005c2c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000001c 	.word	0x2000001c
 8000104:	08005c2c 	.word	0x08005c2c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	3308      	adds	r3, #8
 800022c:	001a      	movs	r2, r3
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	2201      	movs	r2, #1
 8000236:	4252      	negs	r2, r2
 8000238:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	3308      	adds	r3, #8
 800023e:	001a      	movs	r2, r3
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	3308      	adds	r3, #8
 8000248:	001a      	movs	r2, r3
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000254:	46c0      	nop			; (mov r8, r8)
 8000256:	46bd      	mov	sp, r7
 8000258:	b002      	add	sp, #8
 800025a:	bd80      	pop	{r7, pc}

0800025c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	2200      	movs	r2, #0
 8000268:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800026a:	46c0      	nop			; (mov r8, r8)
 800026c:	46bd      	mov	sp, r7
 800026e:	b002      	add	sp, #8
 8000270:	bd80      	pop	{r7, pc}

08000272 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8000272:	b580      	push	{r7, lr}
 8000274:	b084      	sub	sp, #16
 8000276:	af00      	add	r7, sp, #0
 8000278:	6078      	str	r0, [r7, #4]
 800027a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	685b      	ldr	r3, [r3, #4]
 8000280:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8000282:	683b      	ldr	r3, [r7, #0]
 8000284:	68fa      	ldr	r2, [r7, #12]
 8000286:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	689a      	ldr	r2, [r3, #8]
 800028c:	683b      	ldr	r3, [r7, #0]
 800028e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	689b      	ldr	r3, [r3, #8]
 8000294:	683a      	ldr	r2, [r7, #0]
 8000296:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	683a      	ldr	r2, [r7, #0]
 800029c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	687a      	ldr	r2, [r7, #4]
 80002a2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	1c5a      	adds	r2, r3, #1
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	601a      	str	r2, [r3, #0]
}
 80002ae:	46c0      	nop			; (mov r8, r8)
 80002b0:	46bd      	mov	sp, r7
 80002b2:	b004      	add	sp, #16
 80002b4:	bd80      	pop	{r7, pc}

080002b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80002b6:	b580      	push	{r7, lr}
 80002b8:	b084      	sub	sp, #16
 80002ba:	af00      	add	r7, sp, #0
 80002bc:	6078      	str	r0, [r7, #4]
 80002be:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80002c6:	68bb      	ldr	r3, [r7, #8]
 80002c8:	3301      	adds	r3, #1
 80002ca:	d103      	bne.n	80002d4 <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	691b      	ldr	r3, [r3, #16]
 80002d0:	60fb      	str	r3, [r7, #12]
 80002d2:	e00c      	b.n	80002ee <vListInsert+0x38>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	3308      	adds	r3, #8
 80002d8:	60fb      	str	r3, [r7, #12]
 80002da:	e002      	b.n	80002e2 <vListInsert+0x2c>
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	60fb      	str	r3, [r7, #12]
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	685b      	ldr	r3, [r3, #4]
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	68ba      	ldr	r2, [r7, #8]
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d2f6      	bcs.n	80002dc <vListInsert+0x26>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	685a      	ldr	r2, [r3, #4]
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	685b      	ldr	r3, [r3, #4]
 80002fa:	683a      	ldr	r2, [r7, #0]
 80002fc:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80002fe:	683b      	ldr	r3, [r7, #0]
 8000300:	68fa      	ldr	r2, [r7, #12]
 8000302:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	683a      	ldr	r2, [r7, #0]
 8000308:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800030a:	683b      	ldr	r3, [r7, #0]
 800030c:	687a      	ldr	r2, [r7, #4]
 800030e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	1c5a      	adds	r2, r3, #1
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	601a      	str	r2, [r3, #0]
}
 800031a:	46c0      	nop			; (mov r8, r8)
 800031c:	46bd      	mov	sp, r7
 800031e:	b004      	add	sp, #16
 8000320:	bd80      	pop	{r7, pc}

08000322 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000322:	b580      	push	{r7, lr}
 8000324:	b084      	sub	sp, #16
 8000326:	af00      	add	r7, sp, #0
 8000328:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	691b      	ldr	r3, [r3, #16]
 800032e:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	685b      	ldr	r3, [r3, #4]
 8000334:	687a      	ldr	r2, [r7, #4]
 8000336:	6892      	ldr	r2, [r2, #8]
 8000338:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	689b      	ldr	r3, [r3, #8]
 800033e:	687a      	ldr	r2, [r7, #4]
 8000340:	6852      	ldr	r2, [r2, #4]
 8000342:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	685b      	ldr	r3, [r3, #4]
 8000348:	687a      	ldr	r2, [r7, #4]
 800034a:	429a      	cmp	r2, r3
 800034c:	d103      	bne.n	8000356 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	689a      	ldr	r2, [r3, #8]
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	2200      	movs	r2, #0
 800035a:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	1e5a      	subs	r2, r3, #1
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	681b      	ldr	r3, [r3, #0]
}
 800036a:	0018      	movs	r0, r3
 800036c:	46bd      	mov	sp, r7
 800036e:	b004      	add	sp, #16
 8000370:	bd80      	pop	{r7, pc}

08000372 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000372:	b580      	push	{r7, lr}
 8000374:	b084      	sub	sp, #16
 8000376:	af00      	add	r7, sp, #0
 8000378:	6078      	str	r0, [r7, #4]
 800037a:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d101      	bne.n	800038a <xQueueGenericReset+0x18>
 8000386:	b672      	cpsid	i
 8000388:	e7fe      	b.n	8000388 <xQueueGenericReset+0x16>

    taskENTER_CRITICAL();
 800038a:	f002 ff51 	bl	8003230 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800038e:	68fb      	ldr	r3, [r7, #12]
 8000390:	681a      	ldr	r2, [r3, #0]
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800039a:	434b      	muls	r3, r1
 800039c:	18d2      	adds	r2, r2, r3
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	2200      	movs	r2, #0
 80003a6:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	681a      	ldr	r2, [r3, #0]
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	681a      	ldr	r2, [r3, #0]
 80003b4:	68fb      	ldr	r3, [r7, #12]
 80003b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80003b8:	1e59      	subs	r1, r3, #1
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003be:	434b      	muls	r3, r1
 80003c0:	18d2      	adds	r2, r2, r3
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	2244      	movs	r2, #68	; 0x44
 80003ca:	21ff      	movs	r1, #255	; 0xff
 80003cc:	5499      	strb	r1, [r3, r2]
        pxQueue->cTxLock = queueUNLOCKED;
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	2245      	movs	r2, #69	; 0x45
 80003d2:	21ff      	movs	r1, #255	; 0xff
 80003d4:	5499      	strb	r1, [r3, r2]

        if( xNewQueue == pdFALSE )
 80003d6:	683b      	ldr	r3, [r7, #0]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d109      	bne.n	80003f0 <xQueueGenericReset+0x7e>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	691b      	ldr	r3, [r3, #16]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d00f      	beq.n	8000404 <xQueueGenericReset+0x92>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	3310      	adds	r3, #16
 80003e8:	0018      	movs	r0, r3
 80003ea:	f001 ff63 	bl	80022b4 <xTaskRemoveFromEventList>
 80003ee:	e009      	b.n	8000404 <xQueueGenericReset+0x92>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	3310      	adds	r3, #16
 80003f4:	0018      	movs	r0, r3
 80003f6:	f7ff ff13 	bl	8000220 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	3324      	adds	r3, #36	; 0x24
 80003fe:	0018      	movs	r0, r3
 8000400:	f7ff ff0e 	bl	8000220 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8000404:	f002 ff26 	bl	8003254 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8000408:	2301      	movs	r3, #1
}
 800040a:	0018      	movs	r0, r3
 800040c:	46bd      	mov	sp, r7
 800040e:	b004      	add	sp, #16
 8000410:	bd80      	pop	{r7, pc}
	...

08000414 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000414:	b590      	push	{r4, r7, lr}
 8000416:	b08b      	sub	sp, #44	; 0x2c
 8000418:	af02      	add	r7, sp, #8
 800041a:	60f8      	str	r0, [r7, #12]
 800041c:	60b9      	str	r1, [r7, #8]
 800041e:	1dfb      	adds	r3, r7, #7
 8000420:	701a      	strb	r2, [r3, #0]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	2b00      	cmp	r3, #0
 8000426:	d101      	bne.n	800042c <xQueueGenericCreate+0x18>
 8000428:	b672      	cpsid	i
 800042a:	e7fe      	b.n	800042a <xQueueGenericCreate+0x16>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	68ba      	ldr	r2, [r7, #8]
 8000430:	4353      	muls	r3, r2
 8000432:	61fb      	str	r3, [r7, #28]

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8000434:	68bb      	ldr	r3, [r7, #8]
 8000436:	2b00      	cmp	r3, #0
 8000438:	d008      	beq.n	800044c <xQueueGenericCreate+0x38>
 800043a:	68b9      	ldr	r1, [r7, #8]
 800043c:	69f8      	ldr	r0, [r7, #28]
 800043e:	f7ff fe63 	bl	8000108 <__udivsi3>
 8000442:	0003      	movs	r3, r0
 8000444:	001a      	movs	r2, r3
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	4293      	cmp	r3, r2
 800044a:	d101      	bne.n	8000450 <xQueueGenericCreate+0x3c>
 800044c:	2301      	movs	r3, #1
 800044e:	e000      	b.n	8000452 <xQueueGenericCreate+0x3e>
 8000450:	2300      	movs	r3, #0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d101      	bne.n	800045a <xQueueGenericCreate+0x46>
 8000456:	b672      	cpsid	i
 8000458:	e7fe      	b.n	8000458 <xQueueGenericCreate+0x44>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 800045a:	69fb      	ldr	r3, [r7, #28]
 800045c:	3351      	adds	r3, #81	; 0x51
 800045e:	d901      	bls.n	8000464 <xQueueGenericCreate+0x50>
 8000460:	b672      	cpsid	i
 8000462:	e7fe      	b.n	8000462 <xQueueGenericCreate+0x4e>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000464:	69fb      	ldr	r3, [r7, #28]
 8000466:	3350      	adds	r3, #80	; 0x50
 8000468:	0018      	movs	r0, r3
 800046a:	f002 ff71 	bl	8003350 <pvPortMalloc>
 800046e:	0003      	movs	r3, r0
 8000470:	61bb      	str	r3, [r7, #24]

        if( pxNewQueue != NULL )
 8000472:	69bb      	ldr	r3, [r7, #24]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d00f      	beq.n	8000498 <xQueueGenericCreate+0x84>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000478:	69bb      	ldr	r3, [r7, #24]
 800047a:	617b      	str	r3, [r7, #20]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800047c:	697b      	ldr	r3, [r7, #20]
 800047e:	3350      	adds	r3, #80	; 0x50
 8000480:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000482:	1dfb      	adds	r3, r7, #7
 8000484:	781c      	ldrb	r4, [r3, #0]
 8000486:	697a      	ldr	r2, [r7, #20]
 8000488:	68b9      	ldr	r1, [r7, #8]
 800048a:	68f8      	ldr	r0, [r7, #12]
 800048c:	69bb      	ldr	r3, [r7, #24]
 800048e:	9300      	str	r3, [sp, #0]
 8000490:	0023      	movs	r3, r4
 8000492:	f000 f823 	bl	80004dc <prvInitialiseNewQueue>
 8000496:	e017      	b.n	80004c8 <xQueueGenericCreate+0xb4>
        }
        else
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
 8000498:	f003 f89b 	bl	80035d2 <prvTraceGetCurrentTaskHandle>
 800049c:	0003      	movs	r3, r0
 800049e:	0018      	movs	r0, r3
 80004a0:	f002 ffed 	bl	800347e <prvTraceGetTaskNumberHigh16>
 80004a4:	0003      	movs	r3, r0
 80004a6:	001a      	movs	r2, r3
 80004a8:	4b0a      	ldr	r3, [pc, #40]	; (80004d4 <xQueueGenericCreate+0xc0>)
 80004aa:	881b      	ldrh	r3, [r3, #0]
 80004ac:	4013      	ands	r3, r2
 80004ae:	b29b      	uxth	r3, r3
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d009      	beq.n	80004c8 <xQueueGenericCreate+0xb4>
 80004b4:	1dfb      	adds	r3, r7, #7
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	4a07      	ldr	r2, [pc, #28]	; (80004d8 <xQueueGenericCreate+0xc4>)
 80004ba:	5cd3      	ldrb	r3, [r2, r3]
 80004bc:	3340      	adds	r3, #64	; 0x40
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	2100      	movs	r1, #0
 80004c2:	0018      	movs	r0, r3
 80004c4:	f003 fea0 	bl	8004208 <prvTraceStoreKernelCallWithNumericParamOnly>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80004c8:	69bb      	ldr	r3, [r7, #24]
    }
 80004ca:	0018      	movs	r0, r3
 80004cc:	46bd      	mov	sp, r7
 80004ce:	b009      	add	sp, #36	; 0x24
 80004d0:	bd90      	pop	{r4, r7, pc}
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	20001da4 	.word	0x20001da4
 80004d8:	20000008 	.word	0x20000008

080004dc <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80004dc:	b5b0      	push	{r4, r5, r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
 80004e8:	001a      	movs	r2, r3
 80004ea:	1cfb      	adds	r3, r7, #3
 80004ec:	701a      	strb	r2, [r3, #0]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d103      	bne.n	80004fc <prvInitialiseNewQueue+0x20>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80004f4:	6a3b      	ldr	r3, [r7, #32]
 80004f6:	6a3a      	ldr	r2, [r7, #32]
 80004f8:	601a      	str	r2, [r3, #0]
 80004fa:	e002      	b.n	8000502 <prvInitialiseNewQueue+0x26>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80004fc:	6a3b      	ldr	r3, [r7, #32]
 80004fe:	687a      	ldr	r2, [r7, #4]
 8000500:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000502:	6a3b      	ldr	r3, [r7, #32]
 8000504:	68fa      	ldr	r2, [r7, #12]
 8000506:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000508:	6a3b      	ldr	r3, [r7, #32]
 800050a:	68ba      	ldr	r2, [r7, #8]
 800050c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800050e:	6a3b      	ldr	r3, [r7, #32]
 8000510:	2101      	movs	r1, #1
 8000512:	0018      	movs	r0, r3
 8000514:	f7ff ff2d 	bl	8000372 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8000518:	6a3b      	ldr	r3, [r7, #32]
 800051a:	1cfa      	adds	r2, r7, #3
 800051c:	214c      	movs	r1, #76	; 0x4c
 800051e:	7812      	ldrb	r2, [r2, #0]
 8000520:	545a      	strb	r2, [r3, r1]
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8000522:	6a3b      	ldr	r3, [r7, #32]
 8000524:	0018      	movs	r0, r3
 8000526:	f002 ff8f 	bl	8003448 <prvTraceGetQueueType>
 800052a:	0003      	movs	r3, r0
 800052c:	001a      	movs	r2, r3
 800052e:	4b3a      	ldr	r3, [pc, #232]	; (8000618 <prvInitialiseNewQueue+0x13c>)
 8000530:	5c9b      	ldrb	r3, [r3, r2]
 8000532:	0018      	movs	r0, r3
 8000534:	f004 f94e 	bl	80047d4 <prvTraceGetObjectHandle>
 8000538:	0003      	movs	r3, r0
 800053a:	b29a      	uxth	r2, r3
 800053c:	6a3b      	ldr	r3, [r7, #32]
 800053e:	0011      	movs	r1, r2
 8000540:	0018      	movs	r0, r3
 8000542:	f002 fffd 	bl	8003540 <prvTraceSetQueueNumberLow16>
 8000546:	4b35      	ldr	r3, [pc, #212]	; (800061c <prvInitialiseNewQueue+0x140>)
 8000548:	881a      	ldrh	r2, [r3, #0]
 800054a:	6a3b      	ldr	r3, [r7, #32]
 800054c:	0011      	movs	r1, r2
 800054e:	0018      	movs	r0, r3
 8000550:	f003 f810 	bl	8003574 <prvTraceSetQueueNumberHigh16>
 8000554:	6a3b      	ldr	r3, [r7, #32]
 8000556:	0018      	movs	r0, r3
 8000558:	f002 ff76 	bl	8003448 <prvTraceGetQueueType>
 800055c:	0003      	movs	r3, r0
 800055e:	001a      	movs	r2, r3
 8000560:	4b2d      	ldr	r3, [pc, #180]	; (8000618 <prvInitialiseNewQueue+0x13c>)
 8000562:	5c9c      	ldrb	r4, [r3, r2]
 8000564:	6a3b      	ldr	r3, [r7, #32]
 8000566:	0018      	movs	r0, r3
 8000568:	f002 ffcd 	bl	8003506 <prvTraceGetQueueNumberLow16>
 800056c:	0003      	movs	r3, r0
 800056e:	b2db      	uxtb	r3, r3
 8000570:	0019      	movs	r1, r3
 8000572:	0020      	movs	r0, r4
 8000574:	f004 f9f8 	bl	8004968 <prvMarkObjectAsUsed>
 8000578:	f003 f82b 	bl	80035d2 <prvTraceGetCurrentTaskHandle>
 800057c:	0003      	movs	r3, r0
 800057e:	0018      	movs	r0, r3
 8000580:	f002 ff7d 	bl	800347e <prvTraceGetTaskNumberHigh16>
 8000584:	0003      	movs	r3, r0
 8000586:	001a      	movs	r2, r3
 8000588:	4b25      	ldr	r3, [pc, #148]	; (8000620 <prvInitialiseNewQueue+0x144>)
 800058a:	881b      	ldrh	r3, [r3, #0]
 800058c:	4013      	ands	r3, r2
 800058e:	b29b      	uxth	r3, r3
 8000590:	2b00      	cmp	r3, #0
 8000592:	d029      	beq.n	80005e8 <prvInitialiseNewQueue+0x10c>
 8000594:	6a3b      	ldr	r3, [r7, #32]
 8000596:	0018      	movs	r0, r3
 8000598:	f002 ffc3 	bl	8003522 <prvTraceGetQueueNumberHigh16>
 800059c:	0003      	movs	r3, r0
 800059e:	001a      	movs	r2, r3
 80005a0:	4b1f      	ldr	r3, [pc, #124]	; (8000620 <prvInitialiseNewQueue+0x144>)
 80005a2:	881b      	ldrh	r3, [r3, #0]
 80005a4:	4013      	ands	r3, r2
 80005a6:	b29b      	uxth	r3, r3
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d01d      	beq.n	80005e8 <prvInitialiseNewQueue+0x10c>
 80005ac:	6a3b      	ldr	r3, [r7, #32]
 80005ae:	0018      	movs	r0, r3
 80005b0:	f002 ff4a 	bl	8003448 <prvTraceGetQueueType>
 80005b4:	0003      	movs	r3, r0
 80005b6:	001a      	movs	r2, r3
 80005b8:	4b17      	ldr	r3, [pc, #92]	; (8000618 <prvInitialiseNewQueue+0x13c>)
 80005ba:	5c9b      	ldrb	r3, [r3, r2]
 80005bc:	3318      	adds	r3, #24
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	001d      	movs	r5, r3
 80005c2:	6a3b      	ldr	r3, [r7, #32]
 80005c4:	0018      	movs	r0, r3
 80005c6:	f002 ff3f 	bl	8003448 <prvTraceGetQueueType>
 80005ca:	0003      	movs	r3, r0
 80005cc:	001a      	movs	r2, r3
 80005ce:	4b12      	ldr	r3, [pc, #72]	; (8000618 <prvInitialiseNewQueue+0x13c>)
 80005d0:	5c9c      	ldrb	r4, [r3, r2]
 80005d2:	6a3b      	ldr	r3, [r7, #32]
 80005d4:	0018      	movs	r0, r3
 80005d6:	f002 ff96 	bl	8003506 <prvTraceGetQueueNumberLow16>
 80005da:	0003      	movs	r3, r0
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	001a      	movs	r2, r3
 80005e0:	0021      	movs	r1, r4
 80005e2:	0028      	movs	r0, r5
 80005e4:	f003 fca6 	bl	8003f34 <prvTraceStoreKernelCall>
 80005e8:	6a3b      	ldr	r3, [r7, #32]
 80005ea:	0018      	movs	r0, r3
 80005ec:	f002 ff2c 	bl	8003448 <prvTraceGetQueueType>
 80005f0:	0003      	movs	r3, r0
 80005f2:	001a      	movs	r2, r3
 80005f4:	4b08      	ldr	r3, [pc, #32]	; (8000618 <prvInitialiseNewQueue+0x13c>)
 80005f6:	5c9c      	ldrb	r4, [r3, r2]
 80005f8:	6a3b      	ldr	r3, [r7, #32]
 80005fa:	0018      	movs	r0, r3
 80005fc:	f002 ff83 	bl	8003506 <prvTraceGetQueueNumberLow16>
 8000600:	0003      	movs	r3, r0
 8000602:	b2db      	uxtb	r3, r3
 8000604:	2200      	movs	r2, #0
 8000606:	0019      	movs	r1, r3
 8000608:	0020      	movs	r0, r4
 800060a:	f003 ff8b 	bl	8004524 <prvTraceSetObjectState>
}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	46bd      	mov	sp, r7
 8000612:	b004      	add	sp, #16
 8000614:	bdb0      	pop	{r4, r5, r7, pc}
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	20000008 	.word	0x20000008
 800061c:	20001da6 	.word	0x20001da6
 8000620:	20001da4 	.word	0x20001da4

08000624 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d00e      	beq.n	8000650 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2200      	movs	r2, #0
 8000642:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	2300      	movs	r3, #0
 8000648:	2200      	movs	r2, #0
 800064a:	2100      	movs	r1, #0
 800064c:	f000 f820 	bl	8000690 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8000650:	46c0      	nop			; (mov r8, r8)
 8000652:	46bd      	mov	sp, r7
 8000654:	b002      	add	sp, #8
 8000656:	bd80      	pop	{r7, pc}

08000658 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af00      	add	r7, sp, #0
 800065e:	0002      	movs	r2, r0
 8000660:	1dfb      	adds	r3, r7, #7
 8000662:	701a      	strb	r2, [r3, #0]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8000664:	2301      	movs	r3, #1
 8000666:	617b      	str	r3, [r7, #20]
 8000668:	2300      	movs	r3, #0
 800066a:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800066c:	1dfb      	adds	r3, r7, #7
 800066e:	781a      	ldrb	r2, [r3, #0]
 8000670:	6939      	ldr	r1, [r7, #16]
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	0018      	movs	r0, r3
 8000676:	f7ff fecd 	bl	8000414 <xQueueGenericCreate>
 800067a:	0003      	movs	r3, r0
 800067c:	60fb      	str	r3, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	0018      	movs	r0, r3
 8000682:	f7ff ffcf 	bl	8000624 <prvInitialiseMutex>

        return xNewQueue;
 8000686:	68fb      	ldr	r3, [r7, #12]
    }
 8000688:	0018      	movs	r0, r3
 800068a:	46bd      	mov	sp, r7
 800068c:	b006      	add	sp, #24
 800068e:	bd80      	pop	{r7, pc}

08000690 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8000690:	b5b0      	push	{r4, r5, r7, lr}
 8000692:	b08a      	sub	sp, #40	; 0x28
 8000694:	af00      	add	r7, sp, #0
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	60b9      	str	r1, [r7, #8]
 800069a:	607a      	str	r2, [r7, #4]
 800069c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800069e:	2300      	movs	r3, #0
 80006a0:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 80006a6:	6a3b      	ldr	r3, [r7, #32]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d101      	bne.n	80006b0 <xQueueGenericSend+0x20>
 80006ac:	b672      	cpsid	i
 80006ae:	e7fe      	b.n	80006ae <xQueueGenericSend+0x1e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d103      	bne.n	80006be <xQueueGenericSend+0x2e>
 80006b6:	6a3b      	ldr	r3, [r7, #32]
 80006b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d101      	bne.n	80006c2 <xQueueGenericSend+0x32>
 80006be:	2301      	movs	r3, #1
 80006c0:	e000      	b.n	80006c4 <xQueueGenericSend+0x34>
 80006c2:	2300      	movs	r3, #0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d101      	bne.n	80006cc <xQueueGenericSend+0x3c>
 80006c8:	b672      	cpsid	i
 80006ca:	e7fe      	b.n	80006ca <xQueueGenericSend+0x3a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	2b02      	cmp	r3, #2
 80006d0:	d103      	bne.n	80006da <xQueueGenericSend+0x4a>
 80006d2:	6a3b      	ldr	r3, [r7, #32]
 80006d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d101      	bne.n	80006de <xQueueGenericSend+0x4e>
 80006da:	2301      	movs	r3, #1
 80006dc:	e000      	b.n	80006e0 <xQueueGenericSend+0x50>
 80006de:	2300      	movs	r3, #0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d101      	bne.n	80006e8 <xQueueGenericSend+0x58>
 80006e4:	b672      	cpsid	i
 80006e6:	e7fe      	b.n	80006e6 <xQueueGenericSend+0x56>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80006e8:	f001 ffa4 	bl	8002634 <xTaskGetSchedulerState>
 80006ec:	1e03      	subs	r3, r0, #0
 80006ee:	d102      	bne.n	80006f6 <xQueueGenericSend+0x66>
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d101      	bne.n	80006fa <xQueueGenericSend+0x6a>
 80006f6:	2301      	movs	r3, #1
 80006f8:	e000      	b.n	80006fc <xQueueGenericSend+0x6c>
 80006fa:	2300      	movs	r3, #0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d101      	bne.n	8000704 <xQueueGenericSend+0x74>
 8000700:	b672      	cpsid	i
 8000702:	e7fe      	b.n	8000702 <xQueueGenericSend+0x72>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000704:	f002 fd94 	bl	8003230 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000708:	6a3b      	ldr	r3, [r7, #32]
 800070a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800070c:	6a3b      	ldr	r3, [r7, #32]
 800070e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000710:	429a      	cmp	r2, r3
 8000712:	d303      	bcc.n	800071c <xQueueGenericSend+0x8c>
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	2b02      	cmp	r3, #2
 8000718:	d000      	beq.n	800071c <xQueueGenericSend+0x8c>
 800071a:	e075      	b.n	8000808 <xQueueGenericSend+0x178>
            {
                traceQUEUE_SEND( pxQueue );
 800071c:	f002 ff59 	bl	80035d2 <prvTraceGetCurrentTaskHandle>
 8000720:	0003      	movs	r3, r0
 8000722:	0018      	movs	r0, r3
 8000724:	f002 feab 	bl	800347e <prvTraceGetTaskNumberHigh16>
 8000728:	0003      	movs	r3, r0
 800072a:	001a      	movs	r2, r3
 800072c:	4bc2      	ldr	r3, [pc, #776]	; (8000a38 <xQueueGenericSend+0x3a8>)
 800072e:	881b      	ldrh	r3, [r3, #0]
 8000730:	4013      	ands	r3, r2
 8000732:	b29b      	uxth	r3, r3
 8000734:	2b00      	cmp	r3, #0
 8000736:	d02e      	beq.n	8000796 <xQueueGenericSend+0x106>
 8000738:	6a3b      	ldr	r3, [r7, #32]
 800073a:	0018      	movs	r0, r3
 800073c:	f002 fef1 	bl	8003522 <prvTraceGetQueueNumberHigh16>
 8000740:	0003      	movs	r3, r0
 8000742:	001a      	movs	r2, r3
 8000744:	4bbc      	ldr	r3, [pc, #752]	; (8000a38 <xQueueGenericSend+0x3a8>)
 8000746:	881b      	ldrh	r3, [r3, #0]
 8000748:	4013      	ands	r3, r2
 800074a:	b29b      	uxth	r3, r3
 800074c:	2b00      	cmp	r3, #0
 800074e:	d022      	beq.n	8000796 <xQueueGenericSend+0x106>
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d10b      	bne.n	800076e <xQueueGenericSend+0xde>
 8000756:	6a3b      	ldr	r3, [r7, #32]
 8000758:	0018      	movs	r0, r3
 800075a:	f002 fe75 	bl	8003448 <prvTraceGetQueueType>
 800075e:	0003      	movs	r3, r0
 8000760:	001a      	movs	r2, r3
 8000762:	4bb6      	ldr	r3, [pc, #728]	; (8000a3c <xQueueGenericSend+0x3ac>)
 8000764:	5c9b      	ldrb	r3, [r3, r2]
 8000766:	3320      	adds	r3, #32
 8000768:	b2db      	uxtb	r3, r3
 800076a:	001d      	movs	r5, r3
 800076c:	e000      	b.n	8000770 <xQueueGenericSend+0xe0>
 800076e:	2525      	movs	r5, #37	; 0x25
 8000770:	6a3b      	ldr	r3, [r7, #32]
 8000772:	0018      	movs	r0, r3
 8000774:	f002 fe68 	bl	8003448 <prvTraceGetQueueType>
 8000778:	0003      	movs	r3, r0
 800077a:	001a      	movs	r2, r3
 800077c:	4baf      	ldr	r3, [pc, #700]	; (8000a3c <xQueueGenericSend+0x3ac>)
 800077e:	5c9c      	ldrb	r4, [r3, r2]
 8000780:	6a3b      	ldr	r3, [r7, #32]
 8000782:	0018      	movs	r0, r3
 8000784:	f002 febf 	bl	8003506 <prvTraceGetQueueNumberLow16>
 8000788:	0003      	movs	r3, r0
 800078a:	b2db      	uxtb	r3, r3
 800078c:	001a      	movs	r2, r3
 800078e:	0021      	movs	r1, r4
 8000790:	0028      	movs	r0, r5
 8000792:	f003 fbcf 	bl	8003f34 <prvTraceStoreKernelCall>
 8000796:	6a3b      	ldr	r3, [r7, #32]
 8000798:	0018      	movs	r0, r3
 800079a:	f002 fe55 	bl	8003448 <prvTraceGetQueueType>
 800079e:	0003      	movs	r3, r0
 80007a0:	001a      	movs	r2, r3
 80007a2:	4ba6      	ldr	r3, [pc, #664]	; (8000a3c <xQueueGenericSend+0x3ac>)
 80007a4:	5c9c      	ldrb	r4, [r3, r2]
 80007a6:	6a3b      	ldr	r3, [r7, #32]
 80007a8:	0018      	movs	r0, r3
 80007aa:	f002 feac 	bl	8003506 <prvTraceGetQueueNumberLow16>
 80007ae:	0003      	movs	r3, r0
 80007b0:	b2dd      	uxtb	r5, r3
 80007b2:	6a3b      	ldr	r3, [r7, #32]
 80007b4:	0018      	movs	r0, r3
 80007b6:	f002 fe47 	bl	8003448 <prvTraceGetQueueType>
 80007ba:	0003      	movs	r3, r0
 80007bc:	001a      	movs	r2, r3
 80007be:	4b9f      	ldr	r3, [pc, #636]	; (8000a3c <xQueueGenericSend+0x3ac>)
 80007c0:	5c9b      	ldrb	r3, [r3, r2]
 80007c2:	2b02      	cmp	r3, #2
 80007c4:	d005      	beq.n	80007d2 <xQueueGenericSend+0x142>
 80007c6:	6a3b      	ldr	r3, [r7, #32]
 80007c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	3301      	adds	r3, #1
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	e000      	b.n	80007d4 <xQueueGenericSend+0x144>
 80007d2:	2300      	movs	r3, #0
 80007d4:	001a      	movs	r2, r3
 80007d6:	0029      	movs	r1, r5
 80007d8:	0020      	movs	r0, r4
 80007da:	f003 fea3 	bl	8004524 <prvTraceSetObjectState>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80007de:	683a      	ldr	r2, [r7, #0]
 80007e0:	68b9      	ldr	r1, [r7, #8]
 80007e2:	6a3b      	ldr	r3, [r7, #32]
 80007e4:	0018      	movs	r0, r3
 80007e6:	f000 ff4a 	bl	800167e <prvCopyDataToQueue>
 80007ea:	0003      	movs	r3, r0
 80007ec:	61fb      	str	r3, [r7, #28]

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80007ee:	6a3b      	ldr	r3, [r7, #32]
 80007f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d004      	beq.n	8000800 <xQueueGenericSend+0x170>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80007f6:	6a3b      	ldr	r3, [r7, #32]
 80007f8:	3324      	adds	r3, #36	; 0x24
 80007fa:	0018      	movs	r0, r3
 80007fc:	f001 fd5a 	bl	80022b4 <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8000800:	f002 fd28 	bl	8003254 <vPortExitCritical>
                return pdPASS;
 8000804:	2301      	movs	r3, #1
 8000806:	e113      	b.n	8000a30 <xQueueGenericSend+0x3a0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d140      	bne.n	8000890 <xQueueGenericSend+0x200>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800080e:	f002 fd21 	bl	8003254 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8000812:	f002 fede 	bl	80035d2 <prvTraceGetCurrentTaskHandle>
 8000816:	0003      	movs	r3, r0
 8000818:	0018      	movs	r0, r3
 800081a:	f002 fe30 	bl	800347e <prvTraceGetTaskNumberHigh16>
 800081e:	0003      	movs	r3, r0
 8000820:	001a      	movs	r2, r3
 8000822:	4b85      	ldr	r3, [pc, #532]	; (8000a38 <xQueueGenericSend+0x3a8>)
 8000824:	881b      	ldrh	r3, [r3, #0]
 8000826:	4013      	ands	r3, r2
 8000828:	b29b      	uxth	r3, r3
 800082a:	2b00      	cmp	r3, #0
 800082c:	d02e      	beq.n	800088c <xQueueGenericSend+0x1fc>
 800082e:	6a3b      	ldr	r3, [r7, #32]
 8000830:	0018      	movs	r0, r3
 8000832:	f002 fe76 	bl	8003522 <prvTraceGetQueueNumberHigh16>
 8000836:	0003      	movs	r3, r0
 8000838:	001a      	movs	r2, r3
 800083a:	4b7f      	ldr	r3, [pc, #508]	; (8000a38 <xQueueGenericSend+0x3a8>)
 800083c:	881b      	ldrh	r3, [r3, #0]
 800083e:	4013      	ands	r3, r2
 8000840:	b29b      	uxth	r3, r3
 8000842:	2b00      	cmp	r3, #0
 8000844:	d022      	beq.n	800088c <xQueueGenericSend+0x1fc>
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d10b      	bne.n	8000864 <xQueueGenericSend+0x1d4>
 800084c:	6a3b      	ldr	r3, [r7, #32]
 800084e:	0018      	movs	r0, r3
 8000850:	f002 fdfa 	bl	8003448 <prvTraceGetQueueType>
 8000854:	0003      	movs	r3, r0
 8000856:	001a      	movs	r2, r3
 8000858:	4b78      	ldr	r3, [pc, #480]	; (8000a3c <xQueueGenericSend+0x3ac>)
 800085a:	5c9b      	ldrb	r3, [r3, r2]
 800085c:	3348      	adds	r3, #72	; 0x48
 800085e:	b2db      	uxtb	r3, r3
 8000860:	001d      	movs	r5, r3
 8000862:	e000      	b.n	8000866 <xQueueGenericSend+0x1d6>
 8000864:	254d      	movs	r5, #77	; 0x4d
 8000866:	6a3b      	ldr	r3, [r7, #32]
 8000868:	0018      	movs	r0, r3
 800086a:	f002 fded 	bl	8003448 <prvTraceGetQueueType>
 800086e:	0003      	movs	r3, r0
 8000870:	001a      	movs	r2, r3
 8000872:	4b72      	ldr	r3, [pc, #456]	; (8000a3c <xQueueGenericSend+0x3ac>)
 8000874:	5c9c      	ldrb	r4, [r3, r2]
 8000876:	6a3b      	ldr	r3, [r7, #32]
 8000878:	0018      	movs	r0, r3
 800087a:	f002 fe44 	bl	8003506 <prvTraceGetQueueNumberLow16>
 800087e:	0003      	movs	r3, r0
 8000880:	b2db      	uxtb	r3, r3
 8000882:	001a      	movs	r2, r3
 8000884:	0021      	movs	r1, r4
 8000886:	0028      	movs	r0, r5
 8000888:	f003 fb54 	bl	8003f34 <prvTraceStoreKernelCall>
                    return errQUEUE_FULL;
 800088c:	2300      	movs	r3, #0
 800088e:	e0cf      	b.n	8000a30 <xQueueGenericSend+0x3a0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000892:	2b00      	cmp	r3, #0
 8000894:	d106      	bne.n	80008a4 <xQueueGenericSend+0x214>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000896:	2314      	movs	r3, #20
 8000898:	18fb      	adds	r3, r7, r3
 800089a:	0018      	movs	r0, r3
 800089c:	f001 fd7e 	bl	800239c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80008a0:	2301      	movs	r3, #1
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80008a4:	f002 fcd6 	bl	8003254 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80008a8:	f001 faa0 	bl	8001dec <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80008ac:	f002 fcc0 	bl	8003230 <vPortEnterCritical>
 80008b0:	6a3b      	ldr	r3, [r7, #32]
 80008b2:	2244      	movs	r2, #68	; 0x44
 80008b4:	5c9b      	ldrb	r3, [r3, r2]
 80008b6:	b25b      	sxtb	r3, r3
 80008b8:	3301      	adds	r3, #1
 80008ba:	d103      	bne.n	80008c4 <xQueueGenericSend+0x234>
 80008bc:	6a3b      	ldr	r3, [r7, #32]
 80008be:	2244      	movs	r2, #68	; 0x44
 80008c0:	2100      	movs	r1, #0
 80008c2:	5499      	strb	r1, [r3, r2]
 80008c4:	6a3b      	ldr	r3, [r7, #32]
 80008c6:	2245      	movs	r2, #69	; 0x45
 80008c8:	5c9b      	ldrb	r3, [r3, r2]
 80008ca:	b25b      	sxtb	r3, r3
 80008cc:	3301      	adds	r3, #1
 80008ce:	d103      	bne.n	80008d8 <xQueueGenericSend+0x248>
 80008d0:	6a3b      	ldr	r3, [r7, #32]
 80008d2:	2245      	movs	r2, #69	; 0x45
 80008d4:	2100      	movs	r1, #0
 80008d6:	5499      	strb	r1, [r3, r2]
 80008d8:	f002 fcbc 	bl	8003254 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80008dc:	1d3a      	adds	r2, r7, #4
 80008de:	2314      	movs	r3, #20
 80008e0:	18fb      	adds	r3, r7, r3
 80008e2:	0011      	movs	r1, r2
 80008e4:	0018      	movs	r0, r3
 80008e6:	f001 fd6d 	bl	80023c4 <xTaskCheckForTimeOut>
 80008ea:	1e03      	subs	r3, r0, #0
 80008ec:	d15c      	bne.n	80009a8 <xQueueGenericSend+0x318>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80008ee:	6a3b      	ldr	r3, [r7, #32]
 80008f0:	0018      	movs	r0, r3
 80008f2:	f000 ffc9 	bl	8001888 <prvIsQueueFull>
 80008f6:	1e03      	subs	r3, r0, #0
 80008f8:	d04f      	beq.n	800099a <xQueueGenericSend+0x30a>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 80008fa:	f002 fe6a 	bl	80035d2 <prvTraceGetCurrentTaskHandle>
 80008fe:	0003      	movs	r3, r0
 8000900:	0018      	movs	r0, r3
 8000902:	f002 fdbc 	bl	800347e <prvTraceGetTaskNumberHigh16>
 8000906:	0003      	movs	r3, r0
 8000908:	001a      	movs	r2, r3
 800090a:	4b4b      	ldr	r3, [pc, #300]	; (8000a38 <xQueueGenericSend+0x3a8>)
 800090c:	881b      	ldrh	r3, [r3, #0]
 800090e:	4013      	ands	r3, r2
 8000910:	b29b      	uxth	r3, r3
 8000912:	2b00      	cmp	r3, #0
 8000914:	d02e      	beq.n	8000974 <xQueueGenericSend+0x2e4>
 8000916:	6a3b      	ldr	r3, [r7, #32]
 8000918:	0018      	movs	r0, r3
 800091a:	f002 fe02 	bl	8003522 <prvTraceGetQueueNumberHigh16>
 800091e:	0003      	movs	r3, r0
 8000920:	001a      	movs	r2, r3
 8000922:	4b45      	ldr	r3, [pc, #276]	; (8000a38 <xQueueGenericSend+0x3a8>)
 8000924:	881b      	ldrh	r3, [r3, #0]
 8000926:	4013      	ands	r3, r2
 8000928:	b29b      	uxth	r3, r3
 800092a:	2b00      	cmp	r3, #0
 800092c:	d022      	beq.n	8000974 <xQueueGenericSend+0x2e4>
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d10b      	bne.n	800094c <xQueueGenericSend+0x2bc>
 8000934:	6a3b      	ldr	r3, [r7, #32]
 8000936:	0018      	movs	r0, r3
 8000938:	f002 fd86 	bl	8003448 <prvTraceGetQueueType>
 800093c:	0003      	movs	r3, r0
 800093e:	001a      	movs	r2, r3
 8000940:	4b3e      	ldr	r3, [pc, #248]	; (8000a3c <xQueueGenericSend+0x3ac>)
 8000942:	5c9b      	ldrb	r3, [r3, r2]
 8000944:	3370      	adds	r3, #112	; 0x70
 8000946:	b2db      	uxtb	r3, r3
 8000948:	001d      	movs	r5, r3
 800094a:	e000      	b.n	800094e <xQueueGenericSend+0x2be>
 800094c:	2575      	movs	r5, #117	; 0x75
 800094e:	6a3b      	ldr	r3, [r7, #32]
 8000950:	0018      	movs	r0, r3
 8000952:	f002 fd79 	bl	8003448 <prvTraceGetQueueType>
 8000956:	0003      	movs	r3, r0
 8000958:	001a      	movs	r2, r3
 800095a:	4b38      	ldr	r3, [pc, #224]	; (8000a3c <xQueueGenericSend+0x3ac>)
 800095c:	5c9c      	ldrb	r4, [r3, r2]
 800095e:	6a3b      	ldr	r3, [r7, #32]
 8000960:	0018      	movs	r0, r3
 8000962:	f002 fdd0 	bl	8003506 <prvTraceGetQueueNumberLow16>
 8000966:	0003      	movs	r3, r0
 8000968:	b2db      	uxtb	r3, r3
 800096a:	001a      	movs	r2, r3
 800096c:	0021      	movs	r1, r4
 800096e:	0028      	movs	r0, r5
 8000970:	f003 fae0 	bl	8003f34 <prvTraceStoreKernelCall>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000974:	6a3b      	ldr	r3, [r7, #32]
 8000976:	3310      	adds	r3, #16
 8000978:	687a      	ldr	r2, [r7, #4]
 800097a:	0011      	movs	r1, r2
 800097c:	0018      	movs	r0, r3
 800097e:	f001 fc19 	bl	80021b4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000982:	6a3b      	ldr	r3, [r7, #32]
 8000984:	0018      	movs	r0, r3
 8000986:	f000 ff0b 	bl	80017a0 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800098a:	f001 fa3b 	bl	8001e04 <xTaskResumeAll>
 800098e:	1e03      	subs	r3, r0, #0
 8000990:	d000      	beq.n	8000994 <xQueueGenericSend+0x304>
 8000992:	e6b7      	b.n	8000704 <xQueueGenericSend+0x74>
                {
                    portYIELD_WITHIN_API();
 8000994:	f002 fc3c 	bl	8003210 <vPortYield>
 8000998:	e6b4      	b.n	8000704 <xQueueGenericSend+0x74>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800099a:	6a3b      	ldr	r3, [r7, #32]
 800099c:	0018      	movs	r0, r3
 800099e:	f000 feff 	bl	80017a0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80009a2:	f001 fa2f 	bl	8001e04 <xTaskResumeAll>
 80009a6:	e6ad      	b.n	8000704 <xQueueGenericSend+0x74>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80009a8:	6a3b      	ldr	r3, [r7, #32]
 80009aa:	0018      	movs	r0, r3
 80009ac:	f000 fef8 	bl	80017a0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80009b0:	f001 fa28 	bl	8001e04 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80009b4:	f002 fe0d 	bl	80035d2 <prvTraceGetCurrentTaskHandle>
 80009b8:	0003      	movs	r3, r0
 80009ba:	0018      	movs	r0, r3
 80009bc:	f002 fd5f 	bl	800347e <prvTraceGetTaskNumberHigh16>
 80009c0:	0003      	movs	r3, r0
 80009c2:	001a      	movs	r2, r3
 80009c4:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <xQueueGenericSend+0x3a8>)
 80009c6:	881b      	ldrh	r3, [r3, #0]
 80009c8:	4013      	ands	r3, r2
 80009ca:	b29b      	uxth	r3, r3
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d02e      	beq.n	8000a2e <xQueueGenericSend+0x39e>
 80009d0:	6a3b      	ldr	r3, [r7, #32]
 80009d2:	0018      	movs	r0, r3
 80009d4:	f002 fda5 	bl	8003522 <prvTraceGetQueueNumberHigh16>
 80009d8:	0003      	movs	r3, r0
 80009da:	001a      	movs	r2, r3
 80009dc:	4b16      	ldr	r3, [pc, #88]	; (8000a38 <xQueueGenericSend+0x3a8>)
 80009de:	881b      	ldrh	r3, [r3, #0]
 80009e0:	4013      	ands	r3, r2
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d022      	beq.n	8000a2e <xQueueGenericSend+0x39e>
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d10b      	bne.n	8000a06 <xQueueGenericSend+0x376>
 80009ee:	6a3b      	ldr	r3, [r7, #32]
 80009f0:	0018      	movs	r0, r3
 80009f2:	f002 fd29 	bl	8003448 <prvTraceGetQueueType>
 80009f6:	0003      	movs	r3, r0
 80009f8:	001a      	movs	r2, r3
 80009fa:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <xQueueGenericSend+0x3ac>)
 80009fc:	5c9b      	ldrb	r3, [r3, r2]
 80009fe:	3348      	adds	r3, #72	; 0x48
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	001d      	movs	r5, r3
 8000a04:	e000      	b.n	8000a08 <xQueueGenericSend+0x378>
 8000a06:	254d      	movs	r5, #77	; 0x4d
 8000a08:	6a3b      	ldr	r3, [r7, #32]
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f002 fd1c 	bl	8003448 <prvTraceGetQueueType>
 8000a10:	0003      	movs	r3, r0
 8000a12:	001a      	movs	r2, r3
 8000a14:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <xQueueGenericSend+0x3ac>)
 8000a16:	5c9c      	ldrb	r4, [r3, r2]
 8000a18:	6a3b      	ldr	r3, [r7, #32]
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f002 fd73 	bl	8003506 <prvTraceGetQueueNumberLow16>
 8000a20:	0003      	movs	r3, r0
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	001a      	movs	r2, r3
 8000a26:	0021      	movs	r1, r4
 8000a28:	0028      	movs	r0, r5
 8000a2a:	f003 fa83 	bl	8003f34 <prvTraceStoreKernelCall>
            return errQUEUE_FULL;
 8000a2e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000a30:	0018      	movs	r0, r3
 8000a32:	46bd      	mov	sp, r7
 8000a34:	b00a      	add	sp, #40	; 0x28
 8000a36:	bdb0      	pop	{r4, r5, r7, pc}
 8000a38:	20001da4 	.word	0x20001da4
 8000a3c:	20000008 	.word	0x20000008

08000a40 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8000a40:	b5b0      	push	{r4, r5, r7, lr}
 8000a42:	b08a      	sub	sp, #40	; 0x28
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
 8000a4c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 8000a52:	6a3b      	ldr	r3, [r7, #32]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d101      	bne.n	8000a5c <xQueueGenericSendFromISR+0x1c>
 8000a58:	b672      	cpsid	i
 8000a5a:	e7fe      	b.n	8000a5a <xQueueGenericSendFromISR+0x1a>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d103      	bne.n	8000a6a <xQueueGenericSendFromISR+0x2a>
 8000a62:	6a3b      	ldr	r3, [r7, #32]
 8000a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d101      	bne.n	8000a6e <xQueueGenericSendFromISR+0x2e>
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	e000      	b.n	8000a70 <xQueueGenericSendFromISR+0x30>
 8000a6e:	2300      	movs	r3, #0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d101      	bne.n	8000a78 <xQueueGenericSendFromISR+0x38>
 8000a74:	b672      	cpsid	i
 8000a76:	e7fe      	b.n	8000a76 <xQueueGenericSendFromISR+0x36>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	2b02      	cmp	r3, #2
 8000a7c:	d103      	bne.n	8000a86 <xQueueGenericSendFromISR+0x46>
 8000a7e:	6a3b      	ldr	r3, [r7, #32]
 8000a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d101      	bne.n	8000a8a <xQueueGenericSendFromISR+0x4a>
 8000a86:	2301      	movs	r3, #1
 8000a88:	e000      	b.n	8000a8c <xQueueGenericSendFromISR+0x4c>
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d101      	bne.n	8000a94 <xQueueGenericSendFromISR+0x54>
 8000a90:	b672      	cpsid	i
 8000a92:	e7fe      	b.n	8000a92 <xQueueGenericSendFromISR+0x52>
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000a94:	f002 fbf6 	bl	8003284 <ulSetInterruptMaskFromISR>
 8000a98:	0003      	movs	r3, r0
 8000a9a:	61fb      	str	r3, [r7, #28]
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000a9c:	6a3b      	ldr	r3, [r7, #32]
 8000a9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000aa0:	6a3b      	ldr	r3, [r7, #32]
 8000aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d303      	bcc.n	8000ab0 <xQueueGenericSendFromISR+0x70>
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	2b02      	cmp	r3, #2
 8000aac:	d000      	beq.n	8000ab0 <xQueueGenericSendFromISR+0x70>
 8000aae:	e080      	b.n	8000bb2 <xQueueGenericSendFromISR+0x172>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8000ab0:	231b      	movs	r3, #27
 8000ab2:	18fb      	adds	r3, r7, r3
 8000ab4:	6a3a      	ldr	r2, [r7, #32]
 8000ab6:	2145      	movs	r1, #69	; 0x45
 8000ab8:	5c52      	ldrb	r2, [r2, r1]
 8000aba:	701a      	strb	r2, [r3, #0]
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000abc:	6a3b      	ldr	r3, [r7, #32]
 8000abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ac0:	617b      	str	r3, [r7, #20]

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8000ac2:	6a3b      	ldr	r3, [r7, #32]
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f002 fd2c 	bl	8003522 <prvTraceGetQueueNumberHigh16>
 8000aca:	0003      	movs	r3, r0
 8000acc:	001a      	movs	r2, r3
 8000ace:	4b56      	ldr	r3, [pc, #344]	; (8000c28 <xQueueGenericSendFromISR+0x1e8>)
 8000ad0:	881b      	ldrh	r3, [r3, #0]
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d022      	beq.n	8000b20 <xQueueGenericSendFromISR+0xe0>
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d10b      	bne.n	8000af8 <xQueueGenericSendFromISR+0xb8>
 8000ae0:	6a3b      	ldr	r3, [r7, #32]
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f002 fcb0 	bl	8003448 <prvTraceGetQueueType>
 8000ae8:	0003      	movs	r3, r0
 8000aea:	001a      	movs	r2, r3
 8000aec:	4b4f      	ldr	r3, [pc, #316]	; (8000c2c <xQueueGenericSendFromISR+0x1ec>)
 8000aee:	5c9b      	ldrb	r3, [r3, r2]
 8000af0:	3330      	adds	r3, #48	; 0x30
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	001d      	movs	r5, r3
 8000af6:	e000      	b.n	8000afa <xQueueGenericSendFromISR+0xba>
 8000af8:	2535      	movs	r5, #53	; 0x35
 8000afa:	6a3b      	ldr	r3, [r7, #32]
 8000afc:	0018      	movs	r0, r3
 8000afe:	f002 fca3 	bl	8003448 <prvTraceGetQueueType>
 8000b02:	0003      	movs	r3, r0
 8000b04:	001a      	movs	r2, r3
 8000b06:	4b49      	ldr	r3, [pc, #292]	; (8000c2c <xQueueGenericSendFromISR+0x1ec>)
 8000b08:	5c9c      	ldrb	r4, [r3, r2]
 8000b0a:	6a3b      	ldr	r3, [r7, #32]
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f002 fcfa 	bl	8003506 <prvTraceGetQueueNumberLow16>
 8000b12:	0003      	movs	r3, r0
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	001a      	movs	r2, r3
 8000b18:	0021      	movs	r1, r4
 8000b1a:	0028      	movs	r0, r5
 8000b1c:	f003 fa0a 	bl	8003f34 <prvTraceStoreKernelCall>
 8000b20:	6a3b      	ldr	r3, [r7, #32]
 8000b22:	0018      	movs	r0, r3
 8000b24:	f002 fc90 	bl	8003448 <prvTraceGetQueueType>
 8000b28:	0003      	movs	r3, r0
 8000b2a:	001a      	movs	r2, r3
 8000b2c:	4b3f      	ldr	r3, [pc, #252]	; (8000c2c <xQueueGenericSendFromISR+0x1ec>)
 8000b2e:	5c9c      	ldrb	r4, [r3, r2]
 8000b30:	6a3b      	ldr	r3, [r7, #32]
 8000b32:	0018      	movs	r0, r3
 8000b34:	f002 fce7 	bl	8003506 <prvTraceGetQueueNumberLow16>
 8000b38:	0003      	movs	r3, r0
 8000b3a:	b2d9      	uxtb	r1, r3
 8000b3c:	6a3b      	ldr	r3, [r7, #32]
 8000b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	3301      	adds	r3, #1
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	001a      	movs	r2, r3
 8000b48:	0020      	movs	r0, r4
 8000b4a:	f003 fceb 	bl	8004524 <prvTraceSetObjectState>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000b4e:	683a      	ldr	r2, [r7, #0]
 8000b50:	68b9      	ldr	r1, [r7, #8]
 8000b52:	6a3b      	ldr	r3, [r7, #32]
 8000b54:	0018      	movs	r0, r3
 8000b56:	f000 fd92 	bl	800167e <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8000b5a:	231b      	movs	r3, #27
 8000b5c:	18fb      	adds	r3, r7, r3
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	b25b      	sxtb	r3, r3
 8000b62:	3301      	adds	r3, #1
 8000b64:	d111      	bne.n	8000b8a <xQueueGenericSendFromISR+0x14a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000b66:	6a3b      	ldr	r3, [r7, #32]
 8000b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d01e      	beq.n	8000bac <xQueueGenericSendFromISR+0x16c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000b6e:	6a3b      	ldr	r3, [r7, #32]
 8000b70:	3324      	adds	r3, #36	; 0x24
 8000b72:	0018      	movs	r0, r3
 8000b74:	f001 fb9e 	bl	80022b4 <xTaskRemoveFromEventList>
 8000b78:	1e03      	subs	r3, r0, #0
 8000b7a:	d017      	beq.n	8000bac <xQueueGenericSendFromISR+0x16c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d014      	beq.n	8000bac <xQueueGenericSendFromISR+0x16c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2201      	movs	r2, #1
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	e010      	b.n	8000bac <xQueueGenericSendFromISR+0x16c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8000b8a:	231b      	movs	r3, #27
 8000b8c:	18fb      	adds	r3, r7, r3
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	b25b      	sxtb	r3, r3
 8000b92:	2b7f      	cmp	r3, #127	; 0x7f
 8000b94:	d101      	bne.n	8000b9a <xQueueGenericSendFromISR+0x15a>
 8000b96:	b672      	cpsid	i
 8000b98:	e7fe      	b.n	8000b98 <xQueueGenericSendFromISR+0x158>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000b9a:	231b      	movs	r3, #27
 8000b9c:	18fb      	adds	r3, r7, r3
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	b259      	sxtb	r1, r3
 8000ba6:	6a3b      	ldr	r3, [r7, #32]
 8000ba8:	2245      	movs	r2, #69	; 0x45
 8000baa:	5499      	strb	r1, [r3, r2]
            }

            xReturn = pdPASS;
 8000bac:	2301      	movs	r3, #1
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
        {
 8000bb0:	e030      	b.n	8000c14 <xQueueGenericSendFromISR+0x1d4>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8000bb2:	6a3b      	ldr	r3, [r7, #32]
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f002 fcb4 	bl	8003522 <prvTraceGetQueueNumberHigh16>
 8000bba:	0003      	movs	r3, r0
 8000bbc:	001a      	movs	r2, r3
 8000bbe:	4b1a      	ldr	r3, [pc, #104]	; (8000c28 <xQueueGenericSendFromISR+0x1e8>)
 8000bc0:	881b      	ldrh	r3, [r3, #0]
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d022      	beq.n	8000c10 <xQueueGenericSendFromISR+0x1d0>
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d10b      	bne.n	8000be8 <xQueueGenericSendFromISR+0x1a8>
 8000bd0:	6a3b      	ldr	r3, [r7, #32]
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f002 fc38 	bl	8003448 <prvTraceGetQueueType>
 8000bd8:	0003      	movs	r3, r0
 8000bda:	001a      	movs	r2, r3
 8000bdc:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <xQueueGenericSendFromISR+0x1ec>)
 8000bde:	5c9b      	ldrb	r3, [r3, r2]
 8000be0:	3358      	adds	r3, #88	; 0x58
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	001d      	movs	r5, r3
 8000be6:	e000      	b.n	8000bea <xQueueGenericSendFromISR+0x1aa>
 8000be8:	255d      	movs	r5, #93	; 0x5d
 8000bea:	6a3b      	ldr	r3, [r7, #32]
 8000bec:	0018      	movs	r0, r3
 8000bee:	f002 fc2b 	bl	8003448 <prvTraceGetQueueType>
 8000bf2:	0003      	movs	r3, r0
 8000bf4:	001a      	movs	r2, r3
 8000bf6:	4b0d      	ldr	r3, [pc, #52]	; (8000c2c <xQueueGenericSendFromISR+0x1ec>)
 8000bf8:	5c9c      	ldrb	r4, [r3, r2]
 8000bfa:	6a3b      	ldr	r3, [r7, #32]
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f002 fc82 	bl	8003506 <prvTraceGetQueueNumberLow16>
 8000c02:	0003      	movs	r3, r0
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	001a      	movs	r2, r3
 8000c08:	0021      	movs	r1, r4
 8000c0a:	0028      	movs	r0, r5
 8000c0c:	f003 f992 	bl	8003f34 <prvTraceStoreKernelCall>
            xReturn = errQUEUE_FULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	0018      	movs	r0, r3
 8000c18:	f002 fb3a 	bl	8003290 <vClearInterruptMaskFromISR>

    return xReturn;
 8000c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000c1e:	0018      	movs	r0, r3
 8000c20:	46bd      	mov	sp, r7
 8000c22:	b00a      	add	sp, #40	; 0x28
 8000c24:	bdb0      	pop	{r4, r5, r7, pc}
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	20001da4 	.word	0x20001da4
 8000c2c:	20000008 	.word	0x20000008

08000c30 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	6039      	str	r1, [r7, #0]
 8000c3a:	6839      	ldr	r1, [r7, #0]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	0018      	movs	r0, r3
 8000c42:	f000 f805 	bl	8000c50 <MyWrapper_xQueueGiveFromISR>
 8000c46:	0003      	movs	r3, r0
 8000c48:	0018      	movs	r0, r3
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	b002      	add	sp, #8
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <MyWrapper_xQueueGiveFromISR>:
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 8000c50:	b5b0      	push	{r4, r5, r7, lr}
 8000c52:	b08a      	sub	sp, #40	; 0x28
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	623b      	str	r3, [r7, #32]
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 8000c60:	6a3b      	ldr	r3, [r7, #32]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d101      	bne.n	8000c6a <MyWrapper_xQueueGiveFromISR+0x1a>
 8000c66:	b672      	cpsid	i
 8000c68:	e7fe      	b.n	8000c68 <MyWrapper_xQueueGiveFromISR+0x18>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8000c6a:	6a3b      	ldr	r3, [r7, #32]
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MyWrapper_xQueueGiveFromISR+0x26>
 8000c72:	b672      	cpsid	i
 8000c74:	e7fe      	b.n	8000c74 <MyWrapper_xQueueGiveFromISR+0x24>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8000c76:	6a3b      	ldr	r3, [r7, #32]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d103      	bne.n	8000c86 <MyWrapper_xQueueGiveFromISR+0x36>
 8000c7e:	6a3b      	ldr	r3, [r7, #32]
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d101      	bne.n	8000c8a <MyWrapper_xQueueGiveFromISR+0x3a>
 8000c86:	2301      	movs	r3, #1
 8000c88:	e000      	b.n	8000c8c <MyWrapper_xQueueGiveFromISR+0x3c>
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d101      	bne.n	8000c94 <MyWrapper_xQueueGiveFromISR+0x44>
 8000c90:	b672      	cpsid	i
 8000c92:	e7fe      	b.n	8000c92 <MyWrapper_xQueueGiveFromISR+0x42>
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000c94:	f002 faf6 	bl	8003284 <ulSetInterruptMaskFromISR>
 8000c98:	0003      	movs	r3, r0
 8000c9a:	61fb      	str	r3, [r7, #28]
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000c9c:	6a3b      	ldr	r3, [r7, #32]
 8000c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ca0:	61bb      	str	r3, [r7, #24]

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 8000ca2:	6a3b      	ldr	r3, [r7, #32]
 8000ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d300      	bcc.n	8000cae <MyWrapper_xQueueGiveFromISR+0x5e>
 8000cac:	e07b      	b.n	8000da6 <MyWrapper_xQueueGiveFromISR+0x156>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8000cae:	2317      	movs	r3, #23
 8000cb0:	18fb      	adds	r3, r7, r3
 8000cb2:	6a3a      	ldr	r2, [r7, #32]
 8000cb4:	2145      	movs	r1, #69	; 0x45
 8000cb6:	5c52      	ldrb	r2, [r2, r1]
 8000cb8:	701a      	strb	r2, [r3, #0]

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8000cba:	6a3b      	ldr	r3, [r7, #32]
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	f002 fc30 	bl	8003522 <prvTraceGetQueueNumberHigh16>
 8000cc2:	0003      	movs	r3, r0
 8000cc4:	001a      	movs	r2, r3
 8000cc6:	4b55      	ldr	r3, [pc, #340]	; (8000e1c <MyWrapper_xQueueGiveFromISR+0x1cc>)
 8000cc8:	881b      	ldrh	r3, [r3, #0]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d022      	beq.n	8000d18 <MyWrapper_xQueueGiveFromISR+0xc8>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d10b      	bne.n	8000cf0 <MyWrapper_xQueueGiveFromISR+0xa0>
 8000cd8:	6a3b      	ldr	r3, [r7, #32]
 8000cda:	0018      	movs	r0, r3
 8000cdc:	f002 fbb4 	bl	8003448 <prvTraceGetQueueType>
 8000ce0:	0003      	movs	r3, r0
 8000ce2:	001a      	movs	r2, r3
 8000ce4:	4b4e      	ldr	r3, [pc, #312]	; (8000e20 <MyWrapper_xQueueGiveFromISR+0x1d0>)
 8000ce6:	5c9b      	ldrb	r3, [r3, r2]
 8000ce8:	3330      	adds	r3, #48	; 0x30
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	001d      	movs	r5, r3
 8000cee:	e000      	b.n	8000cf2 <MyWrapper_xQueueGiveFromISR+0xa2>
 8000cf0:	2535      	movs	r5, #53	; 0x35
 8000cf2:	6a3b      	ldr	r3, [r7, #32]
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	f002 fba7 	bl	8003448 <prvTraceGetQueueType>
 8000cfa:	0003      	movs	r3, r0
 8000cfc:	001a      	movs	r2, r3
 8000cfe:	4b48      	ldr	r3, [pc, #288]	; (8000e20 <MyWrapper_xQueueGiveFromISR+0x1d0>)
 8000d00:	5c9c      	ldrb	r4, [r3, r2]
 8000d02:	6a3b      	ldr	r3, [r7, #32]
 8000d04:	0018      	movs	r0, r3
 8000d06:	f002 fbfe 	bl	8003506 <prvTraceGetQueueNumberLow16>
 8000d0a:	0003      	movs	r3, r0
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	001a      	movs	r2, r3
 8000d10:	0021      	movs	r1, r4
 8000d12:	0028      	movs	r0, r5
 8000d14:	f003 f90e 	bl	8003f34 <prvTraceStoreKernelCall>
 8000d18:	6a3b      	ldr	r3, [r7, #32]
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f002 fb94 	bl	8003448 <prvTraceGetQueueType>
 8000d20:	0003      	movs	r3, r0
 8000d22:	001a      	movs	r2, r3
 8000d24:	4b3e      	ldr	r3, [pc, #248]	; (8000e20 <MyWrapper_xQueueGiveFromISR+0x1d0>)
 8000d26:	5c9c      	ldrb	r4, [r3, r2]
 8000d28:	6a3b      	ldr	r3, [r7, #32]
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f002 fbeb 	bl	8003506 <prvTraceGetQueueNumberLow16>
 8000d30:	0003      	movs	r3, r0
 8000d32:	b2d9      	uxtb	r1, r3
 8000d34:	6a3b      	ldr	r3, [r7, #32]
 8000d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	001a      	movs	r2, r3
 8000d40:	0020      	movs	r0, r4
 8000d42:	f003 fbef 	bl	8004524 <prvTraceSetObjectState>
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000d46:	69bb      	ldr	r3, [r7, #24]
 8000d48:	1c5a      	adds	r2, r3, #1
 8000d4a:	6a3b      	ldr	r3, [r7, #32]
 8000d4c:	639a      	str	r2, [r3, #56]	; 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8000d4e:	2317      	movs	r3, #23
 8000d50:	18fb      	adds	r3, r7, r3
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	b25b      	sxtb	r3, r3
 8000d56:	3301      	adds	r3, #1
 8000d58:	d111      	bne.n	8000d7e <MyWrapper_xQueueGiveFromISR+0x12e>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000d5a:	6a3b      	ldr	r3, [r7, #32]
 8000d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d01e      	beq.n	8000da0 <MyWrapper_xQueueGiveFromISR+0x150>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000d62:	6a3b      	ldr	r3, [r7, #32]
 8000d64:	3324      	adds	r3, #36	; 0x24
 8000d66:	0018      	movs	r0, r3
 8000d68:	f001 faa4 	bl	80022b4 <xTaskRemoveFromEventList>
 8000d6c:	1e03      	subs	r3, r0, #0
 8000d6e:	d017      	beq.n	8000da0 <MyWrapper_xQueueGiveFromISR+0x150>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d014      	beq.n	8000da0 <MyWrapper_xQueueGiveFromISR+0x150>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	2201      	movs	r2, #1
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	e010      	b.n	8000da0 <MyWrapper_xQueueGiveFromISR+0x150>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8000d7e:	2317      	movs	r3, #23
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	b25b      	sxtb	r3, r3
 8000d86:	2b7f      	cmp	r3, #127	; 0x7f
 8000d88:	d101      	bne.n	8000d8e <MyWrapper_xQueueGiveFromISR+0x13e>
 8000d8a:	b672      	cpsid	i
 8000d8c:	e7fe      	b.n	8000d8c <MyWrapper_xQueueGiveFromISR+0x13c>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000d8e:	2317      	movs	r3, #23
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	3301      	adds	r3, #1
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	b259      	sxtb	r1, r3
 8000d9a:	6a3b      	ldr	r3, [r7, #32]
 8000d9c:	2245      	movs	r2, #69	; 0x45
 8000d9e:	5499      	strb	r1, [r3, r2]
            }

            xReturn = pdPASS;
 8000da0:	2301      	movs	r3, #1
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
 8000da4:	e030      	b.n	8000e08 <MyWrapper_xQueueGiveFromISR+0x1b8>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8000da6:	6a3b      	ldr	r3, [r7, #32]
 8000da8:	0018      	movs	r0, r3
 8000daa:	f002 fbba 	bl	8003522 <prvTraceGetQueueNumberHigh16>
 8000dae:	0003      	movs	r3, r0
 8000db0:	001a      	movs	r2, r3
 8000db2:	4b1a      	ldr	r3, [pc, #104]	; (8000e1c <MyWrapper_xQueueGiveFromISR+0x1cc>)
 8000db4:	881b      	ldrh	r3, [r3, #0]
 8000db6:	4013      	ands	r3, r2
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d022      	beq.n	8000e04 <MyWrapper_xQueueGiveFromISR+0x1b4>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d10b      	bne.n	8000ddc <MyWrapper_xQueueGiveFromISR+0x18c>
 8000dc4:	6a3b      	ldr	r3, [r7, #32]
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	f002 fb3e 	bl	8003448 <prvTraceGetQueueType>
 8000dcc:	0003      	movs	r3, r0
 8000dce:	001a      	movs	r2, r3
 8000dd0:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <MyWrapper_xQueueGiveFromISR+0x1d0>)
 8000dd2:	5c9b      	ldrb	r3, [r3, r2]
 8000dd4:	3358      	adds	r3, #88	; 0x58
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	001d      	movs	r5, r3
 8000dda:	e000      	b.n	8000dde <MyWrapper_xQueueGiveFromISR+0x18e>
 8000ddc:	255d      	movs	r5, #93	; 0x5d
 8000dde:	6a3b      	ldr	r3, [r7, #32]
 8000de0:	0018      	movs	r0, r3
 8000de2:	f002 fb31 	bl	8003448 <prvTraceGetQueueType>
 8000de6:	0003      	movs	r3, r0
 8000de8:	001a      	movs	r2, r3
 8000dea:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <MyWrapper_xQueueGiveFromISR+0x1d0>)
 8000dec:	5c9c      	ldrb	r4, [r3, r2]
 8000dee:	6a3b      	ldr	r3, [r7, #32]
 8000df0:	0018      	movs	r0, r3
 8000df2:	f002 fb88 	bl	8003506 <prvTraceGetQueueNumberLow16>
 8000df6:	0003      	movs	r3, r0
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	001a      	movs	r2, r3
 8000dfc:	0021      	movs	r1, r4
 8000dfe:	0028      	movs	r0, r5
 8000e00:	f003 f898 	bl	8003f34 <prvTraceStoreKernelCall>
            xReturn = errQUEUE_FULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	f002 fa40 	bl	8003290 <vClearInterruptMaskFromISR>

    return xReturn;
 8000e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000e12:	0018      	movs	r0, r3
 8000e14:	46bd      	mov	sp, r7
 8000e16:	b00a      	add	sp, #40	; 0x28
 8000e18:	bdb0      	pop	{r4, r5, r7, pc}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	20001da4 	.word	0x20001da4
 8000e20:	20000008 	.word	0x20000008

08000e24 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000e24:	b5b0      	push	{r4, r5, r7, lr}
 8000e26:	b08a      	sub	sp, #40	; 0x28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000e30:	2300      	movs	r3, #0
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	61fb      	str	r3, [r7, #28]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d101      	bne.n	8000e42 <xQueueReceive+0x1e>
 8000e3e:	b672      	cpsid	i
 8000e40:	e7fe      	b.n	8000e40 <xQueueReceive+0x1c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d103      	bne.n	8000e50 <xQueueReceive+0x2c>
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d101      	bne.n	8000e54 <xQueueReceive+0x30>
 8000e50:	2301      	movs	r3, #1
 8000e52:	e000      	b.n	8000e56 <xQueueReceive+0x32>
 8000e54:	2300      	movs	r3, #0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d101      	bne.n	8000e5e <xQueueReceive+0x3a>
 8000e5a:	b672      	cpsid	i
 8000e5c:	e7fe      	b.n	8000e5c <xQueueReceive+0x38>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000e5e:	f001 fbe9 	bl	8002634 <xTaskGetSchedulerState>
 8000e62:	1e03      	subs	r3, r0, #0
 8000e64:	d102      	bne.n	8000e6c <xQueueReceive+0x48>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d101      	bne.n	8000e70 <xQueueReceive+0x4c>
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e000      	b.n	8000e72 <xQueueReceive+0x4e>
 8000e70:	2300      	movs	r3, #0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d101      	bne.n	8000e7a <xQueueReceive+0x56>
 8000e76:	b672      	cpsid	i
 8000e78:	e7fe      	b.n	8000e78 <xQueueReceive+0x54>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000e7a:	f002 f9d9 	bl	8003230 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e82:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000e84:	6a3b      	ldr	r3, [r7, #32]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d100      	bne.n	8000e8c <xQueueReceive+0x68>
 8000e8a:	e079      	b.n	8000f80 <xQueueReceive+0x15c>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000e8c:	68ba      	ldr	r2, [r7, #8]
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	0011      	movs	r1, r2
 8000e92:	0018      	movs	r0, r3
 8000e94:	f000 fc5e 	bl	8001754 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8000e98:	f002 fb9b 	bl	80035d2 <prvTraceGetCurrentTaskHandle>
 8000e9c:	0003      	movs	r3, r0
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f002 faed 	bl	800347e <prvTraceGetTaskNumberHigh16>
 8000ea4:	0003      	movs	r3, r0
 8000ea6:	001a      	movs	r2, r3
 8000ea8:	4bcf      	ldr	r3, [pc, #828]	; (80011e8 <xQueueReceive+0x3c4>)
 8000eaa:	881b      	ldrh	r3, [r3, #0]
 8000eac:	4013      	ands	r3, r2
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d029      	beq.n	8000f08 <xQueueReceive+0xe4>
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f002 fb33 	bl	8003522 <prvTraceGetQueueNumberHigh16>
 8000ebc:	0003      	movs	r3, r0
 8000ebe:	001a      	movs	r2, r3
 8000ec0:	4bc9      	ldr	r3, [pc, #804]	; (80011e8 <xQueueReceive+0x3c4>)
 8000ec2:	881b      	ldrh	r3, [r3, #0]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d01d      	beq.n	8000f08 <xQueueReceive+0xe4>
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f002 faba 	bl	8003448 <prvTraceGetQueueType>
 8000ed4:	0003      	movs	r3, r0
 8000ed6:	001a      	movs	r2, r3
 8000ed8:	4bc4      	ldr	r3, [pc, #784]	; (80011ec <xQueueReceive+0x3c8>)
 8000eda:	5c9b      	ldrb	r3, [r3, r2]
 8000edc:	3328      	adds	r3, #40	; 0x28
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	001d      	movs	r5, r3
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f002 faaf 	bl	8003448 <prvTraceGetQueueType>
 8000eea:	0003      	movs	r3, r0
 8000eec:	001a      	movs	r2, r3
 8000eee:	4bbf      	ldr	r3, [pc, #764]	; (80011ec <xQueueReceive+0x3c8>)
 8000ef0:	5c9c      	ldrb	r4, [r3, r2]
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	f002 fb06 	bl	8003506 <prvTraceGetQueueNumberLow16>
 8000efa:	0003      	movs	r3, r0
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	001a      	movs	r2, r3
 8000f00:	0021      	movs	r1, r4
 8000f02:	0028      	movs	r0, r5
 8000f04:	f003 f816 	bl	8003f34 <prvTraceStoreKernelCall>
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	f002 fa9c 	bl	8003448 <prvTraceGetQueueType>
 8000f10:	0003      	movs	r3, r0
 8000f12:	001a      	movs	r2, r3
 8000f14:	4bb5      	ldr	r3, [pc, #724]	; (80011ec <xQueueReceive+0x3c8>)
 8000f16:	5c9c      	ldrb	r4, [r3, r2]
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	f002 faf3 	bl	8003506 <prvTraceGetQueueNumberLow16>
 8000f20:	0003      	movs	r3, r0
 8000f22:	b2dd      	uxtb	r5, r3
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	0018      	movs	r0, r3
 8000f28:	f002 fa8e 	bl	8003448 <prvTraceGetQueueType>
 8000f2c:	0003      	movs	r3, r0
 8000f2e:	001a      	movs	r2, r3
 8000f30:	4bae      	ldr	r3, [pc, #696]	; (80011ec <xQueueReceive+0x3c8>)
 8000f32:	5c9b      	ldrb	r3, [r3, r2]
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d108      	bne.n	8000f4a <xQueueReceive+0x126>
 8000f38:	f002 fb4b 	bl	80035d2 <prvTraceGetCurrentTaskHandle>
 8000f3c:	0003      	movs	r3, r0
 8000f3e:	0018      	movs	r0, r3
 8000f40:	f002 fa8f 	bl	8003462 <prvTraceGetTaskNumberLow16>
 8000f44:	0003      	movs	r3, r0
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	e004      	b.n	8000f54 <xQueueReceive+0x130>
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	3b01      	subs	r3, #1
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	001a      	movs	r2, r3
 8000f56:	0029      	movs	r1, r5
 8000f58:	0020      	movs	r0, r4
 8000f5a:	f003 fae3 	bl	8004524 <prvTraceSetObjectState>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000f5e:	6a3b      	ldr	r3, [r7, #32]
 8000f60:	1e5a      	subs	r2, r3, #1
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	691b      	ldr	r3, [r3, #16]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d004      	beq.n	8000f78 <xQueueReceive+0x154>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3310      	adds	r3, #16
 8000f72:	0018      	movs	r0, r3
 8000f74:	f001 f99e 	bl	80022b4 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000f78:	f002 f96c 	bl	8003254 <vPortExitCritical>
                return pdPASS;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	e12f      	b.n	80011e0 <xQueueReceive+0x3bc>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d13b      	bne.n	8000ffe <xQueueReceive+0x1da>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000f86:	f002 f965 	bl	8003254 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8000f8a:	f002 fb22 	bl	80035d2 <prvTraceGetCurrentTaskHandle>
 8000f8e:	0003      	movs	r3, r0
 8000f90:	0018      	movs	r0, r3
 8000f92:	f002 fa74 	bl	800347e <prvTraceGetTaskNumberHigh16>
 8000f96:	0003      	movs	r3, r0
 8000f98:	001a      	movs	r2, r3
 8000f9a:	4b93      	ldr	r3, [pc, #588]	; (80011e8 <xQueueReceive+0x3c4>)
 8000f9c:	881b      	ldrh	r3, [r3, #0]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d029      	beq.n	8000ffa <xQueueReceive+0x1d6>
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	0018      	movs	r0, r3
 8000faa:	f002 faba 	bl	8003522 <prvTraceGetQueueNumberHigh16>
 8000fae:	0003      	movs	r3, r0
 8000fb0:	001a      	movs	r2, r3
 8000fb2:	4b8d      	ldr	r3, [pc, #564]	; (80011e8 <xQueueReceive+0x3c4>)
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d01d      	beq.n	8000ffa <xQueueReceive+0x1d6>
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f002 fa41 	bl	8003448 <prvTraceGetQueueType>
 8000fc6:	0003      	movs	r3, r0
 8000fc8:	001a      	movs	r2, r3
 8000fca:	4b88      	ldr	r3, [pc, #544]	; (80011ec <xQueueReceive+0x3c8>)
 8000fcc:	5c9b      	ldrb	r3, [r3, r2]
 8000fce:	3350      	adds	r3, #80	; 0x50
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	001d      	movs	r5, r3
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	f002 fa36 	bl	8003448 <prvTraceGetQueueType>
 8000fdc:	0003      	movs	r3, r0
 8000fde:	001a      	movs	r2, r3
 8000fe0:	4b82      	ldr	r3, [pc, #520]	; (80011ec <xQueueReceive+0x3c8>)
 8000fe2:	5c9c      	ldrb	r4, [r3, r2]
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	f002 fa8d 	bl	8003506 <prvTraceGetQueueNumberLow16>
 8000fec:	0003      	movs	r3, r0
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	001a      	movs	r2, r3
 8000ff2:	0021      	movs	r1, r4
 8000ff4:	0028      	movs	r0, r5
 8000ff6:	f002 ff9d 	bl	8003f34 <prvTraceStoreKernelCall>
                    return errQUEUE_EMPTY;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	e0f0      	b.n	80011e0 <xQueueReceive+0x3bc>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001000:	2b00      	cmp	r3, #0
 8001002:	d106      	bne.n	8001012 <xQueueReceive+0x1ee>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001004:	2314      	movs	r3, #20
 8001006:	18fb      	adds	r3, r7, r3
 8001008:	0018      	movs	r0, r3
 800100a:	f001 f9c7 	bl	800239c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800100e:	2301      	movs	r3, #1
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001012:	f002 f91f 	bl	8003254 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001016:	f000 fee9 	bl	8001dec <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800101a:	f002 f909 	bl	8003230 <vPortEnterCritical>
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	2244      	movs	r2, #68	; 0x44
 8001022:	5c9b      	ldrb	r3, [r3, r2]
 8001024:	b25b      	sxtb	r3, r3
 8001026:	3301      	adds	r3, #1
 8001028:	d103      	bne.n	8001032 <xQueueReceive+0x20e>
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	2244      	movs	r2, #68	; 0x44
 800102e:	2100      	movs	r1, #0
 8001030:	5499      	strb	r1, [r3, r2]
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	2245      	movs	r2, #69	; 0x45
 8001036:	5c9b      	ldrb	r3, [r3, r2]
 8001038:	b25b      	sxtb	r3, r3
 800103a:	3301      	adds	r3, #1
 800103c:	d103      	bne.n	8001046 <xQueueReceive+0x222>
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	2245      	movs	r2, #69	; 0x45
 8001042:	2100      	movs	r1, #0
 8001044:	5499      	strb	r1, [r3, r2]
 8001046:	f002 f905 	bl	8003254 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800104a:	1d3a      	adds	r2, r7, #4
 800104c:	2314      	movs	r3, #20
 800104e:	18fb      	adds	r3, r7, r3
 8001050:	0011      	movs	r1, r2
 8001052:	0018      	movs	r0, r3
 8001054:	f001 f9b6 	bl	80023c4 <xTaskCheckForTimeOut>
 8001058:	1e03      	subs	r3, r0, #0
 800105a:	d000      	beq.n	800105e <xQueueReceive+0x23a>
 800105c:	e07a      	b.n	8001154 <xQueueReceive+0x330>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	0018      	movs	r0, r3
 8001062:	f000 fbfb 	bl	800185c <prvIsQueueEmpty>
 8001066:	1e03      	subs	r3, r0, #0
 8001068:	d06d      	beq.n	8001146 <xQueueReceive+0x322>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 800106a:	f002 fab2 	bl	80035d2 <prvTraceGetCurrentTaskHandle>
 800106e:	0003      	movs	r3, r0
 8001070:	0018      	movs	r0, r3
 8001072:	f002 fa04 	bl	800347e <prvTraceGetTaskNumberHigh16>
 8001076:	0003      	movs	r3, r0
 8001078:	001a      	movs	r2, r3
 800107a:	4b5b      	ldr	r3, [pc, #364]	; (80011e8 <xQueueReceive+0x3c4>)
 800107c:	881b      	ldrh	r3, [r3, #0]
 800107e:	4013      	ands	r3, r2
 8001080:	b29b      	uxth	r3, r3
 8001082:	2b00      	cmp	r3, #0
 8001084:	d029      	beq.n	80010da <xQueueReceive+0x2b6>
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	0018      	movs	r0, r3
 800108a:	f002 fa4a 	bl	8003522 <prvTraceGetQueueNumberHigh16>
 800108e:	0003      	movs	r3, r0
 8001090:	001a      	movs	r2, r3
 8001092:	4b55      	ldr	r3, [pc, #340]	; (80011e8 <xQueueReceive+0x3c4>)
 8001094:	881b      	ldrh	r3, [r3, #0]
 8001096:	4013      	ands	r3, r2
 8001098:	b29b      	uxth	r3, r3
 800109a:	2b00      	cmp	r3, #0
 800109c:	d01d      	beq.n	80010da <xQueueReceive+0x2b6>
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	0018      	movs	r0, r3
 80010a2:	f002 f9d1 	bl	8003448 <prvTraceGetQueueType>
 80010a6:	0003      	movs	r3, r0
 80010a8:	001a      	movs	r2, r3
 80010aa:	4b50      	ldr	r3, [pc, #320]	; (80011ec <xQueueReceive+0x3c8>)
 80010ac:	5c9b      	ldrb	r3, [r3, r2]
 80010ae:	3368      	adds	r3, #104	; 0x68
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	001d      	movs	r5, r3
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	0018      	movs	r0, r3
 80010b8:	f002 f9c6 	bl	8003448 <prvTraceGetQueueType>
 80010bc:	0003      	movs	r3, r0
 80010be:	001a      	movs	r2, r3
 80010c0:	4b4a      	ldr	r3, [pc, #296]	; (80011ec <xQueueReceive+0x3c8>)
 80010c2:	5c9c      	ldrb	r4, [r3, r2]
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	0018      	movs	r0, r3
 80010c8:	f002 fa1d 	bl	8003506 <prvTraceGetQueueNumberLow16>
 80010cc:	0003      	movs	r3, r0
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	001a      	movs	r2, r3
 80010d2:	0021      	movs	r1, r4
 80010d4:	0028      	movs	r0, r5
 80010d6:	f002 ff2d 	bl	8003f34 <prvTraceStoreKernelCall>
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	0018      	movs	r0, r3
 80010de:	f002 f9b3 	bl	8003448 <prvTraceGetQueueType>
 80010e2:	0003      	movs	r3, r0
 80010e4:	001a      	movs	r2, r3
 80010e6:	4b41      	ldr	r3, [pc, #260]	; (80011ec <xQueueReceive+0x3c8>)
 80010e8:	5c9b      	ldrb	r3, [r3, r2]
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d018      	beq.n	8001120 <xQueueReceive+0x2fc>
 80010ee:	f002 fa70 	bl	80035d2 <prvTraceGetCurrentTaskHandle>
 80010f2:	0003      	movs	r3, r0
 80010f4:	0018      	movs	r0, r3
 80010f6:	f002 f9c2 	bl	800347e <prvTraceGetTaskNumberHigh16>
 80010fa:	0003      	movs	r3, r0
 80010fc:	001a      	movs	r2, r3
 80010fe:	4b3a      	ldr	r3, [pc, #232]	; (80011e8 <xQueueReceive+0x3c4>)
 8001100:	881b      	ldrh	r3, [r3, #0]
 8001102:	4013      	ands	r3, r2
 8001104:	b29b      	uxth	r3, r3
 8001106:	2b00      	cmp	r3, #0
 8001108:	d00a      	beq.n	8001120 <xQueueReceive+0x2fc>
 800110a:	f002 fa62 	bl	80035d2 <prvTraceGetCurrentTaskHandle>
 800110e:	0003      	movs	r3, r0
 8001110:	0018      	movs	r0, r3
 8001112:	f002 f9a6 	bl	8003462 <prvTraceGetTaskNumberLow16>
 8001116:	0003      	movs	r3, r0
 8001118:	b2db      	uxtb	r3, r3
 800111a:	0018      	movs	r0, r3
 800111c:	f003 fa98 	bl	8004650 <prvTraceSetTaskInstanceFinished>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	3324      	adds	r3, #36	; 0x24
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	0011      	movs	r1, r2
 8001128:	0018      	movs	r0, r3
 800112a:	f001 f843 	bl	80021b4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	0018      	movs	r0, r3
 8001132:	f000 fb35 	bl	80017a0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001136:	f000 fe65 	bl	8001e04 <xTaskResumeAll>
 800113a:	1e03      	subs	r3, r0, #0
 800113c:	d000      	beq.n	8001140 <xQueueReceive+0x31c>
 800113e:	e69c      	b.n	8000e7a <xQueueReceive+0x56>
                {
                    portYIELD_WITHIN_API();
 8001140:	f002 f866 	bl	8003210 <vPortYield>
 8001144:	e699      	b.n	8000e7a <xQueueReceive+0x56>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	0018      	movs	r0, r3
 800114a:	f000 fb29 	bl	80017a0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800114e:	f000 fe59 	bl	8001e04 <xTaskResumeAll>
 8001152:	e692      	b.n	8000e7a <xQueueReceive+0x56>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	0018      	movs	r0, r3
 8001158:	f000 fb22 	bl	80017a0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800115c:	f000 fe52 	bl	8001e04 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	0018      	movs	r0, r3
 8001164:	f000 fb7a 	bl	800185c <prvIsQueueEmpty>
 8001168:	1e03      	subs	r3, r0, #0
 800116a:	d100      	bne.n	800116e <xQueueReceive+0x34a>
 800116c:	e685      	b.n	8000e7a <xQueueReceive+0x56>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800116e:	f002 fa30 	bl	80035d2 <prvTraceGetCurrentTaskHandle>
 8001172:	0003      	movs	r3, r0
 8001174:	0018      	movs	r0, r3
 8001176:	f002 f982 	bl	800347e <prvTraceGetTaskNumberHigh16>
 800117a:	0003      	movs	r3, r0
 800117c:	001a      	movs	r2, r3
 800117e:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <xQueueReceive+0x3c4>)
 8001180:	881b      	ldrh	r3, [r3, #0]
 8001182:	4013      	ands	r3, r2
 8001184:	b29b      	uxth	r3, r3
 8001186:	2b00      	cmp	r3, #0
 8001188:	d029      	beq.n	80011de <xQueueReceive+0x3ba>
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	0018      	movs	r0, r3
 800118e:	f002 f9c8 	bl	8003522 <prvTraceGetQueueNumberHigh16>
 8001192:	0003      	movs	r3, r0
 8001194:	001a      	movs	r2, r3
 8001196:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <xQueueReceive+0x3c4>)
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	4013      	ands	r3, r2
 800119c:	b29b      	uxth	r3, r3
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d01d      	beq.n	80011de <xQueueReceive+0x3ba>
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	0018      	movs	r0, r3
 80011a6:	f002 f94f 	bl	8003448 <prvTraceGetQueueType>
 80011aa:	0003      	movs	r3, r0
 80011ac:	001a      	movs	r2, r3
 80011ae:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <xQueueReceive+0x3c8>)
 80011b0:	5c9b      	ldrb	r3, [r3, r2]
 80011b2:	3350      	adds	r3, #80	; 0x50
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	001d      	movs	r5, r3
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	0018      	movs	r0, r3
 80011bc:	f002 f944 	bl	8003448 <prvTraceGetQueueType>
 80011c0:	0003      	movs	r3, r0
 80011c2:	001a      	movs	r2, r3
 80011c4:	4b09      	ldr	r3, [pc, #36]	; (80011ec <xQueueReceive+0x3c8>)
 80011c6:	5c9c      	ldrb	r4, [r3, r2]
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	0018      	movs	r0, r3
 80011cc:	f002 f99b 	bl	8003506 <prvTraceGetQueueNumberLow16>
 80011d0:	0003      	movs	r3, r0
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	001a      	movs	r2, r3
 80011d6:	0021      	movs	r1, r4
 80011d8:	0028      	movs	r0, r5
 80011da:	f002 feab 	bl	8003f34 <prvTraceStoreKernelCall>
                return errQUEUE_EMPTY;
 80011de:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80011e0:	0018      	movs	r0, r3
 80011e2:	46bd      	mov	sp, r7
 80011e4:	b00a      	add	sp, #40	; 0x28
 80011e6:	bdb0      	pop	{r4, r5, r7, pc}
 80011e8:	20001da4 	.word	0x20001da4
 80011ec:	20000008 	.word	0x20000008

080011f0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 80011f0:	b5b0      	push	{r4, r5, r7, lr}
 80011f2:	b08a      	sub	sp, #40	; 0x28
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61fb      	str	r3, [r7, #28]
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	61bb      	str	r3, [r7, #24]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d101      	bne.n	8001210 <xQueueSemaphoreTake+0x20>
 800120c:	b672      	cpsid	i
 800120e:	e7fe      	b.n	800120e <xQueueSemaphoreTake+0x1e>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <xQueueSemaphoreTake+0x2c>
 8001218:	b672      	cpsid	i
 800121a:	e7fe      	b.n	800121a <xQueueSemaphoreTake+0x2a>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800121c:	f001 fa0a 	bl	8002634 <xTaskGetSchedulerState>
 8001220:	1e03      	subs	r3, r0, #0
 8001222:	d102      	bne.n	800122a <xQueueSemaphoreTake+0x3a>
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d101      	bne.n	800122e <xQueueSemaphoreTake+0x3e>
 800122a:	2301      	movs	r3, #1
 800122c:	e000      	b.n	8001230 <xQueueSemaphoreTake+0x40>
 800122e:	2300      	movs	r3, #0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d101      	bne.n	8001238 <xQueueSemaphoreTake+0x48>
 8001234:	b672      	cpsid	i
 8001236:	e7fe      	b.n	8001236 <xQueueSemaphoreTake+0x46>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001238:	f001 fffa 	bl	8003230 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001240:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8001242:	6a3b      	ldr	r3, [r7, #32]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d100      	bne.n	800124a <xQueueSemaphoreTake+0x5a>
 8001248:	e07c      	b.n	8001344 <xQueueSemaphoreTake+0x154>
            {
                traceQUEUE_RECEIVE( pxQueue );
 800124a:	f002 f9c2 	bl	80035d2 <prvTraceGetCurrentTaskHandle>
 800124e:	0003      	movs	r3, r0
 8001250:	0018      	movs	r0, r3
 8001252:	f002 f914 	bl	800347e <prvTraceGetTaskNumberHigh16>
 8001256:	0003      	movs	r3, r0
 8001258:	001a      	movs	r2, r3
 800125a:	4bba      	ldr	r3, [pc, #744]	; (8001544 <xQueueSemaphoreTake+0x354>)
 800125c:	881b      	ldrh	r3, [r3, #0]
 800125e:	4013      	ands	r3, r2
 8001260:	b29b      	uxth	r3, r3
 8001262:	2b00      	cmp	r3, #0
 8001264:	d029      	beq.n	80012ba <xQueueSemaphoreTake+0xca>
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	0018      	movs	r0, r3
 800126a:	f002 f95a 	bl	8003522 <prvTraceGetQueueNumberHigh16>
 800126e:	0003      	movs	r3, r0
 8001270:	001a      	movs	r2, r3
 8001272:	4bb4      	ldr	r3, [pc, #720]	; (8001544 <xQueueSemaphoreTake+0x354>)
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	4013      	ands	r3, r2
 8001278:	b29b      	uxth	r3, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	d01d      	beq.n	80012ba <xQueueSemaphoreTake+0xca>
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	0018      	movs	r0, r3
 8001282:	f002 f8e1 	bl	8003448 <prvTraceGetQueueType>
 8001286:	0003      	movs	r3, r0
 8001288:	001a      	movs	r2, r3
 800128a:	4baf      	ldr	r3, [pc, #700]	; (8001548 <xQueueSemaphoreTake+0x358>)
 800128c:	5c9b      	ldrb	r3, [r3, r2]
 800128e:	3328      	adds	r3, #40	; 0x28
 8001290:	b2db      	uxtb	r3, r3
 8001292:	001d      	movs	r5, r3
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	0018      	movs	r0, r3
 8001298:	f002 f8d6 	bl	8003448 <prvTraceGetQueueType>
 800129c:	0003      	movs	r3, r0
 800129e:	001a      	movs	r2, r3
 80012a0:	4ba9      	ldr	r3, [pc, #676]	; (8001548 <xQueueSemaphoreTake+0x358>)
 80012a2:	5c9c      	ldrb	r4, [r3, r2]
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	0018      	movs	r0, r3
 80012a8:	f002 f92d 	bl	8003506 <prvTraceGetQueueNumberLow16>
 80012ac:	0003      	movs	r3, r0
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	001a      	movs	r2, r3
 80012b2:	0021      	movs	r1, r4
 80012b4:	0028      	movs	r0, r5
 80012b6:	f002 fe3d 	bl	8003f34 <prvTraceStoreKernelCall>
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	0018      	movs	r0, r3
 80012be:	f002 f8c3 	bl	8003448 <prvTraceGetQueueType>
 80012c2:	0003      	movs	r3, r0
 80012c4:	001a      	movs	r2, r3
 80012c6:	4ba0      	ldr	r3, [pc, #640]	; (8001548 <xQueueSemaphoreTake+0x358>)
 80012c8:	5c9c      	ldrb	r4, [r3, r2]
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	0018      	movs	r0, r3
 80012ce:	f002 f91a 	bl	8003506 <prvTraceGetQueueNumberLow16>
 80012d2:	0003      	movs	r3, r0
 80012d4:	b2dd      	uxtb	r5, r3
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	0018      	movs	r0, r3
 80012da:	f002 f8b5 	bl	8003448 <prvTraceGetQueueType>
 80012de:	0003      	movs	r3, r0
 80012e0:	001a      	movs	r2, r3
 80012e2:	4b99      	ldr	r3, [pc, #612]	; (8001548 <xQueueSemaphoreTake+0x358>)
 80012e4:	5c9b      	ldrb	r3, [r3, r2]
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d108      	bne.n	80012fc <xQueueSemaphoreTake+0x10c>
 80012ea:	f002 f972 	bl	80035d2 <prvTraceGetCurrentTaskHandle>
 80012ee:	0003      	movs	r3, r0
 80012f0:	0018      	movs	r0, r3
 80012f2:	f002 f8b6 	bl	8003462 <prvTraceGetTaskNumberLow16>
 80012f6:	0003      	movs	r3, r0
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	e004      	b.n	8001306 <xQueueSemaphoreTake+0x116>
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001300:	b2db      	uxtb	r3, r3
 8001302:	3b01      	subs	r3, #1
 8001304:	b2db      	uxtb	r3, r3
 8001306:	001a      	movs	r2, r3
 8001308:	0029      	movs	r1, r5
 800130a:	0020      	movs	r0, r4
 800130c:	f003 f90a 	bl	8004524 <prvTraceSetObjectState>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8001310:	6a3b      	ldr	r3, [r7, #32]
 8001312:	1e5a      	subs	r2, r3, #1
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d104      	bne.n	800132a <xQueueSemaphoreTake+0x13a>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8001320:	f001 fbb2 	bl	8002a88 <pvTaskIncrementMutexHeldCount>
 8001324:	0002      	movs	r2, r0
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d004      	beq.n	800133c <xQueueSemaphoreTake+0x14c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	3310      	adds	r3, #16
 8001336:	0018      	movs	r0, r3
 8001338:	f000 ffbc 	bl	80022b4 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800133c:	f001 ff8a 	bl	8003254 <vPortExitCritical>
                return pdPASS;
 8001340:	2301      	movs	r3, #1
 8001342:	e15d      	b.n	8001600 <xQueueSemaphoreTake+0x410>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d140      	bne.n	80013cc <xQueueSemaphoreTake+0x1dc>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <xQueueSemaphoreTake+0x164>
 8001350:	b672      	cpsid	i
 8001352:	e7fe      	b.n	8001352 <xQueueSemaphoreTake+0x162>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8001354:	f001 ff7e 	bl	8003254 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8001358:	f002 f93b 	bl	80035d2 <prvTraceGetCurrentTaskHandle>
 800135c:	0003      	movs	r3, r0
 800135e:	0018      	movs	r0, r3
 8001360:	f002 f88d 	bl	800347e <prvTraceGetTaskNumberHigh16>
 8001364:	0003      	movs	r3, r0
 8001366:	001a      	movs	r2, r3
 8001368:	4b76      	ldr	r3, [pc, #472]	; (8001544 <xQueueSemaphoreTake+0x354>)
 800136a:	881b      	ldrh	r3, [r3, #0]
 800136c:	4013      	ands	r3, r2
 800136e:	b29b      	uxth	r3, r3
 8001370:	2b00      	cmp	r3, #0
 8001372:	d029      	beq.n	80013c8 <xQueueSemaphoreTake+0x1d8>
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	0018      	movs	r0, r3
 8001378:	f002 f8d3 	bl	8003522 <prvTraceGetQueueNumberHigh16>
 800137c:	0003      	movs	r3, r0
 800137e:	001a      	movs	r2, r3
 8001380:	4b70      	ldr	r3, [pc, #448]	; (8001544 <xQueueSemaphoreTake+0x354>)
 8001382:	881b      	ldrh	r3, [r3, #0]
 8001384:	4013      	ands	r3, r2
 8001386:	b29b      	uxth	r3, r3
 8001388:	2b00      	cmp	r3, #0
 800138a:	d01d      	beq.n	80013c8 <xQueueSemaphoreTake+0x1d8>
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	0018      	movs	r0, r3
 8001390:	f002 f85a 	bl	8003448 <prvTraceGetQueueType>
 8001394:	0003      	movs	r3, r0
 8001396:	001a      	movs	r2, r3
 8001398:	4b6b      	ldr	r3, [pc, #428]	; (8001548 <xQueueSemaphoreTake+0x358>)
 800139a:	5c9b      	ldrb	r3, [r3, r2]
 800139c:	3350      	adds	r3, #80	; 0x50
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	001d      	movs	r5, r3
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	0018      	movs	r0, r3
 80013a6:	f002 f84f 	bl	8003448 <prvTraceGetQueueType>
 80013aa:	0003      	movs	r3, r0
 80013ac:	001a      	movs	r2, r3
 80013ae:	4b66      	ldr	r3, [pc, #408]	; (8001548 <xQueueSemaphoreTake+0x358>)
 80013b0:	5c9c      	ldrb	r4, [r3, r2]
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	0018      	movs	r0, r3
 80013b6:	f002 f8a6 	bl	8003506 <prvTraceGetQueueNumberLow16>
 80013ba:	0003      	movs	r3, r0
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	001a      	movs	r2, r3
 80013c0:	0021      	movs	r1, r4
 80013c2:	0028      	movs	r0, r5
 80013c4:	f002 fdb6 	bl	8003f34 <prvTraceStoreKernelCall>
                    return errQUEUE_EMPTY;
 80013c8:	2300      	movs	r3, #0
 80013ca:	e119      	b.n	8001600 <xQueueSemaphoreTake+0x410>
                }
                else if( xEntryTimeSet == pdFALSE )
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d106      	bne.n	80013e0 <xQueueSemaphoreTake+0x1f0>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80013d2:	230c      	movs	r3, #12
 80013d4:	18fb      	adds	r3, r7, r3
 80013d6:	0018      	movs	r0, r3
 80013d8:	f000 ffe0 	bl	800239c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80013dc:	2301      	movs	r3, #1
 80013de:	61fb      	str	r3, [r7, #28]
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80013e0:	f001 ff38 	bl	8003254 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80013e4:	f000 fd02 	bl	8001dec <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80013e8:	f001 ff22 	bl	8003230 <vPortEnterCritical>
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	2244      	movs	r2, #68	; 0x44
 80013f0:	5c9b      	ldrb	r3, [r3, r2]
 80013f2:	b25b      	sxtb	r3, r3
 80013f4:	3301      	adds	r3, #1
 80013f6:	d103      	bne.n	8001400 <xQueueSemaphoreTake+0x210>
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	2244      	movs	r2, #68	; 0x44
 80013fc:	2100      	movs	r1, #0
 80013fe:	5499      	strb	r1, [r3, r2]
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	2245      	movs	r2, #69	; 0x45
 8001404:	5c9b      	ldrb	r3, [r3, r2]
 8001406:	b25b      	sxtb	r3, r3
 8001408:	3301      	adds	r3, #1
 800140a:	d103      	bne.n	8001414 <xQueueSemaphoreTake+0x224>
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	2245      	movs	r2, #69	; 0x45
 8001410:	2100      	movs	r1, #0
 8001412:	5499      	strb	r1, [r3, r2]
 8001414:	f001 ff1e 	bl	8003254 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001418:	003a      	movs	r2, r7
 800141a:	230c      	movs	r3, #12
 800141c:	18fb      	adds	r3, r7, r3
 800141e:	0011      	movs	r1, r2
 8001420:	0018      	movs	r0, r3
 8001422:	f000 ffcf 	bl	80023c4 <xTaskCheckForTimeOut>
 8001426:	1e03      	subs	r3, r0, #0
 8001428:	d000      	beq.n	800142c <xQueueSemaphoreTake+0x23c>
 800142a:	e08f      	b.n	800154c <xQueueSemaphoreTake+0x35c>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	0018      	movs	r0, r3
 8001430:	f000 fa14 	bl	800185c <prvIsQueueEmpty>
 8001434:	1e03      	subs	r3, r0, #0
 8001436:	d100      	bne.n	800143a <xQueueSemaphoreTake+0x24a>
 8001438:	e07c      	b.n	8001534 <xQueueSemaphoreTake+0x344>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 800143a:	f002 f8ca 	bl	80035d2 <prvTraceGetCurrentTaskHandle>
 800143e:	0003      	movs	r3, r0
 8001440:	0018      	movs	r0, r3
 8001442:	f002 f81c 	bl	800347e <prvTraceGetTaskNumberHigh16>
 8001446:	0003      	movs	r3, r0
 8001448:	001a      	movs	r2, r3
 800144a:	4b3e      	ldr	r3, [pc, #248]	; (8001544 <xQueueSemaphoreTake+0x354>)
 800144c:	881b      	ldrh	r3, [r3, #0]
 800144e:	4013      	ands	r3, r2
 8001450:	b29b      	uxth	r3, r3
 8001452:	2b00      	cmp	r3, #0
 8001454:	d029      	beq.n	80014aa <xQueueSemaphoreTake+0x2ba>
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	0018      	movs	r0, r3
 800145a:	f002 f862 	bl	8003522 <prvTraceGetQueueNumberHigh16>
 800145e:	0003      	movs	r3, r0
 8001460:	001a      	movs	r2, r3
 8001462:	4b38      	ldr	r3, [pc, #224]	; (8001544 <xQueueSemaphoreTake+0x354>)
 8001464:	881b      	ldrh	r3, [r3, #0]
 8001466:	4013      	ands	r3, r2
 8001468:	b29b      	uxth	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d01d      	beq.n	80014aa <xQueueSemaphoreTake+0x2ba>
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	0018      	movs	r0, r3
 8001472:	f001 ffe9 	bl	8003448 <prvTraceGetQueueType>
 8001476:	0003      	movs	r3, r0
 8001478:	001a      	movs	r2, r3
 800147a:	4b33      	ldr	r3, [pc, #204]	; (8001548 <xQueueSemaphoreTake+0x358>)
 800147c:	5c9b      	ldrb	r3, [r3, r2]
 800147e:	3368      	adds	r3, #104	; 0x68
 8001480:	b2db      	uxtb	r3, r3
 8001482:	001d      	movs	r5, r3
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	0018      	movs	r0, r3
 8001488:	f001 ffde 	bl	8003448 <prvTraceGetQueueType>
 800148c:	0003      	movs	r3, r0
 800148e:	001a      	movs	r2, r3
 8001490:	4b2d      	ldr	r3, [pc, #180]	; (8001548 <xQueueSemaphoreTake+0x358>)
 8001492:	5c9c      	ldrb	r4, [r3, r2]
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	0018      	movs	r0, r3
 8001498:	f002 f835 	bl	8003506 <prvTraceGetQueueNumberLow16>
 800149c:	0003      	movs	r3, r0
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	001a      	movs	r2, r3
 80014a2:	0021      	movs	r1, r4
 80014a4:	0028      	movs	r0, r5
 80014a6:	f002 fd45 	bl	8003f34 <prvTraceStoreKernelCall>
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	0018      	movs	r0, r3
 80014ae:	f001 ffcb 	bl	8003448 <prvTraceGetQueueType>
 80014b2:	0003      	movs	r3, r0
 80014b4:	001a      	movs	r2, r3
 80014b6:	4b24      	ldr	r3, [pc, #144]	; (8001548 <xQueueSemaphoreTake+0x358>)
 80014b8:	5c9b      	ldrb	r3, [r3, r2]
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d018      	beq.n	80014f0 <xQueueSemaphoreTake+0x300>
 80014be:	f002 f888 	bl	80035d2 <prvTraceGetCurrentTaskHandle>
 80014c2:	0003      	movs	r3, r0
 80014c4:	0018      	movs	r0, r3
 80014c6:	f001 ffda 	bl	800347e <prvTraceGetTaskNumberHigh16>
 80014ca:	0003      	movs	r3, r0
 80014cc:	001a      	movs	r2, r3
 80014ce:	4b1d      	ldr	r3, [pc, #116]	; (8001544 <xQueueSemaphoreTake+0x354>)
 80014d0:	881b      	ldrh	r3, [r3, #0]
 80014d2:	4013      	ands	r3, r2
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d00a      	beq.n	80014f0 <xQueueSemaphoreTake+0x300>
 80014da:	f002 f87a 	bl	80035d2 <prvTraceGetCurrentTaskHandle>
 80014de:	0003      	movs	r3, r0
 80014e0:	0018      	movs	r0, r3
 80014e2:	f001 ffbe 	bl	8003462 <prvTraceGetTaskNumberLow16>
 80014e6:	0003      	movs	r3, r0
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	0018      	movs	r0, r3
 80014ec:	f003 f8b0 	bl	8004650 <prvTraceSetTaskInstanceFinished>

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d10a      	bne.n	800150e <xQueueSemaphoreTake+0x31e>
                        {
                            taskENTER_CRITICAL();
 80014f8:	f001 fe9a 	bl	8003230 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	0018      	movs	r0, r3
 8001502:	f001 f8b3 	bl	800266c <xTaskPriorityInherit>
 8001506:	0003      	movs	r3, r0
 8001508:	617b      	str	r3, [r7, #20]
                            }
                            taskEXIT_CRITICAL();
 800150a:	f001 fea3 	bl	8003254 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	3324      	adds	r3, #36	; 0x24
 8001512:	683a      	ldr	r2, [r7, #0]
 8001514:	0011      	movs	r1, r2
 8001516:	0018      	movs	r0, r3
 8001518:	f000 fe4c 	bl	80021b4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	0018      	movs	r0, r3
 8001520:	f000 f93e 	bl	80017a0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001524:	f000 fc6e 	bl	8001e04 <xTaskResumeAll>
 8001528:	1e03      	subs	r3, r0, #0
 800152a:	d000      	beq.n	800152e <xQueueSemaphoreTake+0x33e>
 800152c:	e684      	b.n	8001238 <xQueueSemaphoreTake+0x48>
                {
                    portYIELD_WITHIN_API();
 800152e:	f001 fe6f 	bl	8003210 <vPortYield>
 8001532:	e681      	b.n	8001238 <xQueueSemaphoreTake+0x48>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	0018      	movs	r0, r3
 8001538:	f000 f932 	bl	80017a0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800153c:	f000 fc62 	bl	8001e04 <xTaskResumeAll>
 8001540:	e67a      	b.n	8001238 <xQueueSemaphoreTake+0x48>
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	20001da4 	.word	0x20001da4
 8001548:	20000008 	.word	0x20000008
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	0018      	movs	r0, r3
 8001550:	f000 f926 	bl	80017a0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001554:	f000 fc56 	bl	8001e04 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	0018      	movs	r0, r3
 800155c:	f000 f97e 	bl	800185c <prvIsQueueEmpty>
 8001560:	1e03      	subs	r3, r0, #0
 8001562:	d100      	bne.n	8001566 <xQueueSemaphoreTake+0x376>
 8001564:	e668      	b.n	8001238 <xQueueSemaphoreTake+0x48>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d010      	beq.n	800158e <xQueueSemaphoreTake+0x39e>
                        {
                            taskENTER_CRITICAL();
 800156c:	f001 fe60 	bl	8003230 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	0018      	movs	r0, r3
 8001574:	f000 f86d 	bl	8001652 <prvGetDisinheritPriorityAfterTimeout>
 8001578:	0003      	movs	r3, r0
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001582:	0011      	movs	r1, r2
 8001584:	0018      	movs	r0, r3
 8001586:	f001 f9c7 	bl	8002918 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 800158a:	f001 fe63 	bl	8003254 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800158e:	f002 f820 	bl	80035d2 <prvTraceGetCurrentTaskHandle>
 8001592:	0003      	movs	r3, r0
 8001594:	0018      	movs	r0, r3
 8001596:	f001 ff72 	bl	800347e <prvTraceGetTaskNumberHigh16>
 800159a:	0003      	movs	r3, r0
 800159c:	001a      	movs	r2, r3
 800159e:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <xQueueSemaphoreTake+0x418>)
 80015a0:	881b      	ldrh	r3, [r3, #0]
 80015a2:	4013      	ands	r3, r2
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d029      	beq.n	80015fe <xQueueSemaphoreTake+0x40e>
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	0018      	movs	r0, r3
 80015ae:	f001 ffb8 	bl	8003522 <prvTraceGetQueueNumberHigh16>
 80015b2:	0003      	movs	r3, r0
 80015b4:	001a      	movs	r2, r3
 80015b6:	4b14      	ldr	r3, [pc, #80]	; (8001608 <xQueueSemaphoreTake+0x418>)
 80015b8:	881b      	ldrh	r3, [r3, #0]
 80015ba:	4013      	ands	r3, r2
 80015bc:	b29b      	uxth	r3, r3
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d01d      	beq.n	80015fe <xQueueSemaphoreTake+0x40e>
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	0018      	movs	r0, r3
 80015c6:	f001 ff3f 	bl	8003448 <prvTraceGetQueueType>
 80015ca:	0003      	movs	r3, r0
 80015cc:	001a      	movs	r2, r3
 80015ce:	4b0f      	ldr	r3, [pc, #60]	; (800160c <xQueueSemaphoreTake+0x41c>)
 80015d0:	5c9b      	ldrb	r3, [r3, r2]
 80015d2:	3350      	adds	r3, #80	; 0x50
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	001d      	movs	r5, r3
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	0018      	movs	r0, r3
 80015dc:	f001 ff34 	bl	8003448 <prvTraceGetQueueType>
 80015e0:	0003      	movs	r3, r0
 80015e2:	001a      	movs	r2, r3
 80015e4:	4b09      	ldr	r3, [pc, #36]	; (800160c <xQueueSemaphoreTake+0x41c>)
 80015e6:	5c9c      	ldrb	r4, [r3, r2]
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	0018      	movs	r0, r3
 80015ec:	f001 ff8b 	bl	8003506 <prvTraceGetQueueNumberLow16>
 80015f0:	0003      	movs	r3, r0
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	001a      	movs	r2, r3
 80015f6:	0021      	movs	r1, r4
 80015f8:	0028      	movs	r0, r5
 80015fa:	f002 fc9b 	bl	8003f34 <prvTraceStoreKernelCall>
                return errQUEUE_EMPTY;
 80015fe:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001600:	0018      	movs	r0, r3
 8001602:	46bd      	mov	sp, r7
 8001604:	b00a      	add	sp, #40	; 0x28
 8001606:	bdb0      	pop	{r4, r5, r7, pc}
 8001608:	20001da4 	.word	0x20001da4
 800160c:	20000008 	.word	0x20000008

08001610 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

    UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
    {
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
        return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
 800161c:	0018      	movs	r0, r3
 800161e:	46bd      	mov	sp, r7
 8001620:	b002      	add	sp, #8
 8001622:	bd80      	pop	{r7, pc}

08001624 <vQueueSetQueueNumber>:

#if ( configUSE_TRACE_FACILITY == 1 )

    void vQueueSetQueueNumber( QueueHandle_t xQueue,
                               UBaseType_t uxQueueNumber )
    {
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
        ( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	649a      	str	r2, [r3, #72]	; 0x48
    }
 8001634:	46c0      	nop			; (mov r8, r8)
 8001636:	46bd      	mov	sp, r7
 8001638:	b002      	add	sp, #8
 800163a:	bd80      	pop	{r7, pc}

0800163c <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

    uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
    {
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
        return ( ( Queue_t * ) xQueue )->ucQueueType;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	224c      	movs	r2, #76	; 0x4c
 8001648:	5c9b      	ldrb	r3, [r3, r2]
    }
 800164a:	0018      	movs	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	b002      	add	sp, #8
 8001650:	bd80      	pop	{r7, pc}

08001652 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8001652:	b580      	push	{r7, lr}
 8001654:	b084      	sub	sp, #16
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165e:	2b00      	cmp	r3, #0
 8001660:	d006      	beq.n	8001670 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2205      	movs	r2, #5
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	e001      	b.n	8001674 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8001670:	2300      	movs	r3, #0
 8001672:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8001674:	68fb      	ldr	r3, [r7, #12]
    }
 8001676:	0018      	movs	r0, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	b004      	add	sp, #16
 800167c:	bd80      	pop	{r7, pc}

0800167e <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b086      	sub	sp, #24
 8001682:	af00      	add	r7, sp, #0
 8001684:	60f8      	str	r0, [r7, #12]
 8001686:	60b9      	str	r1, [r7, #8]
 8001688:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800168a:	2300      	movs	r3, #0
 800168c:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001692:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001698:	2b00      	cmp	r3, #0
 800169a:	d10e      	bne.n	80016ba <prvCopyDataToQueue+0x3c>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d14e      	bne.n	8001742 <prvCopyDataToQueue+0xc4>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	0018      	movs	r0, r3
 80016aa:	f001 f891 	bl	80027d0 <xTaskPriorityDisinherit>
 80016ae:	0003      	movs	r3, r0
 80016b0:	617b      	str	r3, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	e043      	b.n	8001742 <prvCopyDataToQueue+0xc4>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d119      	bne.n	80016f4 <prvCopyDataToQueue+0x76>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	6858      	ldr	r0, [r3, #4]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	0019      	movs	r1, r3
 80016cc:	f004 faa4 	bl	8005c18 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d8:	18d2      	adds	r2, r2, r3
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	685a      	ldr	r2, [r3, #4]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d32b      	bcc.n	8001742 <prvCopyDataToQueue+0xc4>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	e026      	b.n	8001742 <prvCopyDataToQueue+0xc4>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	68d8      	ldr	r0, [r3, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	0019      	movs	r1, r3
 8001700:	f004 fa8a 	bl	8005c18 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	68da      	ldr	r2, [r3, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	425b      	negs	r3, r3
 800170e:	18d2      	adds	r2, r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	68da      	ldr	r2, [r3, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	429a      	cmp	r2, r3
 800171e:	d207      	bcs.n	8001730 <prvCopyDataToQueue+0xb2>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	425b      	negs	r3, r3
 800172a:	18d2      	adds	r2, r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b02      	cmp	r3, #2
 8001734:	d105      	bne.n	8001742 <prvCopyDataToQueue+0xc4>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d002      	beq.n	8001742 <prvCopyDataToQueue+0xc4>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	3b01      	subs	r3, #1
 8001740:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1c5a      	adds	r2, r3, #1
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800174a:	697b      	ldr	r3, [r7, #20]
}
 800174c:	0018      	movs	r0, r3
 800174e:	46bd      	mov	sp, r7
 8001750:	b006      	add	sp, #24
 8001752:	bd80      	pop	{r7, pc}

08001754 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	2b00      	cmp	r3, #0
 8001764:	d018      	beq.n	8001798 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	68da      	ldr	r2, [r3, #12]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	18d2      	adds	r2, r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68da      	ldr	r2, [r3, #12]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	429a      	cmp	r2, r3
 800177e:	d303      	bcc.n	8001788 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	68d9      	ldr	r1, [r3, #12]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	0018      	movs	r0, r3
 8001794:	f004 fa40 	bl	8005c18 <memcpy>
    }
}
 8001798:	46c0      	nop			; (mov r8, r8)
 800179a:	46bd      	mov	sp, r7
 800179c:	b002      	add	sp, #8
 800179e:	bd80      	pop	{r7, pc}

080017a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80017a8:	f001 fd42 	bl	8003230 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80017ac:	230f      	movs	r3, #15
 80017ae:	18fb      	adds	r3, r7, r3
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	2145      	movs	r1, #69	; 0x45
 80017b4:	5c52      	ldrb	r2, [r2, r1]
 80017b6:	701a      	strb	r2, [r3, #0]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80017b8:	e013      	b.n	80017e2 <prvUnlockQueue+0x42>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d016      	beq.n	80017f0 <prvUnlockQueue+0x50>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	3324      	adds	r3, #36	; 0x24
 80017c6:	0018      	movs	r0, r3
 80017c8:	f000 fd74 	bl	80022b4 <xTaskRemoveFromEventList>
 80017cc:	1e03      	subs	r3, r0, #0
 80017ce:	d001      	beq.n	80017d4 <prvUnlockQueue+0x34>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80017d0:	f000 fe4c 	bl	800246c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80017d4:	210f      	movs	r1, #15
 80017d6:	187b      	adds	r3, r7, r1
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	3b01      	subs	r3, #1
 80017dc:	b2da      	uxtb	r2, r3
 80017de:	187b      	adds	r3, r7, r1
 80017e0:	701a      	strb	r2, [r3, #0]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80017e2:	230f      	movs	r3, #15
 80017e4:	18fb      	adds	r3, r7, r3
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	b25b      	sxtb	r3, r3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	dce5      	bgt.n	80017ba <prvUnlockQueue+0x1a>
 80017ee:	e000      	b.n	80017f2 <prvUnlockQueue+0x52>
                        break;
 80017f0:	46c0      	nop			; (mov r8, r8)
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2245      	movs	r2, #69	; 0x45
 80017f6:	21ff      	movs	r1, #255	; 0xff
 80017f8:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 80017fa:	f001 fd2b 	bl	8003254 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80017fe:	f001 fd17 	bl	8003230 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001802:	230e      	movs	r3, #14
 8001804:	18fb      	adds	r3, r7, r3
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	2144      	movs	r1, #68	; 0x44
 800180a:	5c52      	ldrb	r2, [r2, r1]
 800180c:	701a      	strb	r2, [r3, #0]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800180e:	e013      	b.n	8001838 <prvUnlockQueue+0x98>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d016      	beq.n	8001846 <prvUnlockQueue+0xa6>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3310      	adds	r3, #16
 800181c:	0018      	movs	r0, r3
 800181e:	f000 fd49 	bl	80022b4 <xTaskRemoveFromEventList>
 8001822:	1e03      	subs	r3, r0, #0
 8001824:	d001      	beq.n	800182a <prvUnlockQueue+0x8a>
                {
                    vTaskMissedYield();
 8001826:	f000 fe21 	bl	800246c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800182a:	210e      	movs	r1, #14
 800182c:	187b      	adds	r3, r7, r1
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	3b01      	subs	r3, #1
 8001832:	b2da      	uxtb	r2, r3
 8001834:	187b      	adds	r3, r7, r1
 8001836:	701a      	strb	r2, [r3, #0]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001838:	230e      	movs	r3, #14
 800183a:	18fb      	adds	r3, r7, r3
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	b25b      	sxtb	r3, r3
 8001840:	2b00      	cmp	r3, #0
 8001842:	dce5      	bgt.n	8001810 <prvUnlockQueue+0x70>
 8001844:	e000      	b.n	8001848 <prvUnlockQueue+0xa8>
            }
            else
            {
                break;
 8001846:	46c0      	nop			; (mov r8, r8)
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2244      	movs	r2, #68	; 0x44
 800184c:	21ff      	movs	r1, #255	; 0xff
 800184e:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8001850:	f001 fd00 	bl	8003254 <vPortExitCritical>
}
 8001854:	46c0      	nop			; (mov r8, r8)
 8001856:	46bd      	mov	sp, r7
 8001858:	b004      	add	sp, #16
 800185a:	bd80      	pop	{r7, pc}

0800185c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001864:	f001 fce4 	bl	8003230 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800186c:	2b00      	cmp	r3, #0
 800186e:	d102      	bne.n	8001876 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001870:	2301      	movs	r3, #1
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	e001      	b.n	800187a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800187a:	f001 fceb 	bl	8003254 <vPortExitCritical>

    return xReturn;
 800187e:	68fb      	ldr	r3, [r7, #12]
}
 8001880:	0018      	movs	r0, r3
 8001882:	46bd      	mov	sp, r7
 8001884:	b004      	add	sp, #16
 8001886:	bd80      	pop	{r7, pc}

08001888 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001890:	f001 fcce 	bl	8003230 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800189c:	429a      	cmp	r2, r3
 800189e:	d102      	bne.n	80018a6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80018a0:	2301      	movs	r3, #1
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	e001      	b.n	80018aa <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80018aa:	f001 fcd3 	bl	8003254 <vPortExitCritical>

    return xReturn;
 80018ae:	68fb      	ldr	r3, [r7, #12]
}
 80018b0:	0018      	movs	r0, r3
 80018b2:	46bd      	mov	sp, r7
 80018b4:	b004      	add	sp, #16
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80018c8:	f001 fcb2 	bl	8003230 <vPortEnterCritical>
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	2244      	movs	r2, #68	; 0x44
 80018d0:	5c9b      	ldrb	r3, [r3, r2]
 80018d2:	b25b      	sxtb	r3, r3
 80018d4:	3301      	adds	r3, #1
 80018d6:	d103      	bne.n	80018e0 <vQueueWaitForMessageRestricted+0x28>
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	2244      	movs	r2, #68	; 0x44
 80018dc:	2100      	movs	r1, #0
 80018de:	5499      	strb	r1, [r3, r2]
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	2245      	movs	r2, #69	; 0x45
 80018e4:	5c9b      	ldrb	r3, [r3, r2]
 80018e6:	b25b      	sxtb	r3, r3
 80018e8:	3301      	adds	r3, #1
 80018ea:	d103      	bne.n	80018f4 <vQueueWaitForMessageRestricted+0x3c>
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	2245      	movs	r2, #69	; 0x45
 80018f0:	2100      	movs	r1, #0
 80018f2:	5499      	strb	r1, [r3, r2]
 80018f4:	f001 fcae 	bl	8003254 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d106      	bne.n	800190e <vQueueWaitForMessageRestricted+0x56>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	3324      	adds	r3, #36	; 0x24
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	68b9      	ldr	r1, [r7, #8]
 8001908:	0018      	movs	r0, r3
 800190a:	f000 fc71 	bl	80021f0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	0018      	movs	r0, r3
 8001912:	f7ff ff45 	bl	80017a0 <prvUnlockQueue>
    }
 8001916:	46c0      	nop			; (mov r8, r8)
 8001918:	46bd      	mov	sp, r7
 800191a:	b006      	add	sp, #24
 800191c:	bd80      	pop	{r7, pc}

0800191e <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800191e:	b590      	push	{r4, r7, lr}
 8001920:	b08d      	sub	sp, #52	; 0x34
 8001922:	af04      	add	r7, sp, #16
 8001924:	60f8      	str	r0, [r7, #12]
 8001926:	60b9      	str	r1, [r7, #8]
 8001928:	603b      	str	r3, [r7, #0]
 800192a:	1dbb      	adds	r3, r7, #6
 800192c:	801a      	strh	r2, [r3, #0]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800192e:	1dbb      	adds	r3, r7, #6
 8001930:	881b      	ldrh	r3, [r3, #0]
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	0018      	movs	r0, r3
 8001936:	f001 fd0b 	bl	8003350 <pvPortMalloc>
 800193a:	0003      	movs	r3, r0
 800193c:	617b      	str	r3, [r7, #20]

                if( pxStack != NULL )
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d010      	beq.n	8001966 <xTaskCreate+0x48>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001944:	2058      	movs	r0, #88	; 0x58
 8001946:	f001 fd03 	bl	8003350 <pvPortMalloc>
 800194a:	0003      	movs	r3, r0
 800194c:	61fb      	str	r3, [r7, #28]

                    if( pxNewTCB != NULL )
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d003      	beq.n	800195c <xTaskCreate+0x3e>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	631a      	str	r2, [r3, #48]	; 0x30
 800195a:	e006      	b.n	800196a <xTaskCreate+0x4c>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	0018      	movs	r0, r3
 8001960:	f001 fd58 	bl	8003414 <vPortFree>
 8001964:	e001      	b.n	800196a <xTaskCreate+0x4c>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d016      	beq.n	800199e <xTaskCreate+0x80>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001970:	1dbb      	adds	r3, r7, #6
 8001972:	881a      	ldrh	r2, [r3, #0]
 8001974:	683c      	ldr	r4, [r7, #0]
 8001976:	68b9      	ldr	r1, [r7, #8]
 8001978:	68f8      	ldr	r0, [r7, #12]
 800197a:	2300      	movs	r3, #0
 800197c:	9303      	str	r3, [sp, #12]
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	9302      	str	r3, [sp, #8]
 8001982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001984:	9301      	str	r3, [sp, #4]
 8001986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001988:	9300      	str	r3, [sp, #0]
 800198a:	0023      	movs	r3, r4
 800198c:	f000 f810 	bl	80019b0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	0018      	movs	r0, r3
 8001994:	f000 f89c 	bl	8001ad0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001998:	2301      	movs	r3, #1
 800199a:	61bb      	str	r3, [r7, #24]
 800199c:	e002      	b.n	80019a4 <xTaskCreate+0x86>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800199e:	2301      	movs	r3, #1
 80019a0:	425b      	negs	r3, r3
 80019a2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80019a4:	69bb      	ldr	r3, [r7, #24]
    }
 80019a6:	0018      	movs	r0, r3
 80019a8:	46bd      	mov	sp, r7
 80019aa:	b009      	add	sp, #36	; 0x24
 80019ac:	bd90      	pop	{r4, r7, pc}
	...

080019b0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
 80019bc:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80019be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	001a      	movs	r2, r3
 80019c8:	21a5      	movs	r1, #165	; 0xa5
 80019ca:	f004 f8f9 	bl	8005bc0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80019ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	493d      	ldr	r1, [pc, #244]	; (8001acc <prvInitialiseNewTask+0x11c>)
 80019d6:	468c      	mov	ip, r1
 80019d8:	4463      	add	r3, ip
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	18d3      	adds	r3, r2, r3
 80019de:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	2207      	movs	r2, #7
 80019e4:	4393      	bics	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	2207      	movs	r2, #7
 80019ec:	4013      	ands	r3, r2
 80019ee:	d001      	beq.n	80019f4 <prvInitialiseNewTask+0x44>
 80019f0:	b672      	cpsid	i
 80019f2:	e7fe      	b.n	80019f2 <prvInitialiseNewTask+0x42>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d020      	beq.n	8001a3c <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	e013      	b.n	8001a28 <prvInitialiseNewTask+0x78>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001a00:	68ba      	ldr	r2, [r7, #8]
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	18d3      	adds	r3, r2, r3
 8001a06:	7818      	ldrb	r0, [r3, #0]
 8001a08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a0a:	2134      	movs	r1, #52	; 0x34
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	18d3      	adds	r3, r2, r3
 8001a10:	185b      	adds	r3, r3, r1
 8001a12:	1c02      	adds	r2, r0, #0
 8001a14:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001a16:	68ba      	ldr	r2, [r7, #8]
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	18d3      	adds	r3, r2, r3
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d006      	beq.n	8001a30 <prvInitialiseNewTask+0x80>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	3301      	adds	r3, #1
 8001a26:	617b      	str	r3, [r7, #20]
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	2b09      	cmp	r3, #9
 8001a2c:	d9e8      	bls.n	8001a00 <prvInitialiseNewTask+0x50>
 8001a2e:	e000      	b.n	8001a32 <prvInitialiseNewTask+0x82>
            {
                break;
 8001a30:	46c0      	nop			; (mov r8, r8)
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a34:	223d      	movs	r2, #61	; 0x3d
 8001a36:	2100      	movs	r1, #0
 8001a38:	5499      	strb	r1, [r3, r2]
 8001a3a:	e003      	b.n	8001a44 <prvInitialiseNewTask+0x94>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a3e:	2234      	movs	r2, #52	; 0x34
 8001a40:	2100      	movs	r1, #0
 8001a42:	5499      	strb	r1, [r3, r2]
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001a44:	6a3b      	ldr	r3, [r7, #32]
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	d901      	bls.n	8001a4e <prvInitialiseNewTask+0x9e>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001a4a:	2304      	movs	r3, #4
 8001a4c:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a50:	6a3a      	ldr	r2, [r7, #32]
 8001a52:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8001a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a56:	6a3a      	ldr	r2, [r7, #32]
 8001a58:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8001a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a62:	3304      	adds	r3, #4
 8001a64:	0018      	movs	r0, r3
 8001a66:	f7fe fbf9 	bl	800025c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a6c:	3318      	adds	r3, #24
 8001a6e:	0018      	movs	r0, r3
 8001a70:	f7fe fbf4 	bl	800025c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a78:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a7a:	6a3b      	ldr	r3, [r7, #32]
 8001a7c:	2205      	movs	r2, #5
 8001a7e:	1ad2      	subs	r2, r2, r3
 8001a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a82:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a88:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8001a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a8c:	3350      	adds	r3, #80	; 0x50
 8001a8e:	2204      	movs	r2, #4
 8001a90:	2100      	movs	r1, #0
 8001a92:	0018      	movs	r0, r3
 8001a94:	f004 f894 	bl	8005bc0 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8001a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a9a:	3354      	adds	r3, #84	; 0x54
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	f004 f88d 	bl	8005bc0 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	68f9      	ldr	r1, [r7, #12]
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	0018      	movs	r0, r3
 8001aae:	f001 fb25 	bl	80030fc <pxPortInitialiseStack>
 8001ab2:	0002      	movs	r2, r0
 8001ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab6:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d002      	beq.n	8001ac4 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ac2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001ac4:	46c0      	nop			; (mov r8, r8)
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	b006      	add	sp, #24
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	3fffffff 	.word	0x3fffffff

08001ad0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001ad8:	f001 fbaa 	bl	8003230 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001adc:	4b5a      	ldr	r3, [pc, #360]	; (8001c48 <prvAddNewTaskToReadyList+0x178>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	1c5a      	adds	r2, r3, #1
 8001ae2:	4b59      	ldr	r3, [pc, #356]	; (8001c48 <prvAddNewTaskToReadyList+0x178>)
 8001ae4:	601a      	str	r2, [r3, #0]

        if( pxCurrentTCB == NULL )
 8001ae6:	4b59      	ldr	r3, [pc, #356]	; (8001c4c <prvAddNewTaskToReadyList+0x17c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d109      	bne.n	8001b02 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001aee:	4b57      	ldr	r3, [pc, #348]	; (8001c4c <prvAddNewTaskToReadyList+0x17c>)
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	601a      	str	r2, [r3, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001af4:	4b54      	ldr	r3, [pc, #336]	; (8001c48 <prvAddNewTaskToReadyList+0x178>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d110      	bne.n	8001b1e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001afc:	f000 fcee 	bl	80024dc <prvInitialiseTaskLists>
 8001b00:	e00d      	b.n	8001b1e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001b02:	4b53      	ldr	r3, [pc, #332]	; (8001c50 <prvAddNewTaskToReadyList+0x180>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d109      	bne.n	8001b1e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001b0a:	4b50      	ldr	r3, [pc, #320]	; (8001c4c <prvAddNewTaskToReadyList+0x17c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d802      	bhi.n	8001b1e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001b18:	4b4c      	ldr	r3, [pc, #304]	; (8001c4c <prvAddNewTaskToReadyList+0x17c>)
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	601a      	str	r2, [r3, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001b1e:	4b4d      	ldr	r3, [pc, #308]	; (8001c54 <prvAddNewTaskToReadyList+0x184>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	1c5a      	adds	r2, r3, #1
 8001b24:	4b4b      	ldr	r3, [pc, #300]	; (8001c54 <prvAddNewTaskToReadyList+0x184>)
 8001b26:	601a      	str	r2, [r3, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001b28:	4b4a      	ldr	r3, [pc, #296]	; (8001c54 <prvAddNewTaskToReadyList+0x184>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d04e      	beq.n	8001bd4 <prvAddNewTaskToReadyList+0x104>
 8001b36:	2003      	movs	r0, #3
 8001b38:	f002 fe4c 	bl	80047d4 <prvTraceGetObjectHandle>
 8001b3c:	0003      	movs	r3, r0
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	0011      	movs	r1, r2
 8001b44:	0018      	movs	r0, r3
 8001b46:	f001 fca9 	bl	800349c <prvTraceSetTaskNumberLow16>
 8001b4a:	4b43      	ldr	r3, [pc, #268]	; (8001c58 <prvAddNewTaskToReadyList+0x188>)
 8001b4c:	881a      	ldrh	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	0011      	movs	r1, r2
 8001b52:	0018      	movs	r0, r3
 8001b54:	f001 fcbc 	bl	80034d0 <prvTraceSetTaskNumberHigh16>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	0018      	movs	r0, r3
 8001b5c:	f001 fc81 	bl	8003462 <prvTraceGetTaskNumberLow16>
 8001b60:	0003      	movs	r3, r0
 8001b62:	b2d9      	uxtb	r1, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3334      	adds	r3, #52	; 0x34
 8001b68:	001a      	movs	r2, r3
 8001b6a:	2003      	movs	r0, #3
 8001b6c:	f002 ff44 	bl	80049f8 <prvTraceSetObjectName>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	0018      	movs	r0, r3
 8001b74:	f001 fc75 	bl	8003462 <prvTraceGetTaskNumberLow16>
 8001b78:	0003      	movs	r3, r0
 8001b7a:	b2d9      	uxtb	r1, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	001a      	movs	r2, r3
 8001b84:	2003      	movs	r0, #3
 8001b86:	f002 fc35 	bl	80043f4 <prvTraceSetPriorityProperty>
 8001b8a:	f001 fd22 	bl	80035d2 <prvTraceGetCurrentTaskHandle>
 8001b8e:	0003      	movs	r3, r0
 8001b90:	0018      	movs	r0, r3
 8001b92:	f001 fc74 	bl	800347e <prvTraceGetTaskNumberHigh16>
 8001b96:	0003      	movs	r3, r0
 8001b98:	001a      	movs	r2, r3
 8001b9a:	4b30      	ldr	r3, [pc, #192]	; (8001c5c <prvAddNewTaskToReadyList+0x18c>)
 8001b9c:	881b      	ldrh	r3, [r3, #0]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d016      	beq.n	8001bd4 <prvAddNewTaskToReadyList+0x104>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	0018      	movs	r0, r3
 8001baa:	f001 fc68 	bl	800347e <prvTraceGetTaskNumberHigh16>
 8001bae:	0003      	movs	r3, r0
 8001bb0:	001a      	movs	r2, r3
 8001bb2:	4b2a      	ldr	r3, [pc, #168]	; (8001c5c <prvAddNewTaskToReadyList+0x18c>)
 8001bb4:	881b      	ldrh	r3, [r3, #0]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d00a      	beq.n	8001bd4 <prvAddNewTaskToReadyList+0x104>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	f001 fc4e 	bl	8003462 <prvTraceGetTaskNumberLow16>
 8001bc6:	0003      	movs	r3, r0
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	001a      	movs	r2, r3
 8001bcc:	2103      	movs	r1, #3
 8001bce:	201b      	movs	r0, #27
 8001bd0:	f002 f9b0 	bl	8003f34 <prvTraceStoreKernelCall>

        prvAddTaskToReadyList( pxNewTCB );
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	f001 fc51 	bl	800347e <prvTraceGetTaskNumberHigh16>
 8001bdc:	0003      	movs	r3, r0
 8001bde:	001a      	movs	r2, r3
 8001be0:	4b1e      	ldr	r3, [pc, #120]	; (8001c5c <prvAddNewTaskToReadyList+0x18c>)
 8001be2:	881b      	ldrh	r3, [r3, #0]
 8001be4:	4013      	ands	r3, r2
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d008      	beq.n	8001bfe <prvAddNewTaskToReadyList+0x12e>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	0018      	movs	r0, r3
 8001bf0:	f001 fc37 	bl	8003462 <prvTraceGetTaskNumberLow16>
 8001bf4:	0003      	movs	r3, r0
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	f002 f881 	bl	8003d00 <prvTraceStoreTaskReady>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c02:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <prvAddNewTaskToReadyList+0x190>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d903      	bls.n	8001c12 <prvAddNewTaskToReadyList+0x142>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c0e:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <prvAddNewTaskToReadyList+0x190>)
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c16:	0013      	movs	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	189b      	adds	r3, r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	4a11      	ldr	r2, [pc, #68]	; (8001c64 <prvAddNewTaskToReadyList+0x194>)
 8001c20:	189a      	adds	r2, r3, r2
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	3304      	adds	r3, #4
 8001c26:	0019      	movs	r1, r3
 8001c28:	0010      	movs	r0, r2
 8001c2a:	f7fe fb22 	bl	8000272 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001c2e:	f001 fb11 	bl	8003254 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001c32:	4b07      	ldr	r3, [pc, #28]	; (8001c50 <prvAddNewTaskToReadyList+0x180>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <prvAddNewTaskToReadyList+0x16e>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001c3a:	4b04      	ldr	r3, [pc, #16]	; (8001c4c <prvAddNewTaskToReadyList+0x17c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001c3e:	46c0      	nop			; (mov r8, r8)
 8001c40:	46bd      	mov	sp, r7
 8001c42:	b002      	add	sp, #8
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	46c0      	nop			; (mov r8, r8)
 8001c48:	2000010c 	.word	0x2000010c
 8001c4c:	20000034 	.word	0x20000034
 8001c50:	20000118 	.word	0x20000118
 8001c54:	20000128 	.word	0x20000128
 8001c58:	20001da6 	.word	0x20001da6
 8001c5c:	20001da4 	.word	0x20001da4
 8001c60:	20000114 	.word	0x20000114
 8001c64:	20000038 	.word	0x20000038

08001c68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d045      	beq.n	8001d06 <vTaskDelay+0x9e>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8001c7a:	4b27      	ldr	r3, [pc, #156]	; (8001d18 <vTaskDelay+0xb0>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <vTaskDelay+0x1e>
 8001c82:	b672      	cpsid	i
 8001c84:	e7fe      	b.n	8001c84 <vTaskDelay+0x1c>
            vTaskSuspendAll();
 8001c86:	f000 f8b1 	bl	8001dec <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8001c8a:	4b24      	ldr	r3, [pc, #144]	; (8001d1c <vTaskDelay+0xb4>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	0018      	movs	r0, r3
 8001c90:	f001 fbf5 	bl	800347e <prvTraceGetTaskNumberHigh16>
 8001c94:	0003      	movs	r3, r0
 8001c96:	001a      	movs	r2, r3
 8001c98:	4b21      	ldr	r3, [pc, #132]	; (8001d20 <vTaskDelay+0xb8>)
 8001c9a:	881b      	ldrh	r3, [r3, #0]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d00e      	beq.n	8001cc2 <vTaskDelay+0x5a>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	0019      	movs	r1, r3
 8001ca8:	2089      	movs	r0, #137	; 0x89
 8001caa:	f002 faad 	bl	8004208 <prvTraceStoreKernelCallWithNumericParamOnly>
 8001cae:	4b1b      	ldr	r3, [pc, #108]	; (8001d1c <vTaskDelay+0xb4>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	f001 fbd5 	bl	8003462 <prvTraceGetTaskNumberLow16>
 8001cb8:	0003      	movs	r3, r0
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	f002 fcc7 	bl	8004650 <prvTraceSetTaskInstanceFinished>
 8001cc2:	f001 fc86 	bl	80035d2 <prvTraceGetCurrentTaskHandle>
 8001cc6:	0003      	movs	r3, r0
 8001cc8:	0018      	movs	r0, r3
 8001cca:	f001 fbd8 	bl	800347e <prvTraceGetTaskNumberHigh16>
 8001cce:	0003      	movs	r3, r0
 8001cd0:	001a      	movs	r2, r3
 8001cd2:	4b13      	ldr	r3, [pc, #76]	; (8001d20 <vTaskDelay+0xb8>)
 8001cd4:	881b      	ldrh	r3, [r3, #0]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d00a      	beq.n	8001cf4 <vTaskDelay+0x8c>
 8001cde:	f001 fc78 	bl	80035d2 <prvTraceGetCurrentTaskHandle>
 8001ce2:	0003      	movs	r3, r0
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	f001 fbbc 	bl	8003462 <prvTraceGetTaskNumberLow16>
 8001cea:	0003      	movs	r3, r0
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	0018      	movs	r0, r3
 8001cf0:	f002 fcae 	bl	8004650 <prvTraceSetTaskInstanceFinished>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	0018      	movs	r0, r3
 8001cfa:	f000 fed7 	bl	8002aac <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8001cfe:	f000 f881 	bl	8001e04 <xTaskResumeAll>
 8001d02:	0003      	movs	r3, r0
 8001d04:	60fb      	str	r3, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d101      	bne.n	8001d10 <vTaskDelay+0xa8>
        {
            portYIELD_WITHIN_API();
 8001d0c:	f001 fa80 	bl	8003210 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001d10:	46c0      	nop			; (mov r8, r8)
 8001d12:	46bd      	mov	sp, r7
 8001d14:	b004      	add	sp, #16
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20000134 	.word	0x20000134
 8001d1c:	20000034 	.word	0x20000034
 8001d20:	20001da4 	.word	0x20001da4

08001d24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8001d2a:	4927      	ldr	r1, [pc, #156]	; (8001dc8 <vTaskStartScheduler+0xa4>)
 8001d2c:	4827      	ldr	r0, [pc, #156]	; (8001dcc <vTaskStartScheduler+0xa8>)
 8001d2e:	4b28      	ldr	r3, [pc, #160]	; (8001dd0 <vTaskStartScheduler+0xac>)
 8001d30:	9301      	str	r3, [sp, #4]
 8001d32:	2300      	movs	r3, #0
 8001d34:	9300      	str	r3, [sp, #0]
 8001d36:	2300      	movs	r3, #0
 8001d38:	2246      	movs	r2, #70	; 0x46
 8001d3a:	f7ff fdf0 	bl	800191e <xTaskCreate>
 8001d3e:	0003      	movs	r3, r0
 8001d40:	607b      	str	r3, [r7, #4]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d103      	bne.n	8001d50 <vTaskStartScheduler+0x2c>
            {
                xReturn = xTimerCreateTimerTask();
 8001d48:	f000 ff04 	bl	8002b54 <xTimerCreateTimerTask>
 8001d4c:	0003      	movs	r3, r0
 8001d4e:	607b      	str	r3, [r7, #4]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d12c      	bne.n	8001db0 <vTaskStartScheduler+0x8c>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 8001d56:	b672      	cpsid	i
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8001d58:	4b1e      	ldr	r3, [pc, #120]	; (8001dd4 <vTaskStartScheduler+0xb0>)
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	4252      	negs	r2, r2
 8001d5e:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001d60:	4b1d      	ldr	r3, [pc, #116]	; (8001dd8 <vTaskStartScheduler+0xb4>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001d66:	4b1d      	ldr	r3, [pc, #116]	; (8001ddc <vTaskStartScheduler+0xb8>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8001d6c:	4b1c      	ldr	r3, [pc, #112]	; (8001de0 <vTaskStartScheduler+0xbc>)
 8001d6e:	2201      	movs	r2, #1
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	f001 fc2e 	bl	80035d2 <prvTraceGetCurrentTaskHandle>
 8001d76:	0003      	movs	r3, r0
 8001d78:	0018      	movs	r0, r3
 8001d7a:	f001 fb80 	bl	800347e <prvTraceGetTaskNumberHigh16>
 8001d7e:	0003      	movs	r3, r0
 8001d80:	001a      	movs	r2, r3
 8001d82:	4b18      	ldr	r3, [pc, #96]	; (8001de4 <vTaskStartScheduler+0xc0>)
 8001d84:	881b      	ldrh	r3, [r3, #0]
 8001d86:	4013      	ands	r3, r2
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00a      	beq.n	8001da4 <vTaskStartScheduler+0x80>
 8001d8e:	f001 fc20 	bl	80035d2 <prvTraceGetCurrentTaskHandle>
 8001d92:	0003      	movs	r3, r0
 8001d94:	0018      	movs	r0, r3
 8001d96:	f001 fb64 	bl	8003462 <prvTraceGetTaskNumberLow16>
 8001d9a:	0003      	movs	r3, r0
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	0018      	movs	r0, r3
 8001da0:	f002 faa6 	bl	80042f0 <prvTraceStoreTaskswitch>
 8001da4:	4b0e      	ldr	r3, [pc, #56]	; (8001de0 <vTaskStartScheduler+0xbc>)
 8001da6:	2202      	movs	r2, #2
 8001da8:	601a      	str	r2, [r3, #0]

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8001daa:	f001 fa0d 	bl	80031c8 <xPortStartScheduler>
 8001dae:	e004      	b.n	8001dba <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3301      	adds	r3, #1
 8001db4:	d101      	bne.n	8001dba <vTaskStartScheduler+0x96>
 8001db6:	b672      	cpsid	i
 8001db8:	e7fe      	b.n	8001db8 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001dba:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <vTaskStartScheduler+0xc4>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
}
 8001dbe:	46c0      	nop			; (mov r8, r8)
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	b002      	add	sp, #8
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	46c0      	nop			; (mov r8, r8)
 8001dc8:	08005c44 	.word	0x08005c44
 8001dcc:	080024cb 	.word	0x080024cb
 8001dd0:	20000130 	.word	0x20000130
 8001dd4:	2000012c 	.word	0x2000012c
 8001dd8:	20000118 	.word	0x20000118
 8001ddc:	20000110 	.word	0x20000110
 8001de0:	20001d8c 	.word	0x20001d8c
 8001de4:	20001da4 	.word	0x20001da4
 8001de8:	20000000 	.word	0x20000000

08001dec <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001df0:	4b03      	ldr	r3, [pc, #12]	; (8001e00 <vTaskSuspendAll+0x14>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	1c5a      	adds	r2, r3, #1
 8001df6:	4b02      	ldr	r3, [pc, #8]	; (8001e00 <vTaskSuspendAll+0x14>)
 8001df8:	601a      	str	r2, [r3, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001dfa:	46c0      	nop			; (mov r8, r8)
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	20000134 	.word	0x20000134

08001e04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001e12:	4b41      	ldr	r3, [pc, #260]	; (8001f18 <xTaskResumeAll+0x114>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <xTaskResumeAll+0x1a>
 8001e1a:	b672      	cpsid	i
 8001e1c:	e7fe      	b.n	8001e1c <xTaskResumeAll+0x18>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001e1e:	f001 fa07 	bl	8003230 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001e22:	4b3d      	ldr	r3, [pc, #244]	; (8001f18 <xTaskResumeAll+0x114>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	1e5a      	subs	r2, r3, #1
 8001e28:	4b3b      	ldr	r3, [pc, #236]	; (8001f18 <xTaskResumeAll+0x114>)
 8001e2a:	601a      	str	r2, [r3, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e2c:	4b3a      	ldr	r3, [pc, #232]	; (8001f18 <xTaskResumeAll+0x114>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d16a      	bne.n	8001f0a <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001e34:	4b39      	ldr	r3, [pc, #228]	; (8001f1c <xTaskResumeAll+0x118>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d066      	beq.n	8001f0a <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001e3c:	e044      	b.n	8001ec8 <xTaskResumeAll+0xc4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e3e:	4b38      	ldr	r3, [pc, #224]	; (8001f20 <xTaskResumeAll+0x11c>)
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	3318      	adds	r3, #24
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	f7fe fa69 	bl	8000322 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	3304      	adds	r3, #4
 8001e54:	0018      	movs	r0, r3
 8001e56:	f7fe fa64 	bl	8000322 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	f001 fb0e 	bl	800347e <prvTraceGetTaskNumberHigh16>
 8001e62:	0003      	movs	r3, r0
 8001e64:	001a      	movs	r2, r3
 8001e66:	4b2f      	ldr	r3, [pc, #188]	; (8001f24 <xTaskResumeAll+0x120>)
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d008      	beq.n	8001e84 <xTaskResumeAll+0x80>
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	0018      	movs	r0, r3
 8001e76:	f001 faf4 	bl	8003462 <prvTraceGetTaskNumberLow16>
 8001e7a:	0003      	movs	r3, r0
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	0018      	movs	r0, r3
 8001e80:	f001 ff3e 	bl	8003d00 <prvTraceStoreTaskReady>
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e88:	4b27      	ldr	r3, [pc, #156]	; (8001f28 <xTaskResumeAll+0x124>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d903      	bls.n	8001e98 <xTaskResumeAll+0x94>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e94:	4b24      	ldr	r3, [pc, #144]	; (8001f28 <xTaskResumeAll+0x124>)
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e9c:	0013      	movs	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	189b      	adds	r3, r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4a21      	ldr	r2, [pc, #132]	; (8001f2c <xTaskResumeAll+0x128>)
 8001ea6:	189a      	adds	r2, r3, r2
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	3304      	adds	r3, #4
 8001eac:	0019      	movs	r1, r3
 8001eae:	0010      	movs	r0, r2
 8001eb0:	f7fe f9df 	bl	8000272 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eb8:	4b1d      	ldr	r3, [pc, #116]	; (8001f30 <xTaskResumeAll+0x12c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d302      	bcc.n	8001ec8 <xTaskResumeAll+0xc4>
                    {
                        xYieldPending = pdTRUE;
 8001ec2:	4b1c      	ldr	r3, [pc, #112]	; (8001f34 <xTaskResumeAll+0x130>)
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001ec8:	4b15      	ldr	r3, [pc, #84]	; (8001f20 <xTaskResumeAll+0x11c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1b6      	bne.n	8001e3e <xTaskResumeAll+0x3a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <xTaskResumeAll+0xd6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001ed6:	f000 fb85 	bl	80025e4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001eda:	4b17      	ldr	r3, [pc, #92]	; (8001f38 <xTaskResumeAll+0x134>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00f      	beq.n	8001f06 <xTaskResumeAll+0x102>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001ee6:	f000 f837 	bl	8001f58 <xTaskIncrementTick>
 8001eea:	1e03      	subs	r3, r0, #0
 8001eec:	d002      	beq.n	8001ef4 <xTaskResumeAll+0xf0>
                            {
                                xYieldPending = pdTRUE;
 8001eee:	4b11      	ldr	r3, [pc, #68]	; (8001f34 <xTaskResumeAll+0x130>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1f2      	bne.n	8001ee6 <xTaskResumeAll+0xe2>

                        xPendedTicks = 0;
 8001f00:	4b0d      	ldr	r3, [pc, #52]	; (8001f38 <xTaskResumeAll+0x134>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001f06:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <xTaskResumeAll+0x130>)
 8001f08:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001f0a:	f001 f9a3 	bl	8003254 <vPortExitCritical>

    return xAlreadyYielded;
 8001f0e:	687b      	ldr	r3, [r7, #4]
}
 8001f10:	0018      	movs	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	b004      	add	sp, #16
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	20000134 	.word	0x20000134
 8001f1c:	2000010c 	.word	0x2000010c
 8001f20:	200000cc 	.word	0x200000cc
 8001f24:	20001da4 	.word	0x20001da4
 8001f28:	20000114 	.word	0x20000114
 8001f2c:	20000038 	.word	0x20000038
 8001f30:	20000034 	.word	0x20000034
 8001f34:	20000120 	.word	0x20000120
 8001f38:	2000011c 	.word	0x2000011c

08001f3c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8001f42:	4b04      	ldr	r3, [pc, #16]	; (8001f54 <xTaskGetTickCount+0x18>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001f48:	687b      	ldr	r3, [r7, #4]
}
 8001f4a:	0018      	movs	r0, r3
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	b002      	add	sp, #8
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	46c0      	nop			; (mov r8, r8)
 8001f54:	20000110 	.word	0x20000110

08001f58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	617b      	str	r3, [r7, #20]

    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );
 8001f62:	4b4f      	ldr	r3, [pc, #316]	; (80020a0 <xTaskIncrementTick+0x148>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d003      	beq.n	8001f72 <xTaskIncrementTick+0x1a>
 8001f6a:	4b4e      	ldr	r3, [pc, #312]	; (80020a4 <xTaskIncrementTick+0x14c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d107      	bne.n	8001f82 <xTaskIncrementTick+0x2a>
 8001f72:	4b4d      	ldr	r3, [pc, #308]	; (80020a8 <xTaskIncrementTick+0x150>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	1c5a      	adds	r2, r3, #1
 8001f78:	4b4b      	ldr	r3, [pc, #300]	; (80020a8 <xTaskIncrementTick+0x150>)
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	2000      	movs	r0, #0
 8001f7e:	f002 fed9 	bl	8004d34 <prvTracePortGetTimeStamp>
 8001f82:	4b47      	ldr	r3, [pc, #284]	; (80020a0 <xTaskIncrementTick+0x148>)
 8001f84:	681b      	ldr	r3, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f86:	4b46      	ldr	r3, [pc, #280]	; (80020a0 <xTaskIncrementTick+0x148>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d000      	beq.n	8001f90 <xTaskIncrementTick+0x38>
 8001f8e:	e07c      	b.n	800208a <xTaskIncrementTick+0x132>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001f90:	4b46      	ldr	r3, [pc, #280]	; (80020ac <xTaskIncrementTick+0x154>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	3301      	adds	r3, #1
 8001f96:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001f98:	4b44      	ldr	r3, [pc, #272]	; (80020ac <xTaskIncrementTick+0x154>)
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	601a      	str	r2, [r3, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d117      	bne.n	8001fd4 <xTaskIncrementTick+0x7c>
        {
            taskSWITCH_DELAYED_LISTS();
 8001fa4:	4b42      	ldr	r3, [pc, #264]	; (80020b0 <xTaskIncrementTick+0x158>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <xTaskIncrementTick+0x5a>
 8001fae:	b672      	cpsid	i
 8001fb0:	e7fe      	b.n	8001fb0 <xTaskIncrementTick+0x58>
 8001fb2:	4b3f      	ldr	r3, [pc, #252]	; (80020b0 <xTaskIncrementTick+0x158>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	4b3e      	ldr	r3, [pc, #248]	; (80020b4 <xTaskIncrementTick+0x15c>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	4b3c      	ldr	r3, [pc, #240]	; (80020b0 <xTaskIncrementTick+0x158>)
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	4b3c      	ldr	r3, [pc, #240]	; (80020b4 <xTaskIncrementTick+0x15c>)
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	4b3c      	ldr	r3, [pc, #240]	; (80020b8 <xTaskIncrementTick+0x160>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	1c5a      	adds	r2, r3, #1
 8001fcc:	4b3a      	ldr	r3, [pc, #232]	; (80020b8 <xTaskIncrementTick+0x160>)
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	f000 fb08 	bl	80025e4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001fd4:	4b39      	ldr	r3, [pc, #228]	; (80020bc <xTaskIncrementTick+0x164>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d35a      	bcc.n	8002094 <xTaskIncrementTick+0x13c>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001fde:	4b34      	ldr	r3, [pc, #208]	; (80020b0 <xTaskIncrementTick+0x158>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d104      	bne.n	8001ff2 <xTaskIncrementTick+0x9a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001fe8:	4b34      	ldr	r3, [pc, #208]	; (80020bc <xTaskIncrementTick+0x164>)
 8001fea:	2201      	movs	r2, #1
 8001fec:	4252      	negs	r2, r2
 8001fee:	601a      	str	r2, [r3, #0]
                    break;
 8001ff0:	e050      	b.n	8002094 <xTaskIncrementTick+0x13c>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001ff2:	4b2f      	ldr	r3, [pc, #188]	; (80020b0 <xTaskIncrementTick+0x158>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	429a      	cmp	r2, r3
 8002008:	d203      	bcs.n	8002012 <xTaskIncrementTick+0xba>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800200a:	4b2c      	ldr	r3, [pc, #176]	; (80020bc <xTaskIncrementTick+0x164>)
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	601a      	str	r2, [r3, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002010:	e040      	b.n	8002094 <xTaskIncrementTick+0x13c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	3304      	adds	r3, #4
 8002016:	0018      	movs	r0, r3
 8002018:	f7fe f983 	bl	8000322 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002020:	2b00      	cmp	r3, #0
 8002022:	d004      	beq.n	800202e <xTaskIncrementTick+0xd6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	3318      	adds	r3, #24
 8002028:	0018      	movs	r0, r3
 800202a:	f7fe f97a 	bl	8000322 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	0018      	movs	r0, r3
 8002032:	f001 fa24 	bl	800347e <prvTraceGetTaskNumberHigh16>
 8002036:	0003      	movs	r3, r0
 8002038:	001a      	movs	r2, r3
 800203a:	4b21      	ldr	r3, [pc, #132]	; (80020c0 <xTaskIncrementTick+0x168>)
 800203c:	881b      	ldrh	r3, [r3, #0]
 800203e:	4013      	ands	r3, r2
 8002040:	b29b      	uxth	r3, r3
 8002042:	2b00      	cmp	r3, #0
 8002044:	d008      	beq.n	8002058 <xTaskIncrementTick+0x100>
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	0018      	movs	r0, r3
 800204a:	f001 fa0a 	bl	8003462 <prvTraceGetTaskNumberLow16>
 800204e:	0003      	movs	r3, r0
 8002050:	b2db      	uxtb	r3, r3
 8002052:	0018      	movs	r0, r3
 8002054:	f001 fe54 	bl	8003d00 <prvTraceStoreTaskReady>
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800205c:	4b19      	ldr	r3, [pc, #100]	; (80020c4 <xTaskIncrementTick+0x16c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	429a      	cmp	r2, r3
 8002062:	d903      	bls.n	800206c <xTaskIncrementTick+0x114>
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002068:	4b16      	ldr	r3, [pc, #88]	; (80020c4 <xTaskIncrementTick+0x16c>)
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002070:	0013      	movs	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	189b      	adds	r3, r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	4a13      	ldr	r2, [pc, #76]	; (80020c8 <xTaskIncrementTick+0x170>)
 800207a:	189a      	adds	r2, r3, r2
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	3304      	adds	r3, #4
 8002080:	0019      	movs	r1, r3
 8002082:	0010      	movs	r0, r2
 8002084:	f7fe f8f5 	bl	8000272 <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002088:	e7a9      	b.n	8001fde <xTaskIncrementTick+0x86>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800208a:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <xTaskIncrementTick+0x14c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	1c5a      	adds	r2, r3, #1
 8002090:	4b04      	ldr	r3, [pc, #16]	; (80020a4 <xTaskIncrementTick+0x14c>)
 8002092:	601a      	str	r2, [r3, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002094:	697b      	ldr	r3, [r7, #20]
}
 8002096:	0018      	movs	r0, r3
 8002098:	46bd      	mov	sp, r7
 800209a:	b006      	add	sp, #24
 800209c:	bd80      	pop	{r7, pc}
 800209e:	46c0      	nop			; (mov r8, r8)
 80020a0:	20000134 	.word	0x20000134
 80020a4:	2000011c 	.word	0x2000011c
 80020a8:	20001d80 	.word	0x20001d80
 80020ac:	20000110 	.word	0x20000110
 80020b0:	200000c4 	.word	0x200000c4
 80020b4:	200000c8 	.word	0x200000c8
 80020b8:	20000124 	.word	0x20000124
 80020bc:	2000012c 	.word	0x2000012c
 80020c0:	20001da4 	.word	0x20001da4
 80020c4:	20000114 	.word	0x20000114
 80020c8:	20000038 	.word	0x20000038

080020cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80020d2:	4b31      	ldr	r3, [pc, #196]	; (8002198 <vTaskSwitchContext+0xcc>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80020da:	4b30      	ldr	r3, [pc, #192]	; (800219c <vTaskSwitchContext+0xd0>)
 80020dc:	2201      	movs	r2, #1
 80020de:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80020e0:	e056      	b.n	8002190 <vTaskSwitchContext+0xc4>
        xYieldPending = pdFALSE;
 80020e2:	4b2e      	ldr	r3, [pc, #184]	; (800219c <vTaskSwitchContext+0xd0>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80020e8:	4b2d      	ldr	r3, [pc, #180]	; (80021a0 <vTaskSwitchContext+0xd4>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	607b      	str	r3, [r7, #4]
 80020ee:	e007      	b.n	8002100 <vTaskSwitchContext+0x34>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <vTaskSwitchContext+0x2e>
 80020f6:	b672      	cpsid	i
 80020f8:	e7fe      	b.n	80020f8 <vTaskSwitchContext+0x2c>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3b01      	subs	r3, #1
 80020fe:	607b      	str	r3, [r7, #4]
 8002100:	4928      	ldr	r1, [pc, #160]	; (80021a4 <vTaskSwitchContext+0xd8>)
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	0013      	movs	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	189b      	adds	r3, r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	585b      	ldr	r3, [r3, r1]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d0ee      	beq.n	80020f0 <vTaskSwitchContext+0x24>
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	0013      	movs	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	189b      	adds	r3, r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4a21      	ldr	r2, [pc, #132]	; (80021a4 <vTaskSwitchContext+0xd8>)
 800211e:	189b      	adds	r3, r3, r2
 8002120:	603b      	str	r3, [r7, #0]
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	605a      	str	r2, [r3, #4]
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	3308      	adds	r3, #8
 8002134:	429a      	cmp	r2, r3
 8002136:	d104      	bne.n	8002142 <vTaskSwitchContext+0x76>
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	68da      	ldr	r2, [r3, #12]
 8002148:	4b17      	ldr	r3, [pc, #92]	; (80021a8 <vTaskSwitchContext+0xdc>)
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	4b14      	ldr	r3, [pc, #80]	; (80021a0 <vTaskSwitchContext+0xd4>)
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	601a      	str	r2, [r3, #0]
        traceTASK_SWITCHED_IN();
 8002152:	4b16      	ldr	r3, [pc, #88]	; (80021ac <vTaskSwitchContext+0xe0>)
 8002154:	2201      	movs	r2, #1
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	f001 fa3b 	bl	80035d2 <prvTraceGetCurrentTaskHandle>
 800215c:	0003      	movs	r3, r0
 800215e:	0018      	movs	r0, r3
 8002160:	f001 f98d 	bl	800347e <prvTraceGetTaskNumberHigh16>
 8002164:	0003      	movs	r3, r0
 8002166:	001a      	movs	r2, r3
 8002168:	4b11      	ldr	r3, [pc, #68]	; (80021b0 <vTaskSwitchContext+0xe4>)
 800216a:	881b      	ldrh	r3, [r3, #0]
 800216c:	4013      	ands	r3, r2
 800216e:	b29b      	uxth	r3, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00a      	beq.n	800218a <vTaskSwitchContext+0xbe>
 8002174:	f001 fa2d 	bl	80035d2 <prvTraceGetCurrentTaskHandle>
 8002178:	0003      	movs	r3, r0
 800217a:	0018      	movs	r0, r3
 800217c:	f001 f971 	bl	8003462 <prvTraceGetTaskNumberLow16>
 8002180:	0003      	movs	r3, r0
 8002182:	b2db      	uxtb	r3, r3
 8002184:	0018      	movs	r0, r3
 8002186:	f002 f8b3 	bl	80042f0 <prvTraceStoreTaskswitch>
 800218a:	4b08      	ldr	r3, [pc, #32]	; (80021ac <vTaskSwitchContext+0xe0>)
 800218c:	2202      	movs	r2, #2
 800218e:	601a      	str	r2, [r3, #0]
}
 8002190:	46c0      	nop			; (mov r8, r8)
 8002192:	46bd      	mov	sp, r7
 8002194:	b002      	add	sp, #8
 8002196:	bd80      	pop	{r7, pc}
 8002198:	20000134 	.word	0x20000134
 800219c:	20000120 	.word	0x20000120
 80021a0:	20000114 	.word	0x20000114
 80021a4:	20000038 	.word	0x20000038
 80021a8:	20000034 	.word	0x20000034
 80021ac:	20001d8c 	.word	0x20001d8c
 80021b0:	20001da4 	.word	0x20001da4

080021b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d101      	bne.n	80021c8 <vTaskPlaceOnEventList+0x14>
 80021c4:	b672      	cpsid	i
 80021c6:	e7fe      	b.n	80021c6 <vTaskPlaceOnEventList+0x12>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80021c8:	4b08      	ldr	r3, [pc, #32]	; (80021ec <vTaskPlaceOnEventList+0x38>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	3318      	adds	r3, #24
 80021ce:	001a      	movs	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	0011      	movs	r1, r2
 80021d4:	0018      	movs	r0, r3
 80021d6:	f7fe f86e 	bl	80002b6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	2101      	movs	r1, #1
 80021de:	0018      	movs	r0, r3
 80021e0:	f000 fc64 	bl	8002aac <prvAddCurrentTaskToDelayedList>
}
 80021e4:	46c0      	nop			; (mov r8, r8)
 80021e6:	46bd      	mov	sp, r7
 80021e8:	b002      	add	sp, #8
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	20000034 	.word	0x20000034

080021f0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <vTaskPlaceOnEventListRestricted+0x16>
 8002202:	b672      	cpsid	i
 8002204:	e7fe      	b.n	8002204 <vTaskPlaceOnEventListRestricted+0x14>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002206:	4b28      	ldr	r3, [pc, #160]	; (80022a8 <vTaskPlaceOnEventListRestricted+0xb8>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	3318      	adds	r3, #24
 800220c:	001a      	movs	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	0011      	movs	r1, r2
 8002212:	0018      	movs	r0, r3
 8002214:	f7fe f82d 	bl	8000272 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d002      	beq.n	8002224 <vTaskPlaceOnEventListRestricted+0x34>
        {
            xTicksToWait = portMAX_DELAY;
 800221e:	2301      	movs	r3, #1
 8002220:	425b      	negs	r3, r3
 8002222:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8002224:	4b20      	ldr	r3, [pc, #128]	; (80022a8 <vTaskPlaceOnEventListRestricted+0xb8>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	0018      	movs	r0, r3
 800222a:	f001 f928 	bl	800347e <prvTraceGetTaskNumberHigh16>
 800222e:	0003      	movs	r3, r0
 8002230:	001a      	movs	r2, r3
 8002232:	4b1e      	ldr	r3, [pc, #120]	; (80022ac <vTaskPlaceOnEventListRestricted+0xbc>)
 8002234:	881b      	ldrh	r3, [r3, #0]
 8002236:	4013      	ands	r3, r2
 8002238:	b29b      	uxth	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d011      	beq.n	8002262 <vTaskPlaceOnEventListRestricted+0x72>
 800223e:	4b1c      	ldr	r3, [pc, #112]	; (80022b0 <vTaskPlaceOnEventListRestricted+0xc0>)
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	18d3      	adds	r3, r2, r3
 8002246:	0019      	movs	r1, r3
 8002248:	2088      	movs	r0, #136	; 0x88
 800224a:	f001 ffdd 	bl	8004208 <prvTraceStoreKernelCallWithNumericParamOnly>
 800224e:	4b16      	ldr	r3, [pc, #88]	; (80022a8 <vTaskPlaceOnEventListRestricted+0xb8>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	0018      	movs	r0, r3
 8002254:	f001 f905 	bl	8003462 <prvTraceGetTaskNumberLow16>
 8002258:	0003      	movs	r3, r0
 800225a:	b2db      	uxtb	r3, r3
 800225c:	0018      	movs	r0, r3
 800225e:	f002 f9f7 	bl	8004650 <prvTraceSetTaskInstanceFinished>
 8002262:	f001 f9b6 	bl	80035d2 <prvTraceGetCurrentTaskHandle>
 8002266:	0003      	movs	r3, r0
 8002268:	0018      	movs	r0, r3
 800226a:	f001 f908 	bl	800347e <prvTraceGetTaskNumberHigh16>
 800226e:	0003      	movs	r3, r0
 8002270:	001a      	movs	r2, r3
 8002272:	4b0e      	ldr	r3, [pc, #56]	; (80022ac <vTaskPlaceOnEventListRestricted+0xbc>)
 8002274:	881b      	ldrh	r3, [r3, #0]
 8002276:	4013      	ands	r3, r2
 8002278:	b29b      	uxth	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00a      	beq.n	8002294 <vTaskPlaceOnEventListRestricted+0xa4>
 800227e:	f001 f9a8 	bl	80035d2 <prvTraceGetCurrentTaskHandle>
 8002282:	0003      	movs	r3, r0
 8002284:	0018      	movs	r0, r3
 8002286:	f001 f8ec 	bl	8003462 <prvTraceGetTaskNumberLow16>
 800228a:	0003      	movs	r3, r0
 800228c:	b2db      	uxtb	r3, r3
 800228e:	0018      	movs	r0, r3
 8002290:	f002 f9de 	bl	8004650 <prvTraceSetTaskInstanceFinished>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	0011      	movs	r1, r2
 800229a:	0018      	movs	r0, r3
 800229c:	f000 fc06 	bl	8002aac <prvAddCurrentTaskToDelayedList>
    }
 80022a0:	46c0      	nop			; (mov r8, r8)
 80022a2:	46bd      	mov	sp, r7
 80022a4:	b004      	add	sp, #16
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	20000034 	.word	0x20000034
 80022ac:	20001da4 	.word	0x20001da4
 80022b0:	20000110 	.word	0x20000110

080022b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	60bb      	str	r3, [r7, #8]
    configASSERT( pxUnblockedTCB );
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <xTaskRemoveFromEventList+0x1a>
 80022ca:	b672      	cpsid	i
 80022cc:	e7fe      	b.n	80022cc <xTaskRemoveFromEventList+0x18>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	3318      	adds	r3, #24
 80022d2:	0018      	movs	r0, r3
 80022d4:	f7fe f825 	bl	8000322 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80022d8:	4b29      	ldr	r3, [pc, #164]	; (8002380 <xTaskRemoveFromEventList+0xcc>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d132      	bne.n	8002346 <xTaskRemoveFromEventList+0x92>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	3304      	adds	r3, #4
 80022e4:	0018      	movs	r0, r3
 80022e6:	f7fe f81c 	bl	8000322 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	0018      	movs	r0, r3
 80022ee:	f001 f8c6 	bl	800347e <prvTraceGetTaskNumberHigh16>
 80022f2:	0003      	movs	r3, r0
 80022f4:	001a      	movs	r2, r3
 80022f6:	4b23      	ldr	r3, [pc, #140]	; (8002384 <xTaskRemoveFromEventList+0xd0>)
 80022f8:	881b      	ldrh	r3, [r3, #0]
 80022fa:	4013      	ands	r3, r2
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d008      	beq.n	8002314 <xTaskRemoveFromEventList+0x60>
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	0018      	movs	r0, r3
 8002306:	f001 f8ac 	bl	8003462 <prvTraceGetTaskNumberLow16>
 800230a:	0003      	movs	r3, r0
 800230c:	b2db      	uxtb	r3, r3
 800230e:	0018      	movs	r0, r3
 8002310:	f001 fcf6 	bl	8003d00 <prvTraceStoreTaskReady>
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002318:	4b1b      	ldr	r3, [pc, #108]	; (8002388 <xTaskRemoveFromEventList+0xd4>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	429a      	cmp	r2, r3
 800231e:	d903      	bls.n	8002328 <xTaskRemoveFromEventList+0x74>
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002324:	4b18      	ldr	r3, [pc, #96]	; (8002388 <xTaskRemoveFromEventList+0xd4>)
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800232c:	0013      	movs	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	189b      	adds	r3, r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	4a15      	ldr	r2, [pc, #84]	; (800238c <xTaskRemoveFromEventList+0xd8>)
 8002336:	189a      	adds	r2, r3, r2
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	3304      	adds	r3, #4
 800233c:	0019      	movs	r1, r3
 800233e:	0010      	movs	r0, r2
 8002340:	f7fd ff97 	bl	8000272 <vListInsertEnd>
 8002344:	e007      	b.n	8002356 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	3318      	adds	r3, #24
 800234a:	001a      	movs	r2, r3
 800234c:	4b10      	ldr	r3, [pc, #64]	; (8002390 <xTaskRemoveFromEventList+0xdc>)
 800234e:	0011      	movs	r1, r2
 8002350:	0018      	movs	r0, r3
 8002352:	f7fd ff8e 	bl	8000272 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800235a:	4b0e      	ldr	r3, [pc, #56]	; (8002394 <xTaskRemoveFromEventList+0xe0>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002360:	429a      	cmp	r2, r3
 8002362:	d905      	bls.n	8002370 <xTaskRemoveFromEventList+0xbc>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002364:	2301      	movs	r3, #1
 8002366:	60fb      	str	r3, [r7, #12]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002368:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <xTaskRemoveFromEventList+0xe4>)
 800236a:	2201      	movs	r2, #1
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	e001      	b.n	8002374 <xTaskRemoveFromEventList+0xc0>
    }
    else
    {
        xReturn = pdFALSE;
 8002370:	2300      	movs	r3, #0
 8002372:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 8002374:	68fb      	ldr	r3, [r7, #12]
}
 8002376:	0018      	movs	r0, r3
 8002378:	46bd      	mov	sp, r7
 800237a:	b004      	add	sp, #16
 800237c:	bd80      	pop	{r7, pc}
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	20000134 	.word	0x20000134
 8002384:	20001da4 	.word	0x20001da4
 8002388:	20000114 	.word	0x20000114
 800238c:	20000038 	.word	0x20000038
 8002390:	200000cc 	.word	0x200000cc
 8002394:	20000034 	.word	0x20000034
 8002398:	20000120 	.word	0x20000120

0800239c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80023a4:	4b05      	ldr	r3, [pc, #20]	; (80023bc <vTaskInternalSetTimeOutState+0x20>)
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80023ac:	4b04      	ldr	r3, [pc, #16]	; (80023c0 <vTaskInternalSetTimeOutState+0x24>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	605a      	str	r2, [r3, #4]
}
 80023b4:	46c0      	nop			; (mov r8, r8)
 80023b6:	46bd      	mov	sp, r7
 80023b8:	b002      	add	sp, #8
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	20000124 	.word	0x20000124
 80023c0:	20000110 	.word	0x20000110

080023c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <xTaskCheckForTimeOut+0x14>
 80023d4:	b672      	cpsid	i
 80023d6:	e7fe      	b.n	80023d6 <xTaskCheckForTimeOut+0x12>
    configASSERT( pxTicksToWait );
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <xTaskCheckForTimeOut+0x1e>
 80023de:	b672      	cpsid	i
 80023e0:	e7fe      	b.n	80023e0 <xTaskCheckForTimeOut+0x1c>

    taskENTER_CRITICAL();
 80023e2:	f000 ff25 	bl	8003230 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80023e6:	4b1f      	ldr	r3, [pc, #124]	; (8002464 <xTaskCheckForTimeOut+0xa0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	3301      	adds	r3, #1
 80023fc:	d102      	bne.n	8002404 <xTaskCheckForTimeOut+0x40>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80023fe:	2300      	movs	r3, #0
 8002400:	617b      	str	r3, [r7, #20]
 8002402:	e027      	b.n	8002454 <xTaskCheckForTimeOut+0x90>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	4b17      	ldr	r3, [pc, #92]	; (8002468 <xTaskCheckForTimeOut+0xa4>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	429a      	cmp	r2, r3
 800240e:	d00a      	beq.n	8002426 <xTaskCheckForTimeOut+0x62>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	429a      	cmp	r2, r3
 8002418:	d305      	bcc.n	8002426 <xTaskCheckForTimeOut+0x62>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800241a:	2301      	movs	r3, #1
 800241c:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	e016      	b.n	8002454 <xTaskCheckForTimeOut+0x90>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	429a      	cmp	r2, r3
 800242e:	d20c      	bcs.n	800244a <xTaskCheckForTimeOut+0x86>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	1ad2      	subs	r2, r2, r3
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	0018      	movs	r0, r3
 8002440:	f7ff ffac 	bl	800239c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]
 8002448:	e004      	b.n	8002454 <xTaskCheckForTimeOut+0x90>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002450:	2301      	movs	r3, #1
 8002452:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8002454:	f000 fefe 	bl	8003254 <vPortExitCritical>

    return xReturn;
 8002458:	697b      	ldr	r3, [r7, #20]
}
 800245a:	0018      	movs	r0, r3
 800245c:	46bd      	mov	sp, r7
 800245e:	b006      	add	sp, #24
 8002460:	bd80      	pop	{r7, pc}
 8002462:	46c0      	nop			; (mov r8, r8)
 8002464:	20000110 	.word	0x20000110
 8002468:	20000124 	.word	0x20000124

0800246c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002470:	4b02      	ldr	r3, [pc, #8]	; (800247c <vTaskMissedYield+0x10>)
 8002472:	2201      	movs	r2, #1
 8002474:	601a      	str	r2, [r3, #0]
}
 8002476:	46c0      	nop			; (mov r8, r8)
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	20000120 	.word	0x20000120

08002480 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

    UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
    {
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
        UBaseType_t uxReturn;
        TCB_t const * pxTCB;

        if( xTask != NULL )
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d005      	beq.n	800249a <uxTaskGetTaskNumber+0x1a>
        {
            pxTCB = xTask;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	60bb      	str	r3, [r7, #8]
            uxReturn = pxTCB->uxTaskNumber;
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	e001      	b.n	800249e <uxTaskGetTaskNumber+0x1e>
        }
        else
        {
            uxReturn = 0U;
 800249a:	2300      	movs	r3, #0
 800249c:	60fb      	str	r3, [r7, #12]
        }

        return uxReturn;
 800249e:	68fb      	ldr	r3, [r7, #12]
    }
 80024a0:	0018      	movs	r0, r3
 80024a2:	46bd      	mov	sp, r7
 80024a4:	b004      	add	sp, #16
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <vTaskSetTaskNumber>:

#if ( configUSE_TRACE_FACILITY == 1 )

    void vTaskSetTaskNumber( TaskHandle_t xTask,
                             const UBaseType_t uxHandle )
    {
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;

        if( xTask != NULL )
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d004      	beq.n	80024c2 <vTaskSetTaskNumber+0x1a>
        {
            pxTCB = xTask;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	60fb      	str	r3, [r7, #12]
            pxTCB->uxTaskNumber = uxHandle;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	645a      	str	r2, [r3, #68]	; 0x44
        }
    }
 80024c2:	46c0      	nop			; (mov r8, r8)
 80024c4:	46bd      	mov	sp, r7
 80024c6:	b004      	add	sp, #16
 80024c8:	bd80      	pop	{r7, pc}

080024ca <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b082      	sub	sp, #8
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80024d2:	f000 f847 	bl	8002564 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 80024d6:	f000 fe9b 	bl	8003210 <vPortYield>
        prvCheckTasksWaitingTermination();
 80024da:	e7fa      	b.n	80024d2 <prvIdleTask+0x8>

080024dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80024e2:	2300      	movs	r3, #0
 80024e4:	607b      	str	r3, [r7, #4]
 80024e6:	e00c      	b.n	8002502 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	0013      	movs	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	189b      	adds	r3, r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4a14      	ldr	r2, [pc, #80]	; (8002544 <prvInitialiseTaskLists+0x68>)
 80024f4:	189b      	adds	r3, r3, r2
 80024f6:	0018      	movs	r0, r3
 80024f8:	f7fd fe92 	bl	8000220 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3301      	adds	r3, #1
 8002500:	607b      	str	r3, [r7, #4]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b04      	cmp	r3, #4
 8002506:	d9ef      	bls.n	80024e8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002508:	4b0f      	ldr	r3, [pc, #60]	; (8002548 <prvInitialiseTaskLists+0x6c>)
 800250a:	0018      	movs	r0, r3
 800250c:	f7fd fe88 	bl	8000220 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002510:	4b0e      	ldr	r3, [pc, #56]	; (800254c <prvInitialiseTaskLists+0x70>)
 8002512:	0018      	movs	r0, r3
 8002514:	f7fd fe84 	bl	8000220 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002518:	4b0d      	ldr	r3, [pc, #52]	; (8002550 <prvInitialiseTaskLists+0x74>)
 800251a:	0018      	movs	r0, r3
 800251c:	f7fd fe80 	bl	8000220 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002520:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <prvInitialiseTaskLists+0x78>)
 8002522:	0018      	movs	r0, r3
 8002524:	f7fd fe7c 	bl	8000220 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002528:	4b0b      	ldr	r3, [pc, #44]	; (8002558 <prvInitialiseTaskLists+0x7c>)
 800252a:	0018      	movs	r0, r3
 800252c:	f7fd fe78 	bl	8000220 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002530:	4b0a      	ldr	r3, [pc, #40]	; (800255c <prvInitialiseTaskLists+0x80>)
 8002532:	4a05      	ldr	r2, [pc, #20]	; (8002548 <prvInitialiseTaskLists+0x6c>)
 8002534:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002536:	4b0a      	ldr	r3, [pc, #40]	; (8002560 <prvInitialiseTaskLists+0x84>)
 8002538:	4a04      	ldr	r2, [pc, #16]	; (800254c <prvInitialiseTaskLists+0x70>)
 800253a:	601a      	str	r2, [r3, #0]
}
 800253c:	46c0      	nop			; (mov r8, r8)
 800253e:	46bd      	mov	sp, r7
 8002540:	b002      	add	sp, #8
 8002542:	bd80      	pop	{r7, pc}
 8002544:	20000038 	.word	0x20000038
 8002548:	2000009c 	.word	0x2000009c
 800254c:	200000b0 	.word	0x200000b0
 8002550:	200000cc 	.word	0x200000cc
 8002554:	200000e0 	.word	0x200000e0
 8002558:	200000f8 	.word	0x200000f8
 800255c:	200000c4 	.word	0x200000c4
 8002560:	200000c8 	.word	0x200000c8

08002564 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800256a:	e01a      	b.n	80025a2 <prvCheckTasksWaitingTermination+0x3e>
            {
                taskENTER_CRITICAL();
 800256c:	f000 fe60 	bl	8003230 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002570:	4b10      	ldr	r3, [pc, #64]	; (80025b4 <prvCheckTasksWaitingTermination+0x50>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3304      	adds	r3, #4
 800257c:	0018      	movs	r0, r3
 800257e:	f7fd fed0 	bl	8000322 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002582:	4b0d      	ldr	r3, [pc, #52]	; (80025b8 <prvCheckTasksWaitingTermination+0x54>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	1e5a      	subs	r2, r3, #1
 8002588:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <prvCheckTasksWaitingTermination+0x54>)
 800258a:	601a      	str	r2, [r3, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800258c:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <prvCheckTasksWaitingTermination+0x58>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	1e5a      	subs	r2, r3, #1
 8002592:	4b0a      	ldr	r3, [pc, #40]	; (80025bc <prvCheckTasksWaitingTermination+0x58>)
 8002594:	601a      	str	r2, [r3, #0]
                }
                taskEXIT_CRITICAL();
 8002596:	f000 fe5d 	bl	8003254 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	0018      	movs	r0, r3
 800259e:	f000 f80f 	bl	80025c0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80025a2:	4b06      	ldr	r3, [pc, #24]	; (80025bc <prvCheckTasksWaitingTermination+0x58>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1e0      	bne.n	800256c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80025aa:	46c0      	nop			; (mov r8, r8)
 80025ac:	46c0      	nop			; (mov r8, r8)
 80025ae:	46bd      	mov	sp, r7
 80025b0:	b002      	add	sp, #8
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	200000e0 	.word	0x200000e0
 80025b8:	2000010c 	.word	0x2000010c
 80025bc:	200000f4 	.word	0x200000f4

080025c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025cc:	0018      	movs	r0, r3
 80025ce:	f000 ff21 	bl	8003414 <vPortFree>
                vPortFree( pxTCB );
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	0018      	movs	r0, r3
 80025d6:	f000 ff1d 	bl	8003414 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80025da:	46c0      	nop			; (mov r8, r8)
 80025dc:	46bd      	mov	sp, r7
 80025de:	b002      	add	sp, #8
 80025e0:	bd80      	pop	{r7, pc}
	...

080025e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80025e8:	4b09      	ldr	r3, [pc, #36]	; (8002610 <prvResetNextTaskUnblockTime+0x2c>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d104      	bne.n	80025fc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80025f2:	4b08      	ldr	r3, [pc, #32]	; (8002614 <prvResetNextTaskUnblockTime+0x30>)
 80025f4:	2201      	movs	r2, #1
 80025f6:	4252      	negs	r2, r2
 80025f8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80025fa:	e005      	b.n	8002608 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80025fc:	4b04      	ldr	r3, [pc, #16]	; (8002610 <prvResetNextTaskUnblockTime+0x2c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	4b03      	ldr	r3, [pc, #12]	; (8002614 <prvResetNextTaskUnblockTime+0x30>)
 8002606:	601a      	str	r2, [r3, #0]
}
 8002608:	46c0      	nop			; (mov r8, r8)
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	46c0      	nop			; (mov r8, r8)
 8002610:	200000c4 	.word	0x200000c4
 8002614:	2000012c 	.word	0x2000012c

08002618 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 800261e:	4b04      	ldr	r3, [pc, #16]	; (8002630 <xTaskGetCurrentTaskHandle+0x18>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	607b      	str	r3, [r7, #4]

        return xReturn;
 8002624:	687b      	ldr	r3, [r7, #4]
    }
 8002626:	0018      	movs	r0, r3
 8002628:	46bd      	mov	sp, r7
 800262a:	b002      	add	sp, #8
 800262c:	bd80      	pop	{r7, pc}
 800262e:	46c0      	nop			; (mov r8, r8)
 8002630:	20000034 	.word	0x20000034

08002634 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800263a:	4b0a      	ldr	r3, [pc, #40]	; (8002664 <xTaskGetSchedulerState+0x30>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d102      	bne.n	8002648 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002642:	2301      	movs	r3, #1
 8002644:	607b      	str	r3, [r7, #4]
 8002646:	e008      	b.n	800265a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002648:	4b07      	ldr	r3, [pc, #28]	; (8002668 <xTaskGetSchedulerState+0x34>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d102      	bne.n	8002656 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002650:	2302      	movs	r3, #2
 8002652:	607b      	str	r3, [r7, #4]
 8002654:	e001      	b.n	800265a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8002656:	2300      	movs	r3, #0
 8002658:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800265a:	687b      	ldr	r3, [r7, #4]
    }
 800265c:	0018      	movs	r0, r3
 800265e:	46bd      	mov	sp, r7
 8002660:	b002      	add	sp, #8
 8002662:	bd80      	pop	{r7, pc}
 8002664:	20000118 	.word	0x20000118
 8002668:	20000134 	.word	0x20000134

0800266c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 800266c:	b590      	push	{r4, r7, lr}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8002678:	2300      	movs	r3, #0
 800267a:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d100      	bne.n	8002684 <xTaskPriorityInherit+0x18>
 8002682:	e098      	b.n	80027b6 <xTaskPriorityInherit+0x14a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002688:	4b4d      	ldr	r3, [pc, #308]	; (80027c0 <xTaskPriorityInherit+0x154>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268e:	429a      	cmp	r2, r3
 8002690:	d300      	bcc.n	8002694 <xTaskPriorityInherit+0x28>
 8002692:	e087      	b.n	80027a4 <xTaskPriorityInherit+0x138>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	2b00      	cmp	r3, #0
 800269a:	db06      	blt.n	80026aa <xTaskPriorityInherit+0x3e>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800269c:	4b48      	ldr	r3, [pc, #288]	; (80027c0 <xTaskPriorityInherit+0x154>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a2:	2205      	movs	r2, #5
 80026a4:	1ad2      	subs	r2, r2, r3
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	6959      	ldr	r1, [r3, #20]
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026b2:	0013      	movs	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	189b      	adds	r3, r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4a42      	ldr	r2, [pc, #264]	; (80027c4 <xTaskPriorityInherit+0x158>)
 80026bc:	189b      	adds	r3, r3, r2
 80026be:	4299      	cmp	r1, r3
 80026c0:	d137      	bne.n	8002732 <xTaskPriorityInherit+0xc6>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	3304      	adds	r3, #4
 80026c6:	0018      	movs	r0, r3
 80026c8:	f7fd fe2b 	bl	8000322 <uxListRemove>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80026cc:	4b3c      	ldr	r3, [pc, #240]	; (80027c0 <xTaskPriorityInherit+0x154>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	0018      	movs	r0, r3
 80026da:	f000 fed0 	bl	800347e <prvTraceGetTaskNumberHigh16>
 80026de:	0003      	movs	r3, r0
 80026e0:	001a      	movs	r2, r3
 80026e2:	4b39      	ldr	r3, [pc, #228]	; (80027c8 <xTaskPriorityInherit+0x15c>)
 80026e4:	881b      	ldrh	r3, [r3, #0]
 80026e6:	4013      	ands	r3, r2
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d008      	beq.n	8002700 <xTaskPriorityInherit+0x94>
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	0018      	movs	r0, r3
 80026f2:	f000 feb6 	bl	8003462 <prvTraceGetTaskNumberLow16>
 80026f6:	0003      	movs	r3, r0
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	0018      	movs	r0, r3
 80026fc:	f001 fb00 	bl	8003d00 <prvTraceStoreTaskReady>
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002704:	4b31      	ldr	r3, [pc, #196]	; (80027cc <xTaskPriorityInherit+0x160>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	429a      	cmp	r2, r3
 800270a:	d903      	bls.n	8002714 <xTaskPriorityInherit+0xa8>
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002710:	4b2e      	ldr	r3, [pc, #184]	; (80027cc <xTaskPriorityInherit+0x160>)
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002718:	0013      	movs	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	189b      	adds	r3, r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4a28      	ldr	r2, [pc, #160]	; (80027c4 <xTaskPriorityInherit+0x158>)
 8002722:	189a      	adds	r2, r3, r2
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	3304      	adds	r3, #4
 8002728:	0019      	movs	r1, r3
 800272a:	0010      	movs	r0, r2
 800272c:	f7fd fda1 	bl	8000272 <vListInsertEnd>
 8002730:	e004      	b.n	800273c <xTaskPriorityInherit+0xd0>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002732:	4b23      	ldr	r3, [pc, #140]	; (80027c0 <xTaskPriorityInherit+0x154>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	0018      	movs	r0, r3
 8002740:	f000 fe9d 	bl	800347e <prvTraceGetTaskNumberHigh16>
 8002744:	0003      	movs	r3, r0
 8002746:	001a      	movs	r2, r3
 8002748:	4b1f      	ldr	r3, [pc, #124]	; (80027c8 <xTaskPriorityInherit+0x15c>)
 800274a:	881b      	ldrh	r3, [r3, #0]
 800274c:	4013      	ands	r3, r2
 800274e:	b29b      	uxth	r3, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	d024      	beq.n	800279e <xTaskPriorityInherit+0x132>
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	0018      	movs	r0, r3
 8002758:	f000 fe83 	bl	8003462 <prvTraceGetTaskNumberLow16>
 800275c:	0003      	movs	r3, r0
 800275e:	b2db      	uxtb	r3, r3
 8002760:	001c      	movs	r4, r3
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	0018      	movs	r0, r3
 8002766:	f000 fe7c 	bl	8003462 <prvTraceGetTaskNumberLow16>
 800276a:	0003      	movs	r3, r0
 800276c:	b2db      	uxtb	r3, r3
 800276e:	0019      	movs	r1, r3
 8002770:	2003      	movs	r0, #3
 8002772:	f001 fe8d 	bl	8004490 <prvTraceGetPriorityProperty>
 8002776:	0003      	movs	r3, r0
 8002778:	0022      	movs	r2, r4
 800277a:	2103      	movs	r1, #3
 800277c:	208e      	movs	r0, #142	; 0x8e
 800277e:	f001 fc69 	bl	8004054 <prvTraceStoreKernelCallWithParam>
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	0018      	movs	r0, r3
 8002786:	f000 fe6c 	bl	8003462 <prvTraceGetTaskNumberLow16>
 800278a:	0003      	movs	r3, r0
 800278c:	b2d9      	uxtb	r1, r3
 800278e:	4b0c      	ldr	r3, [pc, #48]	; (80027c0 <xTaskPriorityInherit+0x154>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002794:	b2db      	uxtb	r3, r3
 8002796:	001a      	movs	r2, r3
 8002798:	2003      	movs	r0, #3
 800279a:	f001 fe2b 	bl	80043f4 <prvTraceSetPriorityProperty>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800279e:	2301      	movs	r3, #1
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	e008      	b.n	80027b6 <xTaskPriorityInherit+0x14a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80027a8:	4b05      	ldr	r3, [pc, #20]	; (80027c0 <xTaskPriorityInherit+0x154>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d201      	bcs.n	80027b6 <xTaskPriorityInherit+0x14a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 80027b2:	2301      	movs	r3, #1
 80027b4:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80027b6:	68fb      	ldr	r3, [r7, #12]
    }
 80027b8:	0018      	movs	r0, r3
 80027ba:	46bd      	mov	sp, r7
 80027bc:	b005      	add	sp, #20
 80027be:	bd90      	pop	{r4, r7, pc}
 80027c0:	20000034 	.word	0x20000034
 80027c4:	20000038 	.word	0x20000038
 80027c8:	20001da4 	.word	0x20001da4
 80027cc:	20000114 	.word	0x20000114

080027d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80027d0:	b590      	push	{r4, r7, lr}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 80027dc:	2300      	movs	r3, #0
 80027de:	60fb      	str	r3, [r7, #12]

        if( pxMutexHolder != NULL )
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d100      	bne.n	80027e8 <xTaskPriorityDisinherit+0x18>
 80027e6:	e089      	b.n	80028fc <xTaskPriorityDisinherit+0x12c>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80027e8:	4b47      	ldr	r3, [pc, #284]	; (8002908 <xTaskPriorityDisinherit+0x138>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68ba      	ldr	r2, [r7, #8]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d001      	beq.n	80027f6 <xTaskPriorityDisinherit+0x26>
 80027f2:	b672      	cpsid	i
 80027f4:	e7fe      	b.n	80027f4 <xTaskPriorityDisinherit+0x24>
            configASSERT( pxTCB->uxMutexesHeld );
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <xTaskPriorityDisinherit+0x32>
 80027fe:	b672      	cpsid	i
 8002800:	e7fe      	b.n	8002800 <xTaskPriorityDisinherit+0x30>
            ( pxTCB->uxMutexesHeld )--;
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002806:	1e5a      	subs	r2, r3, #1
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002814:	429a      	cmp	r2, r3
 8002816:	d071      	beq.n	80028fc <xTaskPriorityDisinherit+0x12c>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800281c:	2b00      	cmp	r3, #0
 800281e:	d16d      	bne.n	80028fc <xTaskPriorityDisinherit+0x12c>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	3304      	adds	r3, #4
 8002824:	0018      	movs	r0, r3
 8002826:	f7fd fd7c 	bl	8000322 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	0018      	movs	r0, r3
 800282e:	f000 fe26 	bl	800347e <prvTraceGetTaskNumberHigh16>
 8002832:	0003      	movs	r3, r0
 8002834:	001a      	movs	r2, r3
 8002836:	4b35      	ldr	r3, [pc, #212]	; (800290c <xTaskPriorityDisinherit+0x13c>)
 8002838:	881b      	ldrh	r3, [r3, #0]
 800283a:	4013      	ands	r3, r2
 800283c:	b29b      	uxth	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d023      	beq.n	800288a <xTaskPriorityDisinherit+0xba>
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	0018      	movs	r0, r3
 8002846:	f000 fe0c 	bl	8003462 <prvTraceGetTaskNumberLow16>
 800284a:	0003      	movs	r3, r0
 800284c:	b2db      	uxtb	r3, r3
 800284e:	001c      	movs	r4, r3
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	0018      	movs	r0, r3
 8002854:	f000 fe05 	bl	8003462 <prvTraceGetTaskNumberLow16>
 8002858:	0003      	movs	r3, r0
 800285a:	b2db      	uxtb	r3, r3
 800285c:	0019      	movs	r1, r3
 800285e:	2003      	movs	r0, #3
 8002860:	f001 fe16 	bl	8004490 <prvTraceGetPriorityProperty>
 8002864:	0003      	movs	r3, r0
 8002866:	0022      	movs	r2, r4
 8002868:	2103      	movs	r1, #3
 800286a:	208f      	movs	r0, #143	; 0x8f
 800286c:	f001 fbf2 	bl	8004054 <prvTraceStoreKernelCallWithParam>
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	0018      	movs	r0, r3
 8002874:	f000 fdf5 	bl	8003462 <prvTraceGetTaskNumberLow16>
 8002878:	0003      	movs	r3, r0
 800287a:	b2d9      	uxtb	r1, r3
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002880:	b2db      	uxtb	r3, r3
 8002882:	001a      	movs	r2, r3
 8002884:	2003      	movs	r0, #3
 8002886:	f001 fdb5 	bl	80043f4 <prvTraceSetPriorityProperty>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002896:	2205      	movs	r2, #5
 8002898:	1ad2      	subs	r2, r2, r3
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	0018      	movs	r0, r3
 80028a2:	f000 fdec 	bl	800347e <prvTraceGetTaskNumberHigh16>
 80028a6:	0003      	movs	r3, r0
 80028a8:	001a      	movs	r2, r3
 80028aa:	4b18      	ldr	r3, [pc, #96]	; (800290c <xTaskPriorityDisinherit+0x13c>)
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	4013      	ands	r3, r2
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d008      	beq.n	80028c8 <xTaskPriorityDisinherit+0xf8>
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	0018      	movs	r0, r3
 80028ba:	f000 fdd2 	bl	8003462 <prvTraceGetTaskNumberLow16>
 80028be:	0003      	movs	r3, r0
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	0018      	movs	r0, r3
 80028c4:	f001 fa1c 	bl	8003d00 <prvTraceStoreTaskReady>
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028cc:	4b10      	ldr	r3, [pc, #64]	; (8002910 <xTaskPriorityDisinherit+0x140>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d903      	bls.n	80028dc <xTaskPriorityDisinherit+0x10c>
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028d8:	4b0d      	ldr	r3, [pc, #52]	; (8002910 <xTaskPriorityDisinherit+0x140>)
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028e0:	0013      	movs	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	189b      	adds	r3, r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4a0a      	ldr	r2, [pc, #40]	; (8002914 <xTaskPriorityDisinherit+0x144>)
 80028ea:	189a      	adds	r2, r3, r2
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	3304      	adds	r3, #4
 80028f0:	0019      	movs	r1, r3
 80028f2:	0010      	movs	r0, r2
 80028f4:	f7fd fcbd 	bl	8000272 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80028f8:	2301      	movs	r3, #1
 80028fa:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80028fc:	68fb      	ldr	r3, [r7, #12]
    }
 80028fe:	0018      	movs	r0, r3
 8002900:	46bd      	mov	sp, r7
 8002902:	b005      	add	sp, #20
 8002904:	bd90      	pop	{r4, r7, pc}
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	20000034 	.word	0x20000034
 800290c:	20001da4 	.word	0x20001da4
 8002910:	20000114 	.word	0x20000114
 8002914:	20000038 	.word	0x20000038

08002918 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8002918:	b590      	push	{r4, r7, lr}
 800291a:	b087      	sub	sp, #28
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	613b      	str	r3, [r7, #16]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8002926:	2301      	movs	r3, #1
 8002928:	60fb      	str	r3, [r7, #12]

        if( pxMutexHolder != NULL )
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d100      	bne.n	8002932 <vTaskPriorityDisinheritAfterTimeout+0x1a>
 8002930:	e09e      	b.n	8002a70 <vTaskPriorityDisinheritAfterTimeout+0x158>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <vTaskPriorityDisinheritAfterTimeout+0x26>
 800293a:	b672      	cpsid	i
 800293c:	e7fe      	b.n	800293c <vTaskPriorityDisinheritAfterTimeout+0x24>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	429a      	cmp	r2, r3
 8002946:	d902      	bls.n	800294e <vTaskPriorityDisinheritAfterTimeout+0x36>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	617b      	str	r3, [r7, #20]
 800294c:	e002      	b.n	8002954 <vTaskPriorityDisinheritAfterTimeout+0x3c>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002952:	617b      	str	r3, [r7, #20]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	429a      	cmp	r2, r3
 800295c:	d100      	bne.n	8002960 <vTaskPriorityDisinheritAfterTimeout+0x48>
 800295e:	e087      	b.n	8002a70 <vTaskPriorityDisinheritAfterTimeout+0x158>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	429a      	cmp	r2, r3
 8002968:	d000      	beq.n	800296c <vTaskPriorityDisinheritAfterTimeout+0x54>
 800296a:	e081      	b.n	8002a70 <vTaskPriorityDisinheritAfterTimeout+0x158>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800296c:	4b42      	ldr	r3, [pc, #264]	; (8002a78 <vTaskPriorityDisinheritAfterTimeout+0x160>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	429a      	cmp	r2, r3
 8002974:	d101      	bne.n	800297a <vTaskPriorityDisinheritAfterTimeout+0x62>
 8002976:	b672      	cpsid	i
 8002978:	e7fe      	b.n	8002978 <vTaskPriorityDisinheritAfterTimeout+0x60>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	0018      	movs	r0, r3
 800297e:	f000 fd7e 	bl	800347e <prvTraceGetTaskNumberHigh16>
 8002982:	0003      	movs	r3, r0
 8002984:	001a      	movs	r2, r3
 8002986:	4b3d      	ldr	r3, [pc, #244]	; (8002a7c <vTaskPriorityDisinheritAfterTimeout+0x164>)
 8002988:	881b      	ldrh	r3, [r3, #0]
 800298a:	4013      	ands	r3, r2
 800298c:	b29b      	uxth	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d022      	beq.n	80029d8 <vTaskPriorityDisinheritAfterTimeout+0xc0>
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	0018      	movs	r0, r3
 8002996:	f000 fd64 	bl	8003462 <prvTraceGetTaskNumberLow16>
 800299a:	0003      	movs	r3, r0
 800299c:	b2db      	uxtb	r3, r3
 800299e:	001c      	movs	r4, r3
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	0018      	movs	r0, r3
 80029a4:	f000 fd5d 	bl	8003462 <prvTraceGetTaskNumberLow16>
 80029a8:	0003      	movs	r3, r0
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	0019      	movs	r1, r3
 80029ae:	2003      	movs	r0, #3
 80029b0:	f001 fd6e 	bl	8004490 <prvTraceGetPriorityProperty>
 80029b4:	0003      	movs	r3, r0
 80029b6:	0022      	movs	r2, r4
 80029b8:	2103      	movs	r1, #3
 80029ba:	208f      	movs	r0, #143	; 0x8f
 80029bc:	f001 fb4a 	bl	8004054 <prvTraceStoreKernelCallWithParam>
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	0018      	movs	r0, r3
 80029c4:	f000 fd4d 	bl	8003462 <prvTraceGetTaskNumberLow16>
 80029c8:	0003      	movs	r3, r0
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	b2d2      	uxtb	r2, r2
 80029d0:	0019      	movs	r1, r3
 80029d2:	2003      	movs	r0, #3
 80029d4:	f001 fd0e 	bl	80043f4 <prvTraceSetPriorityProperty>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029dc:	60bb      	str	r3, [r7, #8]
                    pxTCB->uxPriority = uxPriorityToUse;
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	db04      	blt.n	80029f6 <vTaskPriorityDisinheritAfterTimeout+0xde>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	2205      	movs	r2, #5
 80029f0:	1ad2      	subs	r2, r2, r3
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	6959      	ldr	r1, [r3, #20]
 80029fa:	68ba      	ldr	r2, [r7, #8]
 80029fc:	0013      	movs	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	189b      	adds	r3, r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4a1e      	ldr	r2, [pc, #120]	; (8002a80 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8002a06:	189b      	adds	r3, r3, r2
 8002a08:	4299      	cmp	r1, r3
 8002a0a:	d131      	bne.n	8002a70 <vTaskPriorityDisinheritAfterTimeout+0x158>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	3304      	adds	r3, #4
 8002a10:	0018      	movs	r0, r3
 8002a12:	f7fd fc86 	bl	8000322 <uxListRemove>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	0018      	movs	r0, r3
 8002a1a:	f000 fd30 	bl	800347e <prvTraceGetTaskNumberHigh16>
 8002a1e:	0003      	movs	r3, r0
 8002a20:	001a      	movs	r2, r3
 8002a22:	4b16      	ldr	r3, [pc, #88]	; (8002a7c <vTaskPriorityDisinheritAfterTimeout+0x164>)
 8002a24:	881b      	ldrh	r3, [r3, #0]
 8002a26:	4013      	ands	r3, r2
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d008      	beq.n	8002a40 <vTaskPriorityDisinheritAfterTimeout+0x128>
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	0018      	movs	r0, r3
 8002a32:	f000 fd16 	bl	8003462 <prvTraceGetTaskNumberLow16>
 8002a36:	0003      	movs	r3, r0
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	f001 f960 	bl	8003d00 <prvTraceStoreTaskReady>
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a44:	4b0f      	ldr	r3, [pc, #60]	; (8002a84 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d903      	bls.n	8002a54 <vTaskPriorityDisinheritAfterTimeout+0x13c>
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a50:	4b0c      	ldr	r3, [pc, #48]	; (8002a84 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a58:	0013      	movs	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	189b      	adds	r3, r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4a07      	ldr	r2, [pc, #28]	; (8002a80 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8002a62:	189a      	adds	r2, r3, r2
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	3304      	adds	r3, #4
 8002a68:	0019      	movs	r1, r3
 8002a6a:	0010      	movs	r0, r2
 8002a6c:	f7fd fc01 	bl	8000272 <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002a70:	46c0      	nop			; (mov r8, r8)
 8002a72:	46bd      	mov	sp, r7
 8002a74:	b007      	add	sp, #28
 8002a76:	bd90      	pop	{r4, r7, pc}
 8002a78:	20000034 	.word	0x20000034
 8002a7c:	20001da4 	.word	0x20001da4
 8002a80:	20000038 	.word	0x20000038
 8002a84:	20000114 	.word	0x20000114

08002a88 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8002a8c:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <pvTaskIncrementMutexHeldCount+0x20>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d004      	beq.n	8002a9e <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8002a94:	4b04      	ldr	r3, [pc, #16]	; (8002aa8 <pvTaskIncrementMutexHeldCount+0x20>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a9a:	3201      	adds	r2, #1
 8002a9c:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 8002a9e:	4b02      	ldr	r3, [pc, #8]	; (8002aa8 <pvTaskIncrementMutexHeldCount+0x20>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
    }
 8002aa2:	0018      	movs	r0, r3
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	20000034 	.word	0x20000034

08002aac <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002ab6:	4b21      	ldr	r3, [pc, #132]	; (8002b3c <prvAddCurrentTaskToDelayedList+0x90>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002abc:	4b20      	ldr	r3, [pc, #128]	; (8002b40 <prvAddCurrentTaskToDelayedList+0x94>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	3304      	adds	r3, #4
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	f7fd fc2d 	bl	8000322 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3301      	adds	r3, #1
 8002acc:	d10b      	bne.n	8002ae6 <prvAddCurrentTaskToDelayedList+0x3a>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d008      	beq.n	8002ae6 <prvAddCurrentTaskToDelayedList+0x3a>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ad4:	4b1a      	ldr	r3, [pc, #104]	; (8002b40 <prvAddCurrentTaskToDelayedList+0x94>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	1d1a      	adds	r2, r3, #4
 8002ada:	4b1a      	ldr	r3, [pc, #104]	; (8002b44 <prvAddCurrentTaskToDelayedList+0x98>)
 8002adc:	0011      	movs	r1, r2
 8002ade:	0018      	movs	r0, r3
 8002ae0:	f7fd fbc7 	bl	8000272 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002ae4:	e026      	b.n	8002b34 <prvAddCurrentTaskToDelayedList+0x88>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	18d3      	adds	r3, r2, r3
 8002aec:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002aee:	4b14      	ldr	r3, [pc, #80]	; (8002b40 <prvAddCurrentTaskToDelayedList+0x94>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002af6:	68ba      	ldr	r2, [r7, #8]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d209      	bcs.n	8002b12 <prvAddCurrentTaskToDelayedList+0x66>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002afe:	4b12      	ldr	r3, [pc, #72]	; (8002b48 <prvAddCurrentTaskToDelayedList+0x9c>)
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	4b0f      	ldr	r3, [pc, #60]	; (8002b40 <prvAddCurrentTaskToDelayedList+0x94>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	3304      	adds	r3, #4
 8002b08:	0019      	movs	r1, r3
 8002b0a:	0010      	movs	r0, r2
 8002b0c:	f7fd fbd3 	bl	80002b6 <vListInsert>
}
 8002b10:	e010      	b.n	8002b34 <prvAddCurrentTaskToDelayedList+0x88>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002b12:	4b0e      	ldr	r3, [pc, #56]	; (8002b4c <prvAddCurrentTaskToDelayedList+0xa0>)
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	4b0a      	ldr	r3, [pc, #40]	; (8002b40 <prvAddCurrentTaskToDelayedList+0x94>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	3304      	adds	r3, #4
 8002b1c:	0019      	movs	r1, r3
 8002b1e:	0010      	movs	r0, r2
 8002b20:	f7fd fbc9 	bl	80002b6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002b24:	4b0a      	ldr	r3, [pc, #40]	; (8002b50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68ba      	ldr	r2, [r7, #8]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d202      	bcs.n	8002b34 <prvAddCurrentTaskToDelayedList+0x88>
                        xNextTaskUnblockTime = xTimeToWake;
 8002b2e:	4b08      	ldr	r3, [pc, #32]	; (8002b50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	601a      	str	r2, [r3, #0]
}
 8002b34:	46c0      	nop			; (mov r8, r8)
 8002b36:	46bd      	mov	sp, r7
 8002b38:	b004      	add	sp, #16
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	20000110 	.word	0x20000110
 8002b40:	20000034 	.word	0x20000034
 8002b44:	200000f8 	.word	0x200000f8
 8002b48:	200000c8 	.word	0x200000c8
 8002b4c:	200000c4 	.word	0x200000c4
 8002b50:	2000012c 	.word	0x2000012c

08002b54 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8002b5e:	f000 fa9f 	bl	80030a0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8002b62:	4b0d      	ldr	r3, [pc, #52]	; (8002b98 <xTimerCreateTimerTask+0x44>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00b      	beq.n	8002b82 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8002b6a:	490c      	ldr	r1, [pc, #48]	; (8002b9c <xTimerCreateTimerTask+0x48>)
 8002b6c:	480c      	ldr	r0, [pc, #48]	; (8002ba0 <xTimerCreateTimerTask+0x4c>)
 8002b6e:	4b0d      	ldr	r3, [pc, #52]	; (8002ba4 <xTimerCreateTimerTask+0x50>)
 8002b70:	9301      	str	r3, [sp, #4]
 8002b72:	2303      	movs	r3, #3
 8002b74:	9300      	str	r3, [sp, #0]
 8002b76:	2300      	movs	r3, #0
 8002b78:	2246      	movs	r2, #70	; 0x46
 8002b7a:	f7fe fed0 	bl	800191e <xTaskCreate>
 8002b7e:	0003      	movs	r3, r0
 8002b80:	607b      	str	r3, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d101      	bne.n	8002b8c <xTimerCreateTimerTask+0x38>
 8002b88:	b672      	cpsid	i
 8002b8a:	e7fe      	b.n	8002b8a <xTimerCreateTimerTask+0x36>
        return xReturn;
 8002b8c:	687b      	ldr	r3, [r7, #4]
    }
 8002b8e:	0018      	movs	r0, r3
 8002b90:	46bd      	mov	sp, r7
 8002b92:	b002      	add	sp, #8
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	46c0      	nop			; (mov r8, r8)
 8002b98:	20000168 	.word	0x20000168
 8002b9c:	08005c4c 	.word	0x08005c4c
 8002ba0:	08002cc5 	.word	0x08002cc5
 8002ba4:	2000016c 	.word	0x2000016c

08002ba8 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8002ba8:	b590      	push	{r4, r7, lr}
 8002baa:	b089      	sub	sp, #36	; 0x24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
 8002bb4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61fb      	str	r3, [r7, #28]
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d101      	bne.n	8002bc4 <xTimerGenericCommand+0x1c>
 8002bc0:	b672      	cpsid	i
 8002bc2:	e7fe      	b.n	8002bc2 <xTimerGenericCommand+0x1a>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8002bc4:	4b1c      	ldr	r3, [pc, #112]	; (8002c38 <xTimerGenericCommand+0x90>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d030      	beq.n	8002c2e <xTimerGenericCommand+0x86>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8002bcc:	2410      	movs	r4, #16
 8002bce:	193b      	adds	r3, r7, r4
 8002bd0:	68ba      	ldr	r2, [r7, #8]
 8002bd2:	601a      	str	r2, [r3, #0]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002bd4:	193b      	adds	r3, r7, r4
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	605a      	str	r2, [r3, #4]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002bda:	193b      	adds	r3, r7, r4
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	609a      	str	r2, [r3, #8]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	2b05      	cmp	r3, #5
 8002be4:	dc19      	bgt.n	8002c1a <xTimerGenericCommand+0x72>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002be6:	f7ff fd25 	bl	8002634 <xTaskGetSchedulerState>
 8002bea:	0003      	movs	r3, r0
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d109      	bne.n	8002c04 <xTimerGenericCommand+0x5c>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002bf0:	4b11      	ldr	r3, [pc, #68]	; (8002c38 <xTimerGenericCommand+0x90>)
 8002bf2:	6818      	ldr	r0, [r3, #0]
 8002bf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bf6:	1939      	adds	r1, r7, r4
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	f7fd fd49 	bl	8000690 <xQueueGenericSend>
 8002bfe:	0003      	movs	r3, r0
 8002c00:	61fb      	str	r3, [r7, #28]
 8002c02:	e014      	b.n	8002c2e <xTimerGenericCommand+0x86>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002c04:	4b0c      	ldr	r3, [pc, #48]	; (8002c38 <xTimerGenericCommand+0x90>)
 8002c06:	6818      	ldr	r0, [r3, #0]
 8002c08:	2310      	movs	r3, #16
 8002c0a:	18f9      	adds	r1, r7, r3
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f7fd fd3e 	bl	8000690 <xQueueGenericSend>
 8002c14:	0003      	movs	r3, r0
 8002c16:	61fb      	str	r3, [r7, #28]
 8002c18:	e009      	b.n	8002c2e <xTimerGenericCommand+0x86>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002c1a:	4b07      	ldr	r3, [pc, #28]	; (8002c38 <xTimerGenericCommand+0x90>)
 8002c1c:	6818      	ldr	r0, [r3, #0]
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	2310      	movs	r3, #16
 8002c22:	18f9      	adds	r1, r7, r3
 8002c24:	2300      	movs	r3, #0
 8002c26:	f7fd ff0b 	bl	8000a40 <xQueueGenericSendFromISR>
 8002c2a:	0003      	movs	r3, r0
 8002c2c:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002c2e:	69fb      	ldr	r3, [r7, #28]
    }
 8002c30:	0018      	movs	r0, r3
 8002c32:	46bd      	mov	sp, r7
 8002c34:	b009      	add	sp, #36	; 0x24
 8002c36:	bd90      	pop	{r4, r7, pc}
 8002c38:	20000168 	.word	0x20000168

08002c3c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af02      	add	r7, sp, #8
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c46:	4b1e      	ldr	r3, [pc, #120]	; (8002cc0 <prvProcessExpiredTimer+0x84>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	3304      	adds	r3, #4
 8002c54:	0018      	movs	r0, r3
 8002c56:	f7fd fb64 	bl	8000322 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2228      	movs	r2, #40	; 0x28
 8002c5e:	5c9b      	ldrb	r3, [r3, r2]
 8002c60:	001a      	movs	r2, r3
 8002c62:	2304      	movs	r3, #4
 8002c64:	4013      	ands	r3, r2
 8002c66:	d019      	beq.n	8002c9c <prvProcessExpiredTimer+0x60>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	699a      	ldr	r2, [r3, #24]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	18d1      	adds	r1, r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f000 f8c3 	bl	8002e00 <prvInsertTimerInActiveList>
 8002c7a:	1e03      	subs	r3, r0, #0
 8002c7c:	d017      	beq.n	8002cae <prvProcessExpiredTimer+0x72>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	2300      	movs	r3, #0
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	2300      	movs	r3, #0
 8002c88:	2100      	movs	r1, #0
 8002c8a:	f7ff ff8d 	bl	8002ba8 <xTimerGenericCommand>
 8002c8e:	0003      	movs	r3, r0
 8002c90:	60bb      	str	r3, [r7, #8]
                configASSERT( xResult );
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10a      	bne.n	8002cae <prvProcessExpiredTimer+0x72>
 8002c98:	b672      	cpsid	i
 8002c9a:	e7fe      	b.n	8002c9a <prvProcessExpiredTimer+0x5e>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2228      	movs	r2, #40	; 0x28
 8002ca0:	5c9b      	ldrb	r3, [r3, r2]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	4393      	bics	r3, r2
 8002ca6:	b2d9      	uxtb	r1, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2228      	movs	r2, #40	; 0x28
 8002cac:	5499      	strb	r1, [r3, r2]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	0010      	movs	r0, r2
 8002cb6:	4798      	blx	r3
    }
 8002cb8:	46c0      	nop			; (mov r8, r8)
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	b004      	add	sp, #16
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	20000160 	.word	0x20000160

08002cc4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002ccc:	2308      	movs	r3, #8
 8002cce:	18fb      	adds	r3, r7, r3
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	f000 f853 	bl	8002d7c <prvGetNextExpireTime>
 8002cd6:	0003      	movs	r3, r0
 8002cd8:	60fb      	str	r3, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002cda:	68ba      	ldr	r2, [r7, #8]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	0011      	movs	r1, r2
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	f000 f803 	bl	8002cec <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8002ce6:	f000 f8cd 	bl	8002e84 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002cea:	e7ef      	b.n	8002ccc <prvTimerTask+0x8>

08002cec <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002cf6:	f7ff f879 	bl	8001dec <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002cfa:	2308      	movs	r3, #8
 8002cfc:	18fb      	adds	r3, r7, r3
 8002cfe:	0018      	movs	r0, r3
 8002d00:	f000 f85e 	bl	8002dc0 <prvSampleTimeNow>
 8002d04:	0003      	movs	r3, r0
 8002d06:	60fb      	str	r3, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d12b      	bne.n	8002d66 <prvProcessTimerOrBlockTask+0x7a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d10c      	bne.n	8002d2e <prvProcessTimerOrBlockTask+0x42>
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d808      	bhi.n	8002d2e <prvProcessTimerOrBlockTask+0x42>
                {
                    ( void ) xTaskResumeAll();
 8002d1c:	f7ff f872 	bl	8001e04 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	0011      	movs	r1, r2
 8002d26:	0018      	movs	r0, r3
 8002d28:	f7ff ff88 	bl	8002c3c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002d2c:	e01d      	b.n	8002d6a <prvProcessTimerOrBlockTask+0x7e>
                    if( xListWasEmpty != pdFALSE )
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d008      	beq.n	8002d46 <prvProcessTimerOrBlockTask+0x5a>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002d34:	4b0f      	ldr	r3, [pc, #60]	; (8002d74 <prvProcessTimerOrBlockTask+0x88>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <prvProcessTimerOrBlockTask+0x56>
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e000      	b.n	8002d44 <prvProcessTimerOrBlockTask+0x58>
 8002d42:	2300      	movs	r3, #0
 8002d44:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002d46:	4b0c      	ldr	r3, [pc, #48]	; (8002d78 <prvProcessTimerOrBlockTask+0x8c>)
 8002d48:	6818      	ldr	r0, [r3, #0]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	0019      	movs	r1, r3
 8002d54:	f7fe fdb0 	bl	80018b8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002d58:	f7ff f854 	bl	8001e04 <xTaskResumeAll>
 8002d5c:	1e03      	subs	r3, r0, #0
 8002d5e:	d104      	bne.n	8002d6a <prvProcessTimerOrBlockTask+0x7e>
                        portYIELD_WITHIN_API();
 8002d60:	f000 fa56 	bl	8003210 <vPortYield>
    }
 8002d64:	e001      	b.n	8002d6a <prvProcessTimerOrBlockTask+0x7e>
                ( void ) xTaskResumeAll();
 8002d66:	f7ff f84d 	bl	8001e04 <xTaskResumeAll>
    }
 8002d6a:	46c0      	nop			; (mov r8, r8)
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	b004      	add	sp, #16
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	20000164 	.word	0x20000164
 8002d78:	20000168 	.word	0x20000168

08002d7c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002d84:	4b0d      	ldr	r3, [pc, #52]	; (8002dbc <prvGetNextExpireTime+0x40>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <prvGetNextExpireTime+0x16>
 8002d8e:	2201      	movs	r2, #1
 8002d90:	e000      	b.n	8002d94 <prvGetNextExpireTime+0x18>
 8002d92:	2200      	movs	r2, #0
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d105      	bne.n	8002dac <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002da0:	4b06      	ldr	r3, [pc, #24]	; (8002dbc <prvGetNextExpireTime+0x40>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	60fb      	str	r3, [r7, #12]
 8002daa:	e001      	b.n	8002db0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002dac:	2300      	movs	r3, #0
 8002dae:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002db0:	68fb      	ldr	r3, [r7, #12]
    }
 8002db2:	0018      	movs	r0, r3
 8002db4:	46bd      	mov	sp, r7
 8002db6:	b004      	add	sp, #16
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	46c0      	nop			; (mov r8, r8)
 8002dbc:	20000160 	.word	0x20000160

08002dc0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002dc8:	f7ff f8b8 	bl	8001f3c <xTaskGetTickCount>
 8002dcc:	0003      	movs	r3, r0
 8002dce:	60fb      	str	r3, [r7, #12]

        if( xTimeNow < xLastTime )
 8002dd0:	4b0a      	ldr	r3, [pc, #40]	; (8002dfc <prvSampleTimeNow+0x3c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d205      	bcs.n	8002de6 <prvSampleTimeNow+0x26>
        {
            prvSwitchTimerLists();
 8002dda:	f000 f903 	bl	8002fe4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	e002      	b.n	8002dec <prvSampleTimeNow+0x2c>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002dec:	4b03      	ldr	r3, [pc, #12]	; (8002dfc <prvSampleTimeNow+0x3c>)
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	601a      	str	r2, [r3, #0]

        return xTimeNow;
 8002df2:	68fb      	ldr	r3, [r7, #12]
    }
 8002df4:	0018      	movs	r0, r3
 8002df6:	46bd      	mov	sp, r7
 8002df8:	b004      	add	sp, #16
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	20000170 	.word	0x20000170

08002e00 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
 8002e0c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	68ba      	ldr	r2, [r7, #8]
 8002e16:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002e1e:	68ba      	ldr	r2, [r7, #8]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d812      	bhi.n	8002e4c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	1ad2      	subs	r2, r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d302      	bcc.n	8002e3a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002e34:	2301      	movs	r3, #1
 8002e36:	617b      	str	r3, [r7, #20]
 8002e38:	e01b      	b.n	8002e72 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002e3a:	4b10      	ldr	r3, [pc, #64]	; (8002e7c <prvInsertTimerInActiveList+0x7c>)
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	3304      	adds	r3, #4
 8002e42:	0019      	movs	r1, r3
 8002e44:	0010      	movs	r0, r2
 8002e46:	f7fd fa36 	bl	80002b6 <vListInsert>
 8002e4a:	e012      	b.n	8002e72 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d206      	bcs.n	8002e62 <prvInsertTimerInActiveList+0x62>
 8002e54:	68ba      	ldr	r2, [r7, #8]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d302      	bcc.n	8002e62 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	617b      	str	r3, [r7, #20]
 8002e60:	e007      	b.n	8002e72 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002e62:	4b07      	ldr	r3, [pc, #28]	; (8002e80 <prvInsertTimerInActiveList+0x80>)
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	3304      	adds	r3, #4
 8002e6a:	0019      	movs	r1, r3
 8002e6c:	0010      	movs	r0, r2
 8002e6e:	f7fd fa22 	bl	80002b6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002e72:	697b      	ldr	r3, [r7, #20]
    }
 8002e74:	0018      	movs	r0, r3
 8002e76:	46bd      	mov	sp, r7
 8002e78:	b006      	add	sp, #24
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	20000164 	.word	0x20000164
 8002e80:	20000160 	.word	0x20000160

08002e84 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002e84:	b590      	push	{r4, r7, lr}
 8002e86:	b08b      	sub	sp, #44	; 0x2c
 8002e88:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002e8a:	e097      	b.n	8002fbc <prvProcessReceivedCommands+0x138>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002e8c:	2208      	movs	r2, #8
 8002e8e:	18bb      	adds	r3, r7, r2
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	da00      	bge.n	8002e98 <prvProcessReceivedCommands+0x14>
 8002e96:	e091      	b.n	8002fbc <prvProcessReceivedCommands+0x138>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002e98:	18bb      	adds	r3, r7, r2
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d004      	beq.n	8002eb0 <prvProcessReceivedCommands+0x2c>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f7fd fa39 	bl	8000322 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002eb0:	1d3b      	adds	r3, r7, #4
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	f7ff ff84 	bl	8002dc0 <prvSampleTimeNow>
 8002eb8:	0003      	movs	r3, r0
 8002eba:	61bb      	str	r3, [r7, #24]

                switch( xMessage.xMessageID )
 8002ebc:	2308      	movs	r3, #8
 8002ebe:	18fb      	adds	r3, r7, r3
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2b09      	cmp	r3, #9
 8002ec4:	d900      	bls.n	8002ec8 <prvProcessReceivedCommands+0x44>
 8002ec6:	e078      	b.n	8002fba <prvProcessReceivedCommands+0x136>
 8002ec8:	009a      	lsls	r2, r3, #2
 8002eca:	4b44      	ldr	r3, [pc, #272]	; (8002fdc <prvProcessReceivedCommands+0x158>)
 8002ecc:	18d3      	adds	r3, r2, r3
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	469f      	mov	pc, r3
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	2228      	movs	r2, #40	; 0x28
 8002ed6:	5c9b      	ldrb	r3, [r3, r2]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	4313      	orrs	r3, r2
 8002edc:	b2d9      	uxtb	r1, r3
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	2228      	movs	r2, #40	; 0x28
 8002ee2:	5499      	strb	r1, [r3, r2]

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002ee4:	2408      	movs	r4, #8
 8002ee6:	193b      	adds	r3, r7, r4
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	18d1      	adds	r1, r2, r3
 8002ef0:	193b      	adds	r3, r7, r4
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	69f8      	ldr	r0, [r7, #28]
 8002ef8:	f7ff ff82 	bl	8002e00 <prvInsertTimerInActiveList>
 8002efc:	1e03      	subs	r3, r0, #0
 8002efe:	d05d      	beq.n	8002fbc <prvProcessReceivedCommands+0x138>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	69fa      	ldr	r2, [r7, #28]
 8002f06:	0010      	movs	r0, r2
 8002f08:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	2228      	movs	r2, #40	; 0x28
 8002f0e:	5c9b      	ldrb	r3, [r3, r2]
 8002f10:	001a      	movs	r2, r3
 8002f12:	2304      	movs	r3, #4
 8002f14:	4013      	ands	r3, r2
 8002f16:	d051      	beq.n	8002fbc <prvProcessReceivedCommands+0x138>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002f18:	193b      	adds	r3, r7, r4
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	18d2      	adds	r2, r2, r3
 8002f22:	69f8      	ldr	r0, [r7, #28]
 8002f24:	2300      	movs	r3, #0
 8002f26:	9300      	str	r3, [sp, #0]
 8002f28:	2300      	movs	r3, #0
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	f7ff fe3c 	bl	8002ba8 <xTimerGenericCommand>
 8002f30:	0003      	movs	r3, r0
 8002f32:	617b      	str	r3, [r7, #20]
                                configASSERT( xResult );
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d140      	bne.n	8002fbc <prvProcessReceivedCommands+0x138>
 8002f3a:	b672      	cpsid	i
 8002f3c:	e7fe      	b.n	8002f3c <prvProcessReceivedCommands+0xb8>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	2228      	movs	r2, #40	; 0x28
 8002f42:	5c9b      	ldrb	r3, [r3, r2]
 8002f44:	2201      	movs	r2, #1
 8002f46:	4393      	bics	r3, r2
 8002f48:	b2d9      	uxtb	r1, r3
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	2228      	movs	r2, #40	; 0x28
 8002f4e:	5499      	strb	r1, [r3, r2]
                        break;
 8002f50:	e034      	b.n	8002fbc <prvProcessReceivedCommands+0x138>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	2228      	movs	r2, #40	; 0x28
 8002f56:	5c9b      	ldrb	r3, [r3, r2]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	b2d9      	uxtb	r1, r3
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	2228      	movs	r2, #40	; 0x28
 8002f62:	5499      	strb	r1, [r3, r2]
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002f64:	2308      	movs	r3, #8
 8002f66:	18fb      	adds	r3, r7, r3
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <prvProcessReceivedCommands+0xf6>
 8002f76:	b672      	cpsid	i
 8002f78:	e7fe      	b.n	8002f78 <prvProcessReceivedCommands+0xf4>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	699a      	ldr	r2, [r3, #24]
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	18d1      	adds	r1, r2, r3
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	69f8      	ldr	r0, [r7, #28]
 8002f88:	f7ff ff3a 	bl	8002e00 <prvInsertTimerInActiveList>
                        break;
 8002f8c:	e016      	b.n	8002fbc <prvProcessReceivedCommands+0x138>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	2228      	movs	r2, #40	; 0x28
 8002f92:	5c9b      	ldrb	r3, [r3, r2]
 8002f94:	001a      	movs	r2, r3
 8002f96:	2302      	movs	r3, #2
 8002f98:	4013      	ands	r3, r2
 8002f9a:	d104      	bne.n	8002fa6 <prvProcessReceivedCommands+0x122>
                                {
                                    vPortFree( pxTimer );
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	0018      	movs	r0, r3
 8002fa0:	f000 fa38 	bl	8003414 <vPortFree>
 8002fa4:	e00a      	b.n	8002fbc <prvProcessReceivedCommands+0x138>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	2228      	movs	r2, #40	; 0x28
 8002faa:	5c9b      	ldrb	r3, [r3, r2]
 8002fac:	2201      	movs	r2, #1
 8002fae:	4393      	bics	r3, r2
 8002fb0:	b2d9      	uxtb	r1, r3
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	2228      	movs	r2, #40	; 0x28
 8002fb6:	5499      	strb	r1, [r3, r2]
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002fb8:	e000      	b.n	8002fbc <prvProcessReceivedCommands+0x138>

                    default:
                        /* Don't expect to get here. */
                        break;
 8002fba:	46c0      	nop			; (mov r8, r8)
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002fbc:	4b08      	ldr	r3, [pc, #32]	; (8002fe0 <prvProcessReceivedCommands+0x15c>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2208      	movs	r2, #8
 8002fc2:	18b9      	adds	r1, r7, r2
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	0018      	movs	r0, r3
 8002fc8:	f7fd ff2c 	bl	8000e24 <xQueueReceive>
 8002fcc:	1e03      	subs	r3, r0, #0
 8002fce:	d000      	beq.n	8002fd2 <prvProcessReceivedCommands+0x14e>
 8002fd0:	e75c      	b.n	8002e8c <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8002fd2:	46c0      	nop			; (mov r8, r8)
 8002fd4:	46c0      	nop			; (mov r8, r8)
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	b009      	add	sp, #36	; 0x24
 8002fda:	bd90      	pop	{r4, r7, pc}
 8002fdc:	0800706c 	.word	0x0800706c
 8002fe0:	20000168 	.word	0x20000168

08002fe4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b088      	sub	sp, #32
 8002fe8:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002fea:	e041      	b.n	8003070 <prvSwitchTimerLists+0x8c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002fec:	4b2a      	ldr	r3, [pc, #168]	; (8003098 <prvSwitchTimerLists+0xb4>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ff6:	4b28      	ldr	r3, [pc, #160]	; (8003098 <prvSwitchTimerLists+0xb4>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	3304      	adds	r3, #4
 8003004:	0018      	movs	r0, r3
 8003006:	f7fd f98c 	bl	8000322 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	0010      	movs	r0, r2
 8003012:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2228      	movs	r2, #40	; 0x28
 8003018:	5c9b      	ldrb	r3, [r3, r2]
 800301a:	001a      	movs	r2, r3
 800301c:	2304      	movs	r3, #4
 800301e:	4013      	ands	r3, r2
 8003020:	d026      	beq.n	8003070 <prvSwitchTimerLists+0x8c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	18d3      	adds	r3, r2, r3
 800302a:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800302c:	68ba      	ldr	r2, [r7, #8]
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	429a      	cmp	r2, r3
 8003032:	d90e      	bls.n	8003052 <prvSwitchTimerLists+0x6e>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003040:	4b15      	ldr	r3, [pc, #84]	; (8003098 <prvSwitchTimerLists+0xb4>)
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	3304      	adds	r3, #4
 8003048:	0019      	movs	r1, r3
 800304a:	0010      	movs	r0, r2
 800304c:	f7fd f933 	bl	80002b6 <vListInsert>
 8003050:	e00e      	b.n	8003070 <prvSwitchTimerLists+0x8c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	2300      	movs	r3, #0
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	2300      	movs	r3, #0
 800305c:	2100      	movs	r1, #0
 800305e:	f7ff fda3 	bl	8002ba8 <xTimerGenericCommand>
 8003062:	0003      	movs	r3, r0
 8003064:	607b      	str	r3, [r7, #4]
                    configASSERT( xResult );
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <prvSwitchTimerLists+0x8c>
 800306c:	b672      	cpsid	i
 800306e:	e7fe      	b.n	800306e <prvSwitchTimerLists+0x8a>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003070:	4b09      	ldr	r3, [pc, #36]	; (8003098 <prvSwitchTimerLists+0xb4>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1b8      	bne.n	8002fec <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800307a:	4b07      	ldr	r3, [pc, #28]	; (8003098 <prvSwitchTimerLists+0xb4>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8003080:	4b06      	ldr	r3, [pc, #24]	; (800309c <prvSwitchTimerLists+0xb8>)
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	4b04      	ldr	r3, [pc, #16]	; (8003098 <prvSwitchTimerLists+0xb4>)
 8003086:	601a      	str	r2, [r3, #0]
        pxOverflowTimerList = pxTemp;
 8003088:	4b04      	ldr	r3, [pc, #16]	; (800309c <prvSwitchTimerLists+0xb8>)
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	601a      	str	r2, [r3, #0]
    }
 800308e:	46c0      	nop			; (mov r8, r8)
 8003090:	46bd      	mov	sp, r7
 8003092:	b006      	add	sp, #24
 8003094:	bd80      	pop	{r7, pc}
 8003096:	46c0      	nop			; (mov r8, r8)
 8003098:	20000160 	.word	0x20000160
 800309c:	20000164 	.word	0x20000164

080030a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80030a4:	f000 f8c4 	bl	8003230 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80030a8:	4b0f      	ldr	r3, [pc, #60]	; (80030e8 <prvCheckForValidListAndQueue+0x48>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d115      	bne.n	80030dc <prvCheckForValidListAndQueue+0x3c>
            {
                vListInitialise( &xActiveTimerList1 );
 80030b0:	4b0e      	ldr	r3, [pc, #56]	; (80030ec <prvCheckForValidListAndQueue+0x4c>)
 80030b2:	0018      	movs	r0, r3
 80030b4:	f7fd f8b4 	bl	8000220 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80030b8:	4b0d      	ldr	r3, [pc, #52]	; (80030f0 <prvCheckForValidListAndQueue+0x50>)
 80030ba:	0018      	movs	r0, r3
 80030bc:	f7fd f8b0 	bl	8000220 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80030c0:	4b0c      	ldr	r3, [pc, #48]	; (80030f4 <prvCheckForValidListAndQueue+0x54>)
 80030c2:	4a0a      	ldr	r2, [pc, #40]	; (80030ec <prvCheckForValidListAndQueue+0x4c>)
 80030c4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80030c6:	4b0c      	ldr	r3, [pc, #48]	; (80030f8 <prvCheckForValidListAndQueue+0x58>)
 80030c8:	4a09      	ldr	r2, [pc, #36]	; (80030f0 <prvCheckForValidListAndQueue+0x50>)
 80030ca:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80030cc:	2200      	movs	r2, #0
 80030ce:	210c      	movs	r1, #12
 80030d0:	2005      	movs	r0, #5
 80030d2:	f7fd f99f 	bl	8000414 <xQueueGenericCreate>
 80030d6:	0002      	movs	r2, r0
 80030d8:	4b03      	ldr	r3, [pc, #12]	; (80030e8 <prvCheckForValidListAndQueue+0x48>)
 80030da:	601a      	str	r2, [r3, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80030dc:	f000 f8ba 	bl	8003254 <vPortExitCritical>
    }
 80030e0:	46c0      	nop			; (mov r8, r8)
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	46c0      	nop			; (mov r8, r8)
 80030e8:	20000168 	.word	0x20000168
 80030ec:	20000138 	.word	0x20000138
 80030f0:	2000014c 	.word	0x2000014c
 80030f4:	20000160 	.word	0x20000160
 80030f8:	20000164 	.word	0x20000164

080030fc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	3b04      	subs	r3, #4
 800310c:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2280      	movs	r2, #128	; 0x80
 8003112:	0452      	lsls	r2, r2, #17
 8003114:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	3b04      	subs	r3, #4
 800311a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	3b04      	subs	r3, #4
 8003126:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 8003128:	4a08      	ldr	r2, [pc, #32]	; (800314c <pxPortInitialiseStack+0x50>)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                       /* R12, R3, R2 and R1. */
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	3b14      	subs	r3, #20
 8003132:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                       /* R11..R4. */
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	3b20      	subs	r3, #32
 800313e:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003140:	68fb      	ldr	r3, [r7, #12]
}
 8003142:	0018      	movs	r0, r3
 8003144:	46bd      	mov	sp, r7
 8003146:	b004      	add	sp, #16
 8003148:	bd80      	pop	{r7, pc}
 800314a:	46c0      	nop			; (mov r8, r8)
 800314c:	08003151 	.word	0x08003151

08003150 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8003156:	2300      	movs	r3, #0
 8003158:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800315a:	4b08      	ldr	r3, [pc, #32]	; (800317c <prvTaskExitError+0x2c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	3301      	adds	r3, #1
 8003160:	d001      	beq.n	8003166 <prvTaskExitError+0x16>
 8003162:	b672      	cpsid	i
 8003164:	e7fe      	b.n	8003164 <prvTaskExitError+0x14>
    portDISABLE_INTERRUPTS();
 8003166:	b672      	cpsid	i

    while( ulDummy == 0 )
 8003168:	46c0      	nop			; (mov r8, r8)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d0fc      	beq.n	800316a <prvTaskExitError+0x1a>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003170:	46c0      	nop			; (mov r8, r8)
 8003172:	46c0      	nop			; (mov r8, r8)
 8003174:	46bd      	mov	sp, r7
 8003176:	b002      	add	sp, #8
 8003178:	bd80      	pop	{r7, pc}
 800317a:	46c0      	nop			; (mov r8, r8)
 800317c:	20000004 	.word	0x20000004

08003180 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
    /* This function is no longer used, but retained for backward
     * compatibility. */
}
 8003184:	46c0      	nop			; (mov r8, r8)
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	0000      	movs	r0, r0
 800318c:	0000      	movs	r0, r0
	...

08003190 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
    /* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
     * table offset register that can be used to locate the initial stack value.
     * Not all M0 parts have the application vector table at address 0. */
    __asm volatile (
 8003190:	4a0b      	ldr	r2, [pc, #44]	; (80031c0 <pxCurrentTCBConst2>)
 8003192:	6813      	ldr	r3, [r2, #0]
 8003194:	6818      	ldr	r0, [r3, #0]
 8003196:	3020      	adds	r0, #32
 8003198:	f380 8809 	msr	PSP, r0
 800319c:	2002      	movs	r0, #2
 800319e:	f380 8814 	msr	CONTROL, r0
 80031a2:	f3bf 8f6f 	isb	sy
 80031a6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80031a8:	46ae      	mov	lr, r5
 80031aa:	bc08      	pop	{r3}
 80031ac:	bc04      	pop	{r2}
 80031ae:	b662      	cpsie	i
 80031b0:	4718      	bx	r3
 80031b2:	46c0      	nop			; (mov r8, r8)
 80031b4:	46c0      	nop			; (mov r8, r8)
 80031b6:	46c0      	nop			; (mov r8, r8)
 80031b8:	46c0      	nop			; (mov r8, r8)
 80031ba:	46c0      	nop			; (mov r8, r8)
 80031bc:	46c0      	nop			; (mov r8, r8)
 80031be:	46c0      	nop			; (mov r8, r8)

080031c0 <pxCurrentTCBConst2>:
 80031c0:	20000034 	.word	0x20000034
        "	bx   r3						\n"/* Finally, jump to the user defined task code. */
        "								\n"
        "	.align 4					\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB	  "
        );
}
 80031c4:	46c0      	nop			; (mov r8, r8)
 80031c6:	46c0      	nop			; (mov r8, r8)

080031c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80031cc:	4b0e      	ldr	r3, [pc, #56]	; (8003208 <xPortStartScheduler+0x40>)
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	4b0d      	ldr	r3, [pc, #52]	; (8003208 <xPortStartScheduler+0x40>)
 80031d2:	21ff      	movs	r1, #255	; 0xff
 80031d4:	0409      	lsls	r1, r1, #16
 80031d6:	430a      	orrs	r2, r1
 80031d8:	601a      	str	r2, [r3, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80031da:	4b0b      	ldr	r3, [pc, #44]	; (8003208 <xPortStartScheduler+0x40>)
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	4b0a      	ldr	r3, [pc, #40]	; (8003208 <xPortStartScheduler+0x40>)
 80031e0:	21ff      	movs	r1, #255	; 0xff
 80031e2:	0609      	lsls	r1, r1, #24
 80031e4:	430a      	orrs	r2, r1
 80031e6:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80031e8:	f000 f898 	bl	800331c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80031ec:	4b07      	ldr	r3, [pc, #28]	; (800320c <xPortStartScheduler+0x44>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vPortStartFirstTask();
 80031f2:	f7ff ffcd 	bl	8003190 <vPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80031f6:	f7fe ff69 	bl	80020cc <vTaskSwitchContext>
    prvTaskExitError();
 80031fa:	f7ff ffa9 	bl	8003150 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	0018      	movs	r0, r3
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	46c0      	nop			; (mov r8, r8)
 8003208:	e000ed20 	.word	0xe000ed20
 800320c:	20000004 	.word	0x20000004

08003210 <vPortYield>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003214:	4b05      	ldr	r3, [pc, #20]	; (800322c <vPortYield+0x1c>)
 8003216:	2280      	movs	r2, #128	; 0x80
 8003218:	0552      	lsls	r2, r2, #21
 800321a:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is completely
     * within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800321c:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8003220:	f3bf 8f6f 	isb	sy
}
 8003224:	46c0      	nop			; (mov r8, r8)
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	e000ed04 	.word	0xe000ed04

08003230 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8003234:	b672      	cpsid	i
    uxCriticalNesting++;
 8003236:	4b06      	ldr	r3, [pc, #24]	; (8003250 <vPortEnterCritical+0x20>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	1c5a      	adds	r2, r3, #1
 800323c:	4b04      	ldr	r3, [pc, #16]	; (8003250 <vPortEnterCritical+0x20>)
 800323e:	601a      	str	r2, [r3, #0]
    __asm volatile ( "dsb" ::: "memory" );
 8003240:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8003244:	f3bf 8f6f 	isb	sy
}
 8003248:	46c0      	nop			; (mov r8, r8)
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	46c0      	nop			; (mov r8, r8)
 8003250:	20000004 	.word	0x20000004

08003254 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003258:	4b09      	ldr	r3, [pc, #36]	; (8003280 <vPortExitCritical+0x2c>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d101      	bne.n	8003264 <vPortExitCritical+0x10>
 8003260:	b672      	cpsid	i
 8003262:	e7fe      	b.n	8003262 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8003264:	4b06      	ldr	r3, [pc, #24]	; (8003280 <vPortExitCritical+0x2c>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	1e5a      	subs	r2, r3, #1
 800326a:	4b05      	ldr	r3, [pc, #20]	; (8003280 <vPortExitCritical+0x2c>)
 800326c:	601a      	str	r2, [r3, #0]

    if( uxCriticalNesting == 0 )
 800326e:	4b04      	ldr	r3, [pc, #16]	; (8003280 <vPortExitCritical+0x2c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d100      	bne.n	8003278 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8003276:	b662      	cpsie	i
    }
}
 8003278:	46c0      	nop			; (mov r8, r8)
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	46c0      	nop			; (mov r8, r8)
 8003280:	20000004 	.word	0x20000004

08003284 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
    __asm volatile (
 8003284:	f3ef 8010 	mrs	r0, PRIMASK
 8003288:	b672      	cpsid	i
 800328a:	4770      	bx	lr
        " mrs r0, PRIMASK	\n"
        " cpsid i			\n"
        " bx lr				  "
        ::: "memory"
        );
}
 800328c:	46c0      	nop			; (mov r8, r8)
 800328e:	0018      	movs	r0, r3

08003290 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
    __asm volatile (
 8003290:	f380 8810 	msr	PRIMASK, r0
 8003294:	4770      	bx	lr
        " msr PRIMASK, r0	\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8003296:	46c0      	nop			; (mov r8, r8)
	...

080032a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80032a0:	f3ef 8009 	mrs	r0, PSP
 80032a4:	4b0e      	ldr	r3, [pc, #56]	; (80032e0 <pxCurrentTCBConst>)
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	3820      	subs	r0, #32
 80032aa:	6010      	str	r0, [r2, #0]
 80032ac:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80032ae:	4644      	mov	r4, r8
 80032b0:	464d      	mov	r5, r9
 80032b2:	4656      	mov	r6, sl
 80032b4:	465f      	mov	r7, fp
 80032b6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80032b8:	b508      	push	{r3, lr}
 80032ba:	b672      	cpsid	i
 80032bc:	f7fe ff06 	bl	80020cc <vTaskSwitchContext>
 80032c0:	b662      	cpsie	i
 80032c2:	bc0c      	pop	{r2, r3}
 80032c4:	6811      	ldr	r1, [r2, #0]
 80032c6:	6808      	ldr	r0, [r1, #0]
 80032c8:	3010      	adds	r0, #16
 80032ca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80032cc:	46a0      	mov	r8, r4
 80032ce:	46a9      	mov	r9, r5
 80032d0:	46b2      	mov	sl, r6
 80032d2:	46bb      	mov	fp, r7
 80032d4:	f380 8809 	msr	PSP, r0
 80032d8:	3820      	subs	r0, #32
 80032da:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80032dc:	4718      	bx	r3
 80032de:	46c0      	nop			; (mov r8, r8)

080032e0 <pxCurrentTCBConst>:
 80032e0:	20000034 	.word	0x20000034
        "	bx r3								\n"
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	  "
    );
}
 80032e4:	46c0      	nop			; (mov r8, r8)
 80032e6:	46c0      	nop			; (mov r8, r8)

080032e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80032ee:	f7ff ffc9 	bl	8003284 <ulSetInterruptMaskFromISR>
 80032f2:	0003      	movs	r3, r0
 80032f4:	607b      	str	r3, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80032f6:	f7fe fe2f 	bl	8001f58 <xTaskIncrementTick>
 80032fa:	1e03      	subs	r3, r0, #0
 80032fc:	d003      	beq.n	8003306 <SysTick_Handler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80032fe:	4b06      	ldr	r3, [pc, #24]	; (8003318 <SysTick_Handler+0x30>)
 8003300:	2280      	movs	r2, #128	; 0x80
 8003302:	0552      	lsls	r2, r2, #21
 8003304:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	0018      	movs	r0, r3
 800330a:	f7ff ffc1 	bl	8003290 <vClearInterruptMaskFromISR>
}
 800330e:	46c0      	nop			; (mov r8, r8)
 8003310:	46bd      	mov	sp, r7
 8003312:	b002      	add	sp, #8
 8003314:	bd80      	pop	{r7, pc}
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	e000ed04 	.word	0xe000ed04

0800331c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003320:	4b07      	ldr	r3, [pc, #28]	; (8003340 <vPortSetupTimerInterrupt+0x24>)
 8003322:	2200      	movs	r2, #0
 8003324:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003326:	4b07      	ldr	r3, [pc, #28]	; (8003344 <vPortSetupTimerInterrupt+0x28>)
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800332c:	4b06      	ldr	r3, [pc, #24]	; (8003348 <vPortSetupTimerInterrupt+0x2c>)
 800332e:	4a07      	ldr	r2, [pc, #28]	; (800334c <vPortSetupTimerInterrupt+0x30>)
 8003330:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8003332:	4b03      	ldr	r3, [pc, #12]	; (8003340 <vPortSetupTimerInterrupt+0x24>)
 8003334:	2207      	movs	r2, #7
 8003336:	601a      	str	r2, [r3, #0]
}
 8003338:	46c0      	nop			; (mov r8, r8)
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	46c0      	nop			; (mov r8, r8)
 8003340:	e000e010 	.word	0xe000e010
 8003344:	e000e018 	.word	0xe000e018
 8003348:	e000e014 	.word	0xe000e014
 800334c:	000752ff 	.word	0x000752ff

08003350 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 8003358:	2300      	movs	r3, #0
 800335a:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
        {
            if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2207      	movs	r2, #7
 8003360:	4013      	ands	r3, r2
 8003362:	d00e      	beq.n	8003382 <pvPortMalloc+0x32>
            {
                /* Byte alignment required. Check for overflow. */
                if ( (xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) )) > xWantedSize )
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2207      	movs	r2, #7
 8003368:	4393      	bics	r3, r2
 800336a:	3308      	adds	r3, #8
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	429a      	cmp	r2, r3
 8003370:	d205      	bcs.n	800337e <pvPortMalloc+0x2e>
                {
                    xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2207      	movs	r2, #7
 8003376:	4393      	bics	r3, r2
 8003378:	3308      	adds	r3, #8
 800337a:	607b      	str	r3, [r7, #4]
 800337c:	e001      	b.n	8003382 <pvPortMalloc+0x32>
                } 
                else 
                {
                    xWantedSize = 0;
 800337e:	2300      	movs	r3, #0
 8003380:	607b      	str	r3, [r7, #4]
                }
            }
        }
    #endif

    vTaskSuspendAll();
 8003382:	f7fe fd33 	bl	8001dec <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 8003386:	4b1f      	ldr	r3, [pc, #124]	; (8003404 <pvPortMalloc+0xb4>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d105      	bne.n	800339a <pvPortMalloc+0x4a>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800338e:	4b1e      	ldr	r3, [pc, #120]	; (8003408 <pvPortMalloc+0xb8>)
 8003390:	2207      	movs	r2, #7
 8003392:	4393      	bics	r3, r2
 8003394:	001a      	movs	r2, r3
 8003396:	4b1b      	ldr	r3, [pc, #108]	; (8003404 <pvPortMalloc+0xb4>)
 8003398:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) && /* valid size */
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d01a      	beq.n	80033d6 <pvPortMalloc+0x86>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80033a0:	4b1a      	ldr	r3, [pc, #104]	; (800340c <pvPortMalloc+0xbc>)
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	18d3      	adds	r3, r2, r3
        if( ( xWantedSize > 0 ) && /* valid size */
 80033a8:	4a19      	ldr	r2, [pc, #100]	; (8003410 <pvPortMalloc+0xc0>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d813      	bhi.n	80033d6 <pvPortMalloc+0x86>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 80033ae:	4b17      	ldr	r3, [pc, #92]	; (800340c <pvPortMalloc+0xbc>)
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	18d2      	adds	r2, r2, r3
 80033b6:	4b15      	ldr	r3, [pc, #84]	; (800340c <pvPortMalloc+0xbc>)
 80033b8:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d90b      	bls.n	80033d6 <pvPortMalloc+0x86>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 80033be:	4b11      	ldr	r3, [pc, #68]	; (8003404 <pvPortMalloc+0xb4>)
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	4b12      	ldr	r3, [pc, #72]	; (800340c <pvPortMalloc+0xbc>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	18d3      	adds	r3, r2, r3
 80033c8:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 80033ca:	4b10      	ldr	r3, [pc, #64]	; (800340c <pvPortMalloc+0xbc>)
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	18d2      	adds	r2, r2, r3
 80033d2:	4b0e      	ldr	r3, [pc, #56]	; (800340c <pvPortMalloc+0xbc>)
 80033d4:	601a      	str	r2, [r3, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d006      	beq.n	80033ea <pvPortMalloc+0x9a>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	0019      	movs	r1, r3
 80033e2:	2094      	movs	r0, #148	; 0x94
 80033e4:	f000 fd00 	bl	8003de8 <vTraceStoreMemMangEvent>
 80033e8:	e005      	b.n	80033f6 <pvPortMalloc+0xa6>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	0019      	movs	r1, r3
 80033f0:	20e8      	movs	r0, #232	; 0xe8
 80033f2:	f000 fcf9 	bl	8003de8 <vTraceStoreMemMangEvent>
    }
    ( void ) xTaskResumeAll();
 80033f6:	f7fe fd05 	bl	8001e04 <xTaskResumeAll>
                vApplicationMallocFailedHook();
            }
        }
    #endif

    return pvReturn;
 80033fa:	68fb      	ldr	r3, [r7, #12]
}
 80033fc:	0018      	movs	r0, r3
 80033fe:	46bd      	mov	sp, r7
 8003400:	b004      	add	sp, #16
 8003402:	bd80      	pop	{r7, pc}
 8003404:	20001d78 	.word	0x20001d78
 8003408:	2000017c 	.word	0x2000017c
 800340c:	20001d74 	.word	0x20001d74
 8003410:	00001bf7 	.word	0x00001bf7

08003414 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <vPortFree+0x12>
 8003422:	b672      	cpsid	i
 8003424:	e7fe      	b.n	8003424 <vPortFree+0x10>
}
 8003426:	46c0      	nop			; (mov r8, r8)
 8003428:	46bd      	mov	sp, r7
 800342a:	b002      	add	sp, #8
 800342c:	bd80      	pop	{r7, pc}

0800342e <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b082      	sub	sp, #8
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	0018      	movs	r0, r3
 800343a:	f7fe f8e9 	bl	8001610 <uxQueueGetQueueNumber>
 800343e:	0003      	movs	r3, r0
}
 8003440:	0018      	movs	r0, r3
 8003442:	46bd      	mov	sp, r7
 8003444:	b002      	add	sp, #8
 8003446:	bd80      	pop	{r7, pc}

08003448 <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	0018      	movs	r0, r3
 8003454:	f7fe f8f2 	bl	800163c <ucQueueGetQueueType>
 8003458:	0003      	movs	r3, r0
}
 800345a:	0018      	movs	r0, r3
 800345c:	46bd      	mov	sp, r7
 800345e:	b002      	add	sp, #8
 8003460:	bd80      	pop	{r7, pc}

08003462 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b082      	sub	sp, #8
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	0018      	movs	r0, r3
 800346e:	f7ff f807 	bl	8002480 <uxTaskGetTaskNumber>
 8003472:	0003      	movs	r3, r0
 8003474:	b29b      	uxth	r3, r3
}
 8003476:	0018      	movs	r0, r3
 8003478:	46bd      	mov	sp, r7
 800347a:	b002      	add	sp, #8
 800347c:	bd80      	pop	{r7, pc}

0800347e <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b082      	sub	sp, #8
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	0018      	movs	r0, r3
 800348a:	f7fe fff9 	bl	8002480 <uxTaskGetTaskNumber>
 800348e:	0003      	movs	r3, r0
 8003490:	0c1b      	lsrs	r3, r3, #16
 8003492:	b29b      	uxth	r3, r3
}
 8003494:	0018      	movs	r0, r3
 8003496:	46bd      	mov	sp, r7
 8003498:	b002      	add	sp, #8
 800349a:	bd80      	pop	{r7, pc}

0800349c <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	000a      	movs	r2, r1
 80034a6:	1cbb      	adds	r3, r7, #2
 80034a8:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	0018      	movs	r0, r3
 80034ae:	f7fe ffe7 	bl	8002480 <uxTaskGetTaskNumber>
 80034b2:	0003      	movs	r3, r0
 80034b4:	0c1b      	lsrs	r3, r3, #16
 80034b6:	041a      	lsls	r2, r3, #16
 80034b8:	1cbb      	adds	r3, r7, #2
 80034ba:	881b      	ldrh	r3, [r3, #0]
 80034bc:	431a      	orrs	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	0011      	movs	r1, r2
 80034c2:	0018      	movs	r0, r3
 80034c4:	f7fe fff0 	bl	80024a8 <vTaskSetTaskNumber>
}
 80034c8:	46c0      	nop			; (mov r8, r8)
 80034ca:	46bd      	mov	sp, r7
 80034cc:	b002      	add	sp, #8
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	000a      	movs	r2, r1
 80034da:	1cbb      	adds	r3, r7, #2
 80034dc:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	0018      	movs	r0, r3
 80034e2:	f7fe ffcd 	bl	8002480 <uxTaskGetTaskNumber>
 80034e6:	0003      	movs	r3, r0
 80034e8:	041b      	lsls	r3, r3, #16
 80034ea:	0c1a      	lsrs	r2, r3, #16
 80034ec:	1cbb      	adds	r3, r7, #2
 80034ee:	881b      	ldrh	r3, [r3, #0]
 80034f0:	041b      	lsls	r3, r3, #16
 80034f2:	431a      	orrs	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	0011      	movs	r1, r2
 80034f8:	0018      	movs	r0, r3
 80034fa:	f7fe ffd5 	bl	80024a8 <vTaskSetTaskNumber>
}
 80034fe:	46c0      	nop			; (mov r8, r8)
 8003500:	46bd      	mov	sp, r7
 8003502:	b002      	add	sp, #8
 8003504:	bd80      	pop	{r7, pc}

08003506 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b082      	sub	sp, #8
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	0018      	movs	r0, r3
 8003512:	f7ff ff8c 	bl	800342e <prvTraceGetQueueNumber>
 8003516:	0003      	movs	r3, r0
 8003518:	b29b      	uxth	r3, r3
}
 800351a:	0018      	movs	r0, r3
 800351c:	46bd      	mov	sp, r7
 800351e:	b002      	add	sp, #8
 8003520:	bd80      	pop	{r7, pc}

08003522 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b082      	sub	sp, #8
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	0018      	movs	r0, r3
 800352e:	f7ff ff7e 	bl	800342e <prvTraceGetQueueNumber>
 8003532:	0003      	movs	r3, r0
 8003534:	0c1b      	lsrs	r3, r3, #16
 8003536:	b29b      	uxth	r3, r3
}
 8003538:	0018      	movs	r0, r3
 800353a:	46bd      	mov	sp, r7
 800353c:	b002      	add	sp, #8
 800353e:	bd80      	pop	{r7, pc}

08003540 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	000a      	movs	r2, r1
 800354a:	1cbb      	adds	r3, r7, #2
 800354c:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	0018      	movs	r0, r3
 8003552:	f7ff ff6c 	bl	800342e <prvTraceGetQueueNumber>
 8003556:	0003      	movs	r3, r0
 8003558:	0c1b      	lsrs	r3, r3, #16
 800355a:	041a      	lsls	r2, r3, #16
 800355c:	1cbb      	adds	r3, r7, #2
 800355e:	881b      	ldrh	r3, [r3, #0]
 8003560:	431a      	orrs	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	0011      	movs	r1, r2
 8003566:	0018      	movs	r0, r3
 8003568:	f7fe f85c 	bl	8001624 <vQueueSetQueueNumber>
}
 800356c:	46c0      	nop			; (mov r8, r8)
 800356e:	46bd      	mov	sp, r7
 8003570:	b002      	add	sp, #8
 8003572:	bd80      	pop	{r7, pc}

08003574 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	000a      	movs	r2, r1
 800357e:	1cbb      	adds	r3, r7, #2
 8003580:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	0018      	movs	r0, r3
 8003586:	f7ff ff52 	bl	800342e <prvTraceGetQueueNumber>
 800358a:	0003      	movs	r3, r0
 800358c:	041b      	lsls	r3, r3, #16
 800358e:	0c1a      	lsrs	r2, r3, #16
 8003590:	1cbb      	adds	r3, r7, #2
 8003592:	881b      	ldrh	r3, [r3, #0]
 8003594:	041b      	lsls	r3, r3, #16
 8003596:	431a      	orrs	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	0011      	movs	r1, r2
 800359c:	0018      	movs	r0, r3
 800359e:	f7fe f841 	bl	8001624 <vQueueSetQueueNumber>
}
 80035a2:	46c0      	nop			; (mov r8, r8)
 80035a4:	46bd      	mov	sp, r7
 80035a6:	b002      	add	sp, #8
 80035a8:	bd80      	pop	{r7, pc}

080035aa <vTraceSetQueueName>:
 * Parameter name: the name to set (const string literal)
 *
 * Sets a name for Queue objects for display in Tracealyzer.
 ******************************************************************************/
void vTraceSetQueueName(void* object, const char* name)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b082      	sub	sp, #8
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
 80035b2:	6039      	str	r1, [r7, #0]
	prvTraceSetObjectName(TRACE_CLASS_QUEUE, TRACE_GET_OBJECT_NUMBER(QUEUE, object), name);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	0018      	movs	r0, r3
 80035b8:	f7ff ffa5 	bl	8003506 <prvTraceGetQueueNumberLow16>
 80035bc:	0003      	movs	r3, r0
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	683a      	ldr	r2, [r7, #0]
 80035c2:	0019      	movs	r1, r3
 80035c4:	2000      	movs	r0, #0
 80035c6:	f001 fa17 	bl	80049f8 <prvTraceSetObjectName>
}
 80035ca:	46c0      	nop			; (mov r8, r8)
 80035cc:	46bd      	mov	sp, r7
 80035ce:	b002      	add	sp, #8
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
 80035d6:	f7ff f81f 	bl	8002618 <xTaskGetCurrentTaskHandle>
 80035da:	0003      	movs	r3, r0
}
 80035dc:	0018      	movs	r0, r3
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
	...

080035e4 <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
	/* Make sure recorder data is initialized */
	vTraceInitialize();
 80035ec:	f000 fa58 	bl	8003aa0 <vTraceInitialize>
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}
#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */

	if (startOption == TRC_START)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d104      	bne.n	8003600 <vTraceEnable+0x1c>
	{
		prvTraceInitTimestamps();
 80035f6:	f000 fa45 	bl	8003a84 <prvTraceInitTimestamps>
		
		vTraceStart();
 80035fa:	f000 fa23 	bl	8003a44 <vTraceStart>
	}
	else if (startOption != TRC_INIT)
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
	}
}
 80035fe:	e00e      	b.n	800361e <vTraceEnable+0x3a>
	else if (startOption == TRC_START_AWAIT_HOST)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b02      	cmp	r3, #2
 8003604:	d104      	bne.n	8003610 <vTraceEnable+0x2c>
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
 8003606:	4b08      	ldr	r3, [pc, #32]	; (8003628 <vTraceEnable+0x44>)
 8003608:	0018      	movs	r0, r3
 800360a:	f001 fa61 	bl	8004ad0 <prvTraceError>
}
 800360e:	e006      	b.n	800361e <vTraceEnable+0x3a>
	else if (startOption != TRC_INIT)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <vTraceEnable+0x3a>
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
 8003616:	4b05      	ldr	r3, [pc, #20]	; (800362c <vTraceEnable+0x48>)
 8003618:	0018      	movs	r0, r3
 800361a:	f001 fa59 	bl	8004ad0 <prvTraceError>
}
 800361e:	46c0      	nop			; (mov r8, r8)
 8003620:	46bd      	mov	sp, r7
 8003622:	b002      	add	sp, #8
 8003624:	bd80      	pop	{r7, pc}
 8003626:	46c0      	nop			; (mov r8, r8)
 8003628:	08005c54 	.word	0x08005c54
 800362c:	08005c94 	.word	0x08005c94

08003630 <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
 8003634:	4b61      	ldr	r3, [pc, #388]	; (80037bc <vTraceInitObjectPropertyTable+0x18c>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2209      	movs	r2, #9
 800363a:	649a      	str	r2, [r3, #72]	; 0x48
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
 800363c:	4b5f      	ldr	r3, [pc, #380]	; (80037bc <vTraceInitObjectPropertyTable+0x18c>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2250      	movs	r2, #80	; 0x50
 8003642:	2104      	movs	r1, #4
 8003644:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
 8003646:	4b5d      	ldr	r3, [pc, #372]	; (80037bc <vTraceInitObjectPropertyTable+0x18c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2251      	movs	r2, #81	; 0x51
 800364c:	2106      	movs	r1, #6
 800364e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
 8003650:	4b5a      	ldr	r3, [pc, #360]	; (80037bc <vTraceInitObjectPropertyTable+0x18c>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2252      	movs	r2, #82	; 0x52
 8003656:	2102      	movs	r1, #2
 8003658:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
 800365a:	4b58      	ldr	r3, [pc, #352]	; (80037bc <vTraceInitObjectPropertyTable+0x18c>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2253      	movs	r2, #83	; 0x53
 8003660:	2108      	movs	r1, #8
 8003662:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
 8003664:	4b55      	ldr	r3, [pc, #340]	; (80037bc <vTraceInitObjectPropertyTable+0x18c>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2254      	movs	r2, #84	; 0x54
 800366a:	2104      	movs	r1, #4
 800366c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
 800366e:	4b53      	ldr	r3, [pc, #332]	; (80037bc <vTraceInitObjectPropertyTable+0x18c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2255      	movs	r2, #85	; 0x55
 8003674:	2102      	movs	r1, #2
 8003676:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
 8003678:	4b50      	ldr	r3, [pc, #320]	; (80037bc <vTraceInitObjectPropertyTable+0x18c>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2256      	movs	r2, #86	; 0x56
 800367e:	2102      	movs	r1, #2
 8003680:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
 8003682:	4b4e      	ldr	r3, [pc, #312]	; (80037bc <vTraceInitObjectPropertyTable+0x18c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2257      	movs	r2, #87	; 0x57
 8003688:	2102      	movs	r1, #2
 800368a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
 800368c:	4b4b      	ldr	r3, [pc, #300]	; (80037bc <vTraceInitObjectPropertyTable+0x18c>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2258      	movs	r2, #88	; 0x58
 8003692:	2102      	movs	r1, #2
 8003694:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
 8003696:	4b49      	ldr	r3, [pc, #292]	; (80037bc <vTraceInitObjectPropertyTable+0x18c>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	225c      	movs	r2, #92	; 0x5c
 800369c:	210f      	movs	r1, #15
 800369e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
 80036a0:	4b46      	ldr	r3, [pc, #280]	; (80037bc <vTraceInitObjectPropertyTable+0x18c>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	225d      	movs	r2, #93	; 0x5d
 80036a6:	210f      	movs	r1, #15
 80036a8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
 80036aa:	4b44      	ldr	r3, [pc, #272]	; (80037bc <vTraceInitObjectPropertyTable+0x18c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	225e      	movs	r2, #94	; 0x5e
 80036b0:	210f      	movs	r1, #15
 80036b2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
 80036b4:	4b41      	ldr	r3, [pc, #260]	; (80037bc <vTraceInitObjectPropertyTable+0x18c>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	225f      	movs	r2, #95	; 0x5f
 80036ba:	210f      	movs	r1, #15
 80036bc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
 80036be:	4b3f      	ldr	r3, [pc, #252]	; (80037bc <vTraceInitObjectPropertyTable+0x18c>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2260      	movs	r2, #96	; 0x60
 80036c4:	210f      	movs	r1, #15
 80036c6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
 80036c8:	4b3c      	ldr	r3, [pc, #240]	; (80037bc <vTraceInitObjectPropertyTable+0x18c>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2261      	movs	r2, #97	; 0x61
 80036ce:	210f      	movs	r1, #15
 80036d0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
 80036d2:	4b3a      	ldr	r3, [pc, #232]	; (80037bc <vTraceInitObjectPropertyTable+0x18c>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2262      	movs	r2, #98	; 0x62
 80036d8:	210f      	movs	r1, #15
 80036da:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
 80036dc:	4b37      	ldr	r3, [pc, #220]	; (80037bc <vTraceInitObjectPropertyTable+0x18c>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2263      	movs	r2, #99	; 0x63
 80036e2:	210f      	movs	r1, #15
 80036e4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
 80036e6:	4b35      	ldr	r3, [pc, #212]	; (80037bc <vTraceInitObjectPropertyTable+0x18c>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2264      	movs	r2, #100	; 0x64
 80036ec:	210f      	movs	r1, #15
 80036ee:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
 80036f0:	4b32      	ldr	r3, [pc, #200]	; (80037bc <vTraceInitObjectPropertyTable+0x18c>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2268      	movs	r2, #104	; 0x68
 80036f6:	2110      	movs	r1, #16
 80036f8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
 80036fa:	4b30      	ldr	r3, [pc, #192]	; (80037bc <vTraceInitObjectPropertyTable+0x18c>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2269      	movs	r2, #105	; 0x69
 8003700:	2110      	movs	r1, #16
 8003702:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
 8003704:	4b2d      	ldr	r3, [pc, #180]	; (80037bc <vTraceInitObjectPropertyTable+0x18c>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	226a      	movs	r2, #106	; 0x6a
 800370a:	2110      	movs	r1, #16
 800370c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
 800370e:	4b2b      	ldr	r3, [pc, #172]	; (80037bc <vTraceInitObjectPropertyTable+0x18c>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	226b      	movs	r2, #107	; 0x6b
 8003714:	2113      	movs	r1, #19
 8003716:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
 8003718:	4b28      	ldr	r3, [pc, #160]	; (80037bc <vTraceInitObjectPropertyTable+0x18c>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	226c      	movs	r2, #108	; 0x6c
 800371e:	2111      	movs	r1, #17
 8003720:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
 8003722:	4b26      	ldr	r3, [pc, #152]	; (80037bc <vTraceInitObjectPropertyTable+0x18c>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	226d      	movs	r2, #109	; 0x6d
 8003728:	2110      	movs	r1, #16
 800372a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
 800372c:	4b23      	ldr	r3, [pc, #140]	; (80037bc <vTraceInitObjectPropertyTable+0x18c>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	226e      	movs	r2, #110	; 0x6e
 8003732:	2113      	movs	r1, #19
 8003734:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
 8003736:	4b21      	ldr	r3, [pc, #132]	; (80037bc <vTraceInitObjectPropertyTable+0x18c>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	226f      	movs	r2, #111	; 0x6f
 800373c:	2113      	movs	r1, #19
 800373e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
 8003740:	4b1e      	ldr	r3, [pc, #120]	; (80037bc <vTraceInitObjectPropertyTable+0x18c>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2270      	movs	r2, #112	; 0x70
 8003746:	2113      	movs	r1, #19
 8003748:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
 800374a:	4b1c      	ldr	r3, [pc, #112]	; (80037bc <vTraceInitObjectPropertyTable+0x18c>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2274      	movs	r2, #116	; 0x74
 8003750:	2100      	movs	r1, #0
 8003752:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
 8003754:	4b19      	ldr	r3, [pc, #100]	; (80037bc <vTraceInitObjectPropertyTable+0x18c>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2276      	movs	r2, #118	; 0x76
 800375a:	2140      	movs	r1, #64	; 0x40
 800375c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
 800375e:	4b17      	ldr	r3, [pc, #92]	; (80037bc <vTraceInitObjectPropertyTable+0x18c>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2278      	movs	r2, #120	; 0x78
 8003764:	21a0      	movs	r1, #160	; 0xa0
 8003766:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
 8003768:	4b14      	ldr	r3, [pc, #80]	; (80037bc <vTraceInitObjectPropertyTable+0x18c>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	227a      	movs	r2, #122	; 0x7a
 800376e:	21c0      	movs	r1, #192	; 0xc0
 8003770:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
 8003772:	4b12      	ldr	r3, [pc, #72]	; (80037bc <vTraceInitObjectPropertyTable+0x18c>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	227c      	movs	r2, #124	; 0x7c
 8003778:	21ac      	movs	r1, #172	; 0xac
 800377a:	0049      	lsls	r1, r1, #1
 800377c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
 800377e:	4b0f      	ldr	r3, [pc, #60]	; (80037bc <vTraceInitObjectPropertyTable+0x18c>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	227e      	movs	r2, #126	; 0x7e
 8003784:	21ce      	movs	r1, #206	; 0xce
 8003786:	0049      	lsls	r1, r1, #1
 8003788:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
 800378a:	4b0c      	ldr	r3, [pc, #48]	; (80037bc <vTraceInitObjectPropertyTable+0x18c>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2280      	movs	r2, #128	; 0x80
 8003790:	21de      	movs	r1, #222	; 0xde
 8003792:	0049      	lsls	r1, r1, #1
 8003794:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
 8003796:	4b09      	ldr	r3, [pc, #36]	; (80037bc <vTraceInitObjectPropertyTable+0x18c>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2282      	movs	r2, #130	; 0x82
 800379c:	21f1      	movs	r1, #241	; 0xf1
 800379e:	0049      	lsls	r1, r1, #1
 80037a0:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
 80037a2:	4b06      	ldr	r3, [pc, #24]	; (80037bc <vTraceInitObjectPropertyTable+0x18c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2284      	movs	r2, #132	; 0x84
 80037a8:	2182      	movs	r1, #130	; 0x82
 80037aa:	0089      	lsls	r1, r1, #2
 80037ac:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
 80037ae:	4b03      	ldr	r3, [pc, #12]	; (80037bc <vTraceInitObjectPropertyTable+0x18c>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a03      	ldr	r2, [pc, #12]	; (80037c0 <vTraceInitObjectPropertyTable+0x190>)
 80037b4:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80037b6:	46c0      	nop			; (mov r8, r8)
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	20003488 	.word	0x20003488
 80037c0:	0000022e 	.word	0x0000022e

080037c4 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 80037ca:	2300      	movs	r3, #0
 80037cc:	607b      	str	r3, [r7, #4]

	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
 80037ce:	4b40      	ldr	r3, [pc, #256]	; (80038d0 <vTraceInitObjectHandleStack+0x10c>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	825a      	strh	r2, [r3, #18]
 80037d4:	4b3e      	ldr	r3, [pc, #248]	; (80038d0 <vTraceInitObjectHandleStack+0x10c>)
 80037d6:	8a5a      	ldrh	r2, [r3, #18]
 80037d8:	4b3d      	ldr	r3, [pc, #244]	; (80038d0 <vTraceInitObjectHandleStack+0x10c>)
 80037da:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
 80037dc:	4b3c      	ldr	r3, [pc, #240]	; (80038d0 <vTraceInitObjectHandleStack+0x10c>)
 80037de:	2204      	movs	r2, #4
 80037e0:	829a      	strh	r2, [r3, #20]
 80037e2:	4b3b      	ldr	r3, [pc, #236]	; (80038d0 <vTraceInitObjectHandleStack+0x10c>)
 80037e4:	8a9a      	ldrh	r2, [r3, #20]
 80037e6:	4b3a      	ldr	r3, [pc, #232]	; (80038d0 <vTraceInitObjectHandleStack+0x10c>)
 80037e8:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
 80037ea:	4b39      	ldr	r3, [pc, #228]	; (80038d0 <vTraceInitObjectHandleStack+0x10c>)
 80037ec:	220a      	movs	r2, #10
 80037ee:	82da      	strh	r2, [r3, #22]
 80037f0:	4b37      	ldr	r3, [pc, #220]	; (80038d0 <vTraceInitObjectHandleStack+0x10c>)
 80037f2:	8ada      	ldrh	r2, [r3, #22]
 80037f4:	4b36      	ldr	r3, [pc, #216]	; (80038d0 <vTraceInitObjectHandleStack+0x10c>)
 80037f6:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
 80037f8:	4b35      	ldr	r3, [pc, #212]	; (80038d0 <vTraceInitObjectHandleStack+0x10c>)
 80037fa:	220c      	movs	r2, #12
 80037fc:	831a      	strh	r2, [r3, #24]
 80037fe:	4b34      	ldr	r3, [pc, #208]	; (80038d0 <vTraceInitObjectHandleStack+0x10c>)
 8003800:	8b1a      	ldrh	r2, [r3, #24]
 8003802:	4b33      	ldr	r3, [pc, #204]	; (80038d0 <vTraceInitObjectHandleStack+0x10c>)
 8003804:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
 8003806:	4b32      	ldr	r3, [pc, #200]	; (80038d0 <vTraceInitObjectHandleStack+0x10c>)
 8003808:	2214      	movs	r2, #20
 800380a:	835a      	strh	r2, [r3, #26]
 800380c:	4b30      	ldr	r3, [pc, #192]	; (80038d0 <vTraceInitObjectHandleStack+0x10c>)
 800380e:	8b5a      	ldrh	r2, [r3, #26]
 8003810:	4b2f      	ldr	r3, [pc, #188]	; (80038d0 <vTraceInitObjectHandleStack+0x10c>)
 8003812:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
 8003814:	4b2e      	ldr	r3, [pc, #184]	; (80038d0 <vTraceInitObjectHandleStack+0x10c>)
 8003816:	2218      	movs	r2, #24
 8003818:	839a      	strh	r2, [r3, #28]
 800381a:	4b2d      	ldr	r3, [pc, #180]	; (80038d0 <vTraceInitObjectHandleStack+0x10c>)
 800381c:	8b9a      	ldrh	r2, [r3, #28]
 800381e:	4b2c      	ldr	r3, [pc, #176]	; (80038d0 <vTraceInitObjectHandleStack+0x10c>)
 8003820:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
 8003822:	4b2b      	ldr	r3, [pc, #172]	; (80038d0 <vTraceInitObjectHandleStack+0x10c>)
 8003824:	221a      	movs	r2, #26
 8003826:	83da      	strh	r2, [r3, #30]
 8003828:	4b29      	ldr	r3, [pc, #164]	; (80038d0 <vTraceInitObjectHandleStack+0x10c>)
 800382a:	8bda      	ldrh	r2, [r3, #30]
 800382c:	4b28      	ldr	r3, [pc, #160]	; (80038d0 <vTraceInitObjectHandleStack+0x10c>)
 800382e:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
 8003830:	4b27      	ldr	r3, [pc, #156]	; (80038d0 <vTraceInitObjectHandleStack+0x10c>)
 8003832:	221c      	movs	r2, #28
 8003834:	841a      	strh	r2, [r3, #32]
 8003836:	4b26      	ldr	r3, [pc, #152]	; (80038d0 <vTraceInitObjectHandleStack+0x10c>)
 8003838:	8c1a      	ldrh	r2, [r3, #32]
 800383a:	4b25      	ldr	r3, [pc, #148]	; (80038d0 <vTraceInitObjectHandleStack+0x10c>)
 800383c:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
 800383e:	4b24      	ldr	r3, [pc, #144]	; (80038d0 <vTraceInitObjectHandleStack+0x10c>)
 8003840:	221e      	movs	r2, #30
 8003842:	845a      	strh	r2, [r3, #34]	; 0x22
 8003844:	4b22      	ldr	r3, [pc, #136]	; (80038d0 <vTraceInitObjectHandleStack+0x10c>)
 8003846:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8003848:	4b21      	ldr	r3, [pc, #132]	; (80038d0 <vTraceInitObjectHandleStack+0x10c>)
 800384a:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
 800384c:	4b20      	ldr	r3, [pc, #128]	; (80038d0 <vTraceInitObjectHandleStack+0x10c>)
 800384e:	2203      	movs	r2, #3
 8003850:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
 8003852:	4b1f      	ldr	r3, [pc, #124]	; (80038d0 <vTraceInitObjectHandleStack+0x10c>)
 8003854:	2209      	movs	r2, #9
 8003856:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
 8003858:	4b1d      	ldr	r3, [pc, #116]	; (80038d0 <vTraceInitObjectHandleStack+0x10c>)
 800385a:	220b      	movs	r2, #11
 800385c:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
 800385e:	4b1c      	ldr	r3, [pc, #112]	; (80038d0 <vTraceInitObjectHandleStack+0x10c>)
 8003860:	2213      	movs	r2, #19
 8003862:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
 8003864:	4b1a      	ldr	r3, [pc, #104]	; (80038d0 <vTraceInitObjectHandleStack+0x10c>)
 8003866:	2217      	movs	r2, #23
 8003868:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
 800386a:	4b19      	ldr	r3, [pc, #100]	; (80038d0 <vTraceInitObjectHandleStack+0x10c>)
 800386c:	2219      	movs	r2, #25
 800386e:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
 8003870:	4b17      	ldr	r3, [pc, #92]	; (80038d0 <vTraceInitObjectHandleStack+0x10c>)
 8003872:	221b      	movs	r2, #27
 8003874:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
 8003876:	4b16      	ldr	r3, [pc, #88]	; (80038d0 <vTraceInitObjectHandleStack+0x10c>)
 8003878:	221d      	movs	r2, #29
 800387a:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
 800387c:	4b14      	ldr	r3, [pc, #80]	; (80038d0 <vTraceInitObjectHandleStack+0x10c>)
 800387e:	221f      	movs	r2, #31
 8003880:	869a      	strh	r2, [r3, #52]	; 0x34

	for (i = 0; i < TRACE_NCLASSES; i++)
 8003882:	2300      	movs	r3, #0
 8003884:	607b      	str	r3, [r7, #4]
 8003886:	e00a      	b.n	800389e <vTraceInitObjectHandleStack+0xda>
	{
		objectHandleStacks.handleCountWaterMarksOfClass[i] = 0;
 8003888:	4a11      	ldr	r2, [pc, #68]	; (80038d0 <vTraceInitObjectHandleStack+0x10c>)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	3318      	adds	r3, #24
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	18d3      	adds	r3, r2, r3
 8003892:	3306      	adds	r3, #6
 8003894:	2200      	movs	r2, #0
 8003896:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < TRACE_NCLASSES; i++)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	3301      	adds	r3, #1
 800389c:	607b      	str	r3, [r7, #4]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2b08      	cmp	r3, #8
 80038a2:	d9f1      	bls.n	8003888 <vTraceInitObjectHandleStack+0xc4>
	}

	for (i = 0; i < TRACE_KERNEL_OBJECT_COUNT; i++)
 80038a4:	2300      	movs	r3, #0
 80038a6:	607b      	str	r3, [r7, #4]
 80038a8:	e009      	b.n	80038be <vTraceInitObjectHandleStack+0xfa>
	{
		objectHandleStacks.objectHandles[i] = 0;
 80038aa:	4a09      	ldr	r2, [pc, #36]	; (80038d0 <vTraceInitObjectHandleStack+0x10c>)
 80038ac:	2148      	movs	r1, #72	; 0x48
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	18d3      	adds	r3, r2, r3
 80038b2:	185b      	adds	r3, r3, r1
 80038b4:	2200      	movs	r2, #0
 80038b6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TRACE_KERNEL_OBJECT_COUNT; i++)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3301      	adds	r3, #1
 80038bc:	607b      	str	r3, [r7, #4]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b1f      	cmp	r3, #31
 80038c2:	d9f2      	bls.n	80038aa <vTraceInitObjectHandleStack+0xe6>
	}
}
 80038c4:	46c0      	nop			; (mov r8, r8)
 80038c6:	46c0      	nop			; (mov r8, r8)
 80038c8:	46bd      	mov	sp, r7
 80038ca:	b002      	add	sp, #8
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	46c0      	nop			; (mov r8, r8)
 80038d0:	20001da8 	.word	0x20001da8

080038d4 <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	0002      	movs	r2, r0
 80038dc:	1dfb      	adds	r3, r7, #7
 80038de:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
 80038e0:	1dfb      	adds	r3, r7, #7
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	2b08      	cmp	r3, #8
 80038e6:	d816      	bhi.n	8003916 <pszTraceGetErrorNotEnoughHandles+0x42>
 80038e8:	009a      	lsls	r2, r3, #2
 80038ea:	4b0d      	ldr	r3, [pc, #52]	; (8003920 <pszTraceGetErrorNotEnoughHandles+0x4c>)
 80038ec:	18d3      	adds	r3, r2, r3
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
 80038f2:	4b0c      	ldr	r3, [pc, #48]	; (8003924 <pszTraceGetErrorNotEnoughHandles+0x50>)
 80038f4:	e010      	b.n	8003918 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
 80038f6:	4b0c      	ldr	r3, [pc, #48]	; (8003928 <pszTraceGetErrorNotEnoughHandles+0x54>)
 80038f8:	e00e      	b.n	8003918 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
 80038fa:	4b0c      	ldr	r3, [pc, #48]	; (800392c <pszTraceGetErrorNotEnoughHandles+0x58>)
 80038fc:	e00c      	b.n	8003918 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
 80038fe:	4b0c      	ldr	r3, [pc, #48]	; (8003930 <pszTraceGetErrorNotEnoughHandles+0x5c>)
 8003900:	e00a      	b.n	8003918 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
 8003902:	4b0c      	ldr	r3, [pc, #48]	; (8003934 <pszTraceGetErrorNotEnoughHandles+0x60>)
 8003904:	e008      	b.n	8003918 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
 8003906:	4b0c      	ldr	r3, [pc, #48]	; (8003938 <pszTraceGetErrorNotEnoughHandles+0x64>)
 8003908:	e006      	b.n	8003918 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
 800390a:	4b0c      	ldr	r3, [pc, #48]	; (800393c <pszTraceGetErrorNotEnoughHandles+0x68>)
 800390c:	e004      	b.n	8003918 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
 800390e:	4b0c      	ldr	r3, [pc, #48]	; (8003940 <pszTraceGetErrorNotEnoughHandles+0x6c>)
 8003910:	e002      	b.n	8003918 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
 8003912:	4b0c      	ldr	r3, [pc, #48]	; (8003944 <pszTraceGetErrorNotEnoughHandles+0x70>)
 8003914:	e000      	b.n	8003918 <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
 8003916:	4b0c      	ldr	r3, [pc, #48]	; (8003948 <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
 8003918:	0018      	movs	r0, r3
 800391a:	46bd      	mov	sp, r7
 800391c:	b002      	add	sp, #8
 800391e:	bd80      	pop	{r7, pc}
 8003920:	08007094 	.word	0x08007094
 8003924:	08005cc8 	.word	0x08005cc8
 8003928:	08005d10 	.word	0x08005d10
 800392c:	08005d58 	.word	0x08005d58
 8003930:	08005dac 	.word	0x08005dac
 8003934:	08005df8 	.word	0x08005df8
 8003938:	08005e44 	.word	0x08005e44
 800393c:	08005e90 	.word	0x08005e90
 8003940:	08005ee4 	.word	0x08005ee4
 8003944:	08005f3c 	.word	0x08005f3c
 8003948:	08005f98 	.word	0x08005f98

0800394c <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
 800394c:	b5b0      	push	{r4, r5, r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
 8003952:	2317      	movs	r3, #23
 8003954:	18fb      	adds	r3, r7, r3
 8003956:	2200      	movs	r2, #0
 8003958:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == NULL)
 800395a:	4b35      	ldr	r3, [pc, #212]	; (8003a30 <uiTraceStart+0xe4>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d10b      	bne.n	800397a <uiTraceStart+0x2e>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
 8003962:	4b33      	ldr	r3, [pc, #204]	; (8003a30 <uiTraceStart+0xe4>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d105      	bne.n	8003976 <uiTraceStart+0x2a>
 800396a:	4b32      	ldr	r3, [pc, #200]	; (8003a34 <uiTraceStart+0xe8>)
 800396c:	0018      	movs	r0, r3
 800396e:	f001 f8af 	bl	8004ad0 <prvTraceError>
 8003972:	2300      	movs	r3, #0
 8003974:	e057      	b.n	8003a26 <uiTraceStart+0xda>
		return 0;
 8003976:	2300      	movs	r3, #0
 8003978:	e055      	b.n	8003a26 <uiTraceStart+0xda>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
 800397a:	4b2d      	ldr	r3, [pc, #180]	; (8003a30 <uiTraceStart+0xe4>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003980:	2b01      	cmp	r3, #1
 8003982:	d101      	bne.n	8003988 <uiTraceStart+0x3c>
		return 1; /* Already running */
 8003984:	2301      	movs	r3, #1
 8003986:	e04e      	b.n	8003a26 <uiTraceStart+0xda>

	if (traceErrorMessage == NULL)
 8003988:	4b2b      	ldr	r3, [pc, #172]	; (8003a38 <uiTraceStart+0xec>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d147      	bne.n	8003a20 <uiTraceStart+0xd4>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003990:	f3ef 8310 	mrs	r3, PRIMASK
 8003994:	60bb      	str	r3, [r7, #8]
  return(result);
 8003996:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
 8003998:	613b      	str	r3, [r7, #16]
 800399a:	2301      	movs	r3, #1
 800399c:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f383 8810 	msr	PRIMASK, r3
}
 80039a4:	46c0      	nop			; (mov r8, r8)
 80039a6:	4b25      	ldr	r3, [pc, #148]	; (8003a3c <uiTraceStart+0xf0>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	1c5a      	adds	r2, r3, #1
 80039ac:	4b23      	ldr	r3, [pc, #140]	; (8003a3c <uiTraceStart+0xf0>)
 80039ae:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
 80039b0:	4b1f      	ldr	r3, [pc, #124]	; (8003a30 <uiTraceStart+0xe4>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2201      	movs	r2, #1
 80039b6:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
 80039b8:	f7ff fe0b 	bl	80035d2 <prvTraceGetCurrentTaskHandle>
 80039bc:	0003      	movs	r3, r0
 80039be:	0018      	movs	r0, r3
 80039c0:	f7ff fd4f 	bl	8003462 <prvTraceGetTaskNumberLow16>
 80039c4:	0003      	movs	r3, r0
 80039c6:	001a      	movs	r2, r3
 80039c8:	2517      	movs	r5, #23
 80039ca:	197b      	adds	r3, r7, r5
 80039cc:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
 80039ce:	197b      	adds	r3, r7, r5
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d113      	bne.n	80039fe <uiTraceStart+0xb2>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
 80039d6:	197c      	adds	r4, r7, r5
 80039d8:	2003      	movs	r0, #3
 80039da:	f000 fefb 	bl	80047d4 <prvTraceGetObjectHandle>
 80039de:	0003      	movs	r3, r0
 80039e0:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
 80039e2:	4a17      	ldr	r2, [pc, #92]	; (8003a40 <uiTraceStart+0xf4>)
 80039e4:	197b      	adds	r3, r7, r5
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	0019      	movs	r1, r3
 80039ea:	2003      	movs	r0, #3
 80039ec:	f001 f804 	bl	80049f8 <prvTraceSetObjectName>

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
 80039f0:	197b      	adds	r3, r7, r5
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	2200      	movs	r2, #0
 80039f6:	0019      	movs	r1, r3
 80039f8:	2003      	movs	r0, #3
 80039fa:	f000 fcfb 	bl	80043f4 <prvTraceSetPriorityProperty>
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
 80039fe:	2317      	movs	r3, #23
 8003a00:	18fb      	adds	r3, r7, r3
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	0018      	movs	r0, r3
 8003a06:	f000 fc73 	bl	80042f0 <prvTraceStoreTaskswitch>
		trcCRITICAL_SECTION_END();
 8003a0a:	4b0c      	ldr	r3, [pc, #48]	; (8003a3c <uiTraceStart+0xf0>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	1e5a      	subs	r2, r3, #1
 8003a10:	4b0a      	ldr	r3, [pc, #40]	; (8003a3c <uiTraceStart+0xf0>)
 8003a12:	601a      	str	r2, [r3, #0]
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f383 8810 	msr	PRIMASK, r3
}
 8003a1e:	46c0      	nop			; (mov r8, r8)
	}

	return RecorderDataPtr->recorderActive;
 8003a20:	4b03      	ldr	r3, [pc, #12]	; (8003a30 <uiTraceStart+0xe4>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8003a26:	0018      	movs	r0, r3
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	b006      	add	sp, #24
 8003a2c:	bdb0      	pop	{r4, r5, r7, pc}
 8003a2e:	46c0      	nop			; (mov r8, r8)
 8003a30:	20003488 	.word	0x20003488
 8003a34:	08005fc8 	.word	0x08005fc8
 8003a38:	20001e10 	.word	0x20001e10
 8003a3c:	20001d90 	.word	0x20001d90
 8003a40:	0800600c 	.word	0x0800600c

08003a44 <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
 8003a48:	f7ff ff80 	bl	800394c <uiTraceStart>
}
 8003a4c:	46c0      	nop			; (mov r8, r8)
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
	...

08003a54 <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
 8003a58:	4b08      	ldr	r3, [pc, #32]	; (8003a7c <vTraceStop+0x28>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d003      	beq.n	8003a68 <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
 8003a60:	4b06      	ldr	r3, [pc, #24]	; (8003a7c <vTraceStop+0x28>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2200      	movs	r2, #0
 8003a66:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8003a68:	4b05      	ldr	r3, [pc, #20]	; (8003a80 <vTraceStop+0x2c>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d002      	beq.n	8003a76 <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 8003a70:	4b03      	ldr	r3, [pc, #12]	; (8003a80 <vTraceStop+0x2c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4798      	blx	r3
	}
}
 8003a76:	46c0      	nop			; (mov r8, r8)
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	20003488 	.word	0x20003488
 8003a80:	20001d9c 	.word	0x20001d9c

08003a84 <prvTraceInitTimestamps>:
* function must be called AFTER the clock is initialized to set a proper
* initial timestamp value. If vTraceEnable(...) is only called AFTER clock is
* initialized, there is no need to call this function.
******************************************************************************/
void prvTraceInitTimestamps(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0
	init_hwtc_count = TRC_HWTC_COUNT;
 8003a88:	4b03      	ldr	r3, [pc, #12]	; (8003a98 <prvTraceInitTimestamps+0x14>)
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	4b03      	ldr	r3, [pc, #12]	; (8003a9c <prvTraceInitTimestamps+0x18>)
 8003a8e:	601a      	str	r2, [r3, #0]
}
 8003a90:	46c0      	nop			; (mov r8, r8)
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	46c0      	nop			; (mov r8, r8)
 8003a98:	e000e018 	.word	0xe000e018
 8003a9c:	20001da0 	.word	0x20001da0

08003aa0 <vTraceInitialize>:
* Only needs to be called manually if traced objects are created before the
* trace recorder can be enabled
* See TRC_CFG_RECORDER_DATA_INIT in trcConfig.h for more information.
******************************************************************************/
void vTraceInitialize()
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	uint32_t i;
#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */

	if (RecorderInitialized != 0)
 8003aa4:	4b7a      	ldr	r3, [pc, #488]	; (8003c90 <vTraceInitialize+0x1f0>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d000      	beq.n	8003aae <vTraceInitialize+0xe>
 8003aac:	e0ec      	b.n	8003c88 <vTraceInitialize+0x1e8>
	{
		return;
	}

	/* These are set on init so they aren't overwritten by late initialization values. */
	CurrentFilterMask = 0xFFFF;
 8003aae:	4b79      	ldr	r3, [pc, #484]	; (8003c94 <vTraceInitialize+0x1f4>)
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	4252      	negs	r2, r2
 8003ab4:	801a      	strh	r2, [r3, #0]
	CurrentFilterGroup = FilterGroup0;
 8003ab6:	4b78      	ldr	r3, [pc, #480]	; (8003c98 <vTraceInitialize+0x1f8>)
 8003ab8:	2201      	movs	r2, #1
 8003aba:	801a      	strh	r2, [r3, #0]
	traceErrorMessage = 0;
 8003abc:	4b77      	ldr	r3, [pc, #476]	; (8003c9c <vTraceInitialize+0x1fc>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	601a      	str	r2, [r3, #0]
		tasksInStackMonitor[i].uiPreviousLowMark = 0;
	}
#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */

#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
 8003ac2:	4b77      	ldr	r3, [pc, #476]	; (8003ca0 <vTraceInitialize+0x200>)
 8003ac4:	4a77      	ldr	r2, [pc, #476]	; (8003ca4 <vTraceInitialize+0x204>)
 8003ac6:	601a      	str	r2, [r3, #0]
		prvTraceError("Recorder data pointer not set! Use vTraceSetRecorderDataBuffer().");
		return;
	}
#endif

	init_hwtc_count = TRC_HWTC_COUNT;
 8003ac8:	4b77      	ldr	r3, [pc, #476]	; (8003ca8 <vTraceInitialize+0x208>)
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	4b77      	ldr	r3, [pc, #476]	; (8003cac <vTraceInitialize+0x20c>)
 8003ace:	601a      	str	r2, [r3, #0]

	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
 8003ad0:	4b73      	ldr	r3, [pc, #460]	; (8003ca0 <vTraceInitialize+0x200>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a76      	ldr	r2, [pc, #472]	; (8003cb0 <vTraceInitialize+0x210>)
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	0018      	movs	r0, r3
 8003ada:	f002 f871 	bl	8005bc0 <memset>

	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
 8003ade:	4b70      	ldr	r3, [pc, #448]	; (8003ca0 <vTraceInitialize+0x200>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a74      	ldr	r2, [pc, #464]	; (8003cb4 <vTraceInitialize+0x214>)
 8003ae4:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
 8003ae6:	4b6e      	ldr	r3, [pc, #440]	; (8003ca0 <vTraceInitialize+0x200>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2207      	movs	r2, #7
 8003aec:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
 8003aee:	4b6c      	ldr	r3, [pc, #432]	; (8003ca0 <vTraceInitialize+0x200>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2200      	movs	r2, #0
 8003af4:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
 8003af6:	4b6a      	ldr	r3, [pc, #424]	; (8003ca0 <vTraceInitialize+0x200>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a6d      	ldr	r2, [pc, #436]	; (8003cb0 <vTraceInitialize+0x210>)
 8003afc:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
 8003afe:	4b68      	ldr	r3, [pc, #416]	; (8003ca0 <vTraceInitialize+0x200>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	22fa      	movs	r2, #250	; 0xfa
 8003b04:	0092      	lsls	r2, r2, #2
 8003b06:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t)0xF0F0F0F0;
 8003b08:	4b65      	ldr	r3, [pc, #404]	; (8003ca0 <vTraceInitialize+0x200>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a6a      	ldr	r2, [pc, #424]	; (8003cb8 <vTraceInitialize+0x218>)
 8003b0e:	641a      	str	r2, [r3, #64]	; 0x40
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
 8003b10:	4b63      	ldr	r3, [pc, #396]	; (8003ca0 <vTraceInitialize+0x200>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2200      	movs	r2, #0
 8003b16:	645a      	str	r2, [r3, #68]	; 0x44
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
 8003b18:	4b61      	ldr	r3, [pc, #388]	; (8003ca0 <vTraceInitialize+0x200>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
 8003b20:	f7ff fd86 	bl	8003630 <vTraceInitObjectPropertyTable>

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
 8003b24:	4b5e      	ldr	r3, [pc, #376]	; (8003ca0 <vTraceInitialize+0x200>)
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	23ae      	movs	r3, #174	; 0xae
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4963      	ldr	r1, [pc, #396]	; (8003cbc <vTraceInitialize+0x21c>)
 8003b2e:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
 8003b30:	4b5b      	ldr	r3, [pc, #364]	; (8003ca0 <vTraceInitialize+0x200>)
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	23af      	movs	r3, #175	; 0xaf
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	21c8      	movs	r1, #200	; 0xc8
 8003b3a:	0089      	lsls	r1, r1, #2
 8003b3c:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
 8003b3e:	4b58      	ldr	r3, [pc, #352]	; (8003ca0 <vTraceInitialize+0x200>)
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	23b0      	movs	r3, #176	; 0xb0
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	2101      	movs	r1, #1
 8003b48:	50d1      	str	r1, [r2, r3]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
 8003b4a:	4b55      	ldr	r3, [pc, #340]	; (8003ca0 <vTraceInitialize+0x200>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a5c      	ldr	r2, [pc, #368]	; (8003cc0 <vTraceInitialize+0x220>)
 8003b50:	495c      	ldr	r1, [pc, #368]	; (8003cc4 <vTraceInitialize+0x224>)
 8003b52:	5099      	str	r1, [r3, r2]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
 8003b54:	4b52      	ldr	r3, [pc, #328]	; (8003ca0 <vTraceInitialize+0x200>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	22ce      	movs	r2, #206	; 0xce
 8003b5a:	00d2      	lsls	r2, r2, #3
 8003b5c:	4694      	mov	ip, r2
 8003b5e:	4463      	add	r3, ip
 8003b60:	4959      	ldr	r1, [pc, #356]	; (8003cc8 <vTraceInitialize+0x228>)
 8003b62:	2250      	movs	r2, #80	; 0x50
 8003b64:	0018      	movs	r0, r3
 8003b66:	f000 ff23 	bl	80049b0 <prvStrncpy>
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
 8003b6a:	4b4d      	ldr	r3, [pc, #308]	; (8003ca0 <vTraceInitialize+0x200>)
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	23d8      	movs	r3, #216	; 0xd8
 8003b70:	00db      	lsls	r3, r3, #3
 8003b72:	4956      	ldr	r1, [pc, #344]	; (8003ccc <vTraceInitialize+0x22c>)
 8003b74:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->endmarker0 = 0x0A;
 8003b76:	4b4a      	ldr	r3, [pc, #296]	; (8003ca0 <vTraceInitialize+0x200>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a55      	ldr	r2, [pc, #340]	; (8003cd0 <vTraceInitialize+0x230>)
 8003b7c:	210a      	movs	r1, #10
 8003b7e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
 8003b80:	4b47      	ldr	r3, [pc, #284]	; (8003ca0 <vTraceInitialize+0x200>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a53      	ldr	r2, [pc, #332]	; (8003cd4 <vTraceInitialize+0x234>)
 8003b86:	210b      	movs	r1, #11
 8003b88:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
 8003b8a:	4b45      	ldr	r3, [pc, #276]	; (8003ca0 <vTraceInitialize+0x200>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a52      	ldr	r2, [pc, #328]	; (8003cd8 <vTraceInitialize+0x238>)
 8003b90:	210c      	movs	r1, #12
 8003b92:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
 8003b94:	4b42      	ldr	r3, [pc, #264]	; (8003ca0 <vTraceInitialize+0x200>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a50      	ldr	r2, [pc, #320]	; (8003cdc <vTraceInitialize+0x23c>)
 8003b9a:	210d      	movs	r1, #13
 8003b9c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
 8003b9e:	4b40      	ldr	r3, [pc, #256]	; (8003ca0 <vTraceInitialize+0x200>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a4f      	ldr	r2, [pc, #316]	; (8003ce0 <vTraceInitialize+0x240>)
 8003ba4:	2171      	movs	r1, #113	; 0x71
 8003ba6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
 8003ba8:	4b3d      	ldr	r3, [pc, #244]	; (8003ca0 <vTraceInitialize+0x200>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a4d      	ldr	r2, [pc, #308]	; (8003ce4 <vTraceInitialize+0x244>)
 8003bae:	2172      	movs	r1, #114	; 0x72
 8003bb0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
 8003bb2:	4b3b      	ldr	r3, [pc, #236]	; (8003ca0 <vTraceInitialize+0x200>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a4c      	ldr	r2, [pc, #304]	; (8003ce8 <vTraceInitialize+0x248>)
 8003bb8:	2173      	movs	r1, #115	; 0x73
 8003bba:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
 8003bbc:	4b38      	ldr	r3, [pc, #224]	; (8003ca0 <vTraceInitialize+0x200>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a4a      	ldr	r2, [pc, #296]	; (8003cec <vTraceInitialize+0x24c>)
 8003bc2:	2174      	movs	r1, #116	; 0x74
 8003bc4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
 8003bc6:	4b36      	ldr	r3, [pc, #216]	; (8003ca0 <vTraceInitialize+0x200>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a49      	ldr	r2, [pc, #292]	; (8003cf0 <vTraceInitialize+0x250>)
 8003bcc:	21f1      	movs	r1, #241	; 0xf1
 8003bce:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
 8003bd0:	4b33      	ldr	r3, [pc, #204]	; (8003ca0 <vTraceInitialize+0x200>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a47      	ldr	r2, [pc, #284]	; (8003cf4 <vTraceInitialize+0x254>)
 8003bd6:	21f2      	movs	r1, #242	; 0xf2
 8003bd8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
 8003bda:	4b31      	ldr	r3, [pc, #196]	; (8003ca0 <vTraceInitialize+0x200>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a46      	ldr	r2, [pc, #280]	; (8003cf8 <vTraceInitialize+0x258>)
 8003be0:	21f3      	movs	r1, #243	; 0xf3
 8003be2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
 8003be4:	4b2e      	ldr	r3, [pc, #184]	; (8003ca0 <vTraceInitialize+0x200>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a44      	ldr	r2, [pc, #272]	; (8003cfc <vTraceInitialize+0x25c>)
 8003bea:	21f4      	movs	r1, #244	; 0xf4
 8003bec:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS)+1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
 8003bee:	f7ff fde9 	bl	80037c4 <vTraceInitObjectHandleStack>
	and the fields are volatile to ensure this assignment order. This to avoid any
	chance of accidental duplicates of this elsewhere in memory.

	Moreover, the fields are set byte-by-byte to avoid endian issues.*/

	RecorderDataPtr->startmarker11 = 0xF4;
 8003bf2:	4b2b      	ldr	r3, [pc, #172]	; (8003ca0 <vTraceInitialize+0x200>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	22f4      	movs	r2, #244	; 0xf4
 8003bf8:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
 8003bfa:	4b29      	ldr	r3, [pc, #164]	; (8003ca0 <vTraceInitialize+0x200>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	22f3      	movs	r2, #243	; 0xf3
 8003c00:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
 8003c02:	4b27      	ldr	r3, [pc, #156]	; (8003ca0 <vTraceInitialize+0x200>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	22f2      	movs	r2, #242	; 0xf2
 8003c08:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
 8003c0a:	4b25      	ldr	r3, [pc, #148]	; (8003ca0 <vTraceInitialize+0x200>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	22f1      	movs	r2, #241	; 0xf1
 8003c10:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
 8003c12:	4b23      	ldr	r3, [pc, #140]	; (8003ca0 <vTraceInitialize+0x200>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2274      	movs	r2, #116	; 0x74
 8003c18:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
 8003c1a:	4b21      	ldr	r3, [pc, #132]	; (8003ca0 <vTraceInitialize+0x200>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2273      	movs	r2, #115	; 0x73
 8003c20:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
 8003c22:	4b1f      	ldr	r3, [pc, #124]	; (8003ca0 <vTraceInitialize+0x200>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2272      	movs	r2, #114	; 0x72
 8003c28:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
 8003c2a:	4b1d      	ldr	r3, [pc, #116]	; (8003ca0 <vTraceInitialize+0x200>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2271      	movs	r2, #113	; 0x71
 8003c30:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
 8003c32:	4b1b      	ldr	r3, [pc, #108]	; (8003ca0 <vTraceInitialize+0x200>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2204      	movs	r2, #4
 8003c38:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
 8003c3a:	4b19      	ldr	r3, [pc, #100]	; (8003ca0 <vTraceInitialize+0x200>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2203      	movs	r2, #3
 8003c40:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;
 8003c42:	4b17      	ldr	r3, [pc, #92]	; (8003ca0 <vTraceInitialize+0x200>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2202      	movs	r2, #2
 8003c48:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01;
 8003c4a:	4b15      	ldr	r3, [pc, #84]	; (8003ca0 <vTraceInitialize+0x200>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
 8003c52:	4b12      	ldr	r3, [pc, #72]	; (8003c9c <vTraceInitialize+0x1fc>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d012      	beq.n	8003c80 <vTraceInitialize+0x1e0>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8003c5a:	4b11      	ldr	r3, [pc, #68]	; (8003ca0 <vTraceInitialize+0x200>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	22ce      	movs	r2, #206	; 0xce
 8003c60:	00d2      	lsls	r2, r2, #3
 8003c62:	1898      	adds	r0, r3, r2
 8003c64:	4b0d      	ldr	r3, [pc, #52]	; (8003c9c <vTraceInitialize+0x1fc>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2250      	movs	r2, #80	; 0x50
 8003c6a:	0019      	movs	r1, r3
 8003c6c:	f000 fea0 	bl	80049b0 <prvStrncpy>
		RecorderDataPtr->internalErrorOccured = 1;
 8003c70:	4b0b      	ldr	r3, [pc, #44]	; (8003ca0 <vTraceInitialize+0x200>)
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	23cd      	movs	r3, #205	; 0xcd
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	2101      	movs	r1, #1
 8003c7a:	50d1      	str	r1, [r2, r3]
		vTraceStop();
 8003c7c:	f7ff feea 	bl	8003a54 <vTraceStop>

#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif

	RecorderInitialized = 1;
 8003c80:	4b03      	ldr	r3, [pc, #12]	; (8003c90 <vTraceInitialize+0x1f0>)
 8003c82:	2201      	movs	r2, #1
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	e000      	b.n	8003c8a <vTraceInitialize+0x1ea>
		return;
 8003c88:	46c0      	nop			; (mov r8, r8)
}
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	46c0      	nop			; (mov r8, r8)
 8003c90:	2000348c 	.word	0x2000348c
 8003c94:	20001da4 	.word	0x20001da4
 8003c98:	20001da6 	.word	0x20001da6
 8003c9c:	20001e10 	.word	0x20001e10
 8003ca0:	20003488 	.word	0x20003488
 8003ca4:	20001e14 	.word	0x20001e14
 8003ca8:	e000e018 	.word	0xe000e018
 8003cac:	20001da0 	.word	0x20001da0
 8003cb0:	00001674 	.word	0x00001674
 8003cb4:	00001aa1 	.word	0x00001aa1
 8003cb8:	f0f0f0f0 	.word	0xf0f0f0f0
 8003cbc:	f1f1f1f1 	.word	0xf1f1f1f1
 8003cc0:	0000066c 	.word	0x0000066c
 8003cc4:	f2f2f2f2 	.word	0xf2f2f2f2
 8003cc8:	08006374 	.word	0x08006374
 8003ccc:	f3f3f3f3 	.word	0xf3f3f3f3
 8003cd0:	00001668 	.word	0x00001668
 8003cd4:	00001669 	.word	0x00001669
 8003cd8:	0000166a 	.word	0x0000166a
 8003cdc:	0000166b 	.word	0x0000166b
 8003ce0:	0000166c 	.word	0x0000166c
 8003ce4:	0000166d 	.word	0x0000166d
 8003ce8:	0000166e 	.word	0x0000166e
 8003cec:	0000166f 	.word	0x0000166f
 8003cf0:	00001670 	.word	0x00001670
 8003cf4:	00001671 	.word	0x00001671
 8003cf8:	00001672 	.word	0x00001672
 8003cfc:	00001673 	.word	0x00001673

08003d00 <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
 8003d00:	b5b0      	push	{r4, r5, r7, lr}
 8003d02:	b088      	sub	sp, #32
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	0002      	movs	r2, r0
 8003d08:	1dfb      	adds	r3, r7, #7
 8003d0a:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
 8003d0c:	1dfb      	adds	r3, r7, #7
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d056      	beq.n	8003dc2 <prvTraceStoreTaskReady+0xc2>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
 8003d14:	4b2e      	ldr	r3, [pc, #184]	; (8003dd0 <prvTraceStoreTaskReady+0xd0>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d054      	beq.n	8003dc6 <prvTraceStoreTaskReady+0xc6>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
 8003d1c:	1dfb      	adds	r3, r7, #7
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	2b08      	cmp	r3, #8
 8003d22:	d904      	bls.n	8003d2e <prvTraceStoreTaskReady+0x2e>
 8003d24:	4b2b      	ldr	r3, [pc, #172]	; (8003dd4 <prvTraceStoreTaskReady+0xd4>)
 8003d26:	0018      	movs	r0, r3
 8003d28:	f000 fed2 	bl	8004ad0 <prvTraceError>
 8003d2c:	e04c      	b.n	8003dc8 <prvTraceStoreTaskReady+0xc8>

	if (recorder_busy)
 8003d2e:	4b2a      	ldr	r3, [pc, #168]	; (8003dd8 <prvTraceStoreTaskReady+0xd8>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d004      	beq.n	8003d40 <prvTraceStoreTaskReady+0x40>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
 8003d36:	4b29      	ldr	r3, [pc, #164]	; (8003ddc <prvTraceStoreTaskReady+0xdc>)
 8003d38:	0018      	movs	r0, r3
 8003d3a:	f000 fec9 	bl	8004ad0 <prvTraceError>
		return;
 8003d3e:	e043      	b.n	8003dc8 <prvTraceStoreTaskReady+0xc8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d40:	f3ef 8310 	mrs	r3, PRIMASK
 8003d44:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d46:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
 8003d48:	61fb      	str	r3, [r7, #28]
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	f383 8810 	msr	PRIMASK, r3
}
 8003d54:	46c0      	nop			; (mov r8, r8)
 8003d56:	4b20      	ldr	r3, [pc, #128]	; (8003dd8 <prvTraceStoreTaskReady+0xd8>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	1c5a      	adds	r2, r3, #1
 8003d5c:	4b1e      	ldr	r3, [pc, #120]	; (8003dd8 <prvTraceStoreTaskReady+0xd8>)
 8003d5e:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
 8003d60:	4b1f      	ldr	r3, [pc, #124]	; (8003de0 <prvTraceStoreTaskReady+0xe0>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d020      	beq.n	8003dac <prvTraceStoreTaskReady+0xac>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8003d6a:	251a      	movs	r5, #26
 8003d6c:	197c      	adds	r4, r7, r5
 8003d6e:	4b1d      	ldr	r3, [pc, #116]	; (8003de4 <prvTraceStoreTaskReady+0xe4>)
 8003d70:	0018      	movs	r0, r3
 8003d72:	f000 fefb 	bl	8004b6c <prvTraceGetDTS>
 8003d76:	0003      	movs	r3, r0
 8003d78:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
 8003d7a:	2419      	movs	r4, #25
 8003d7c:	193b      	adds	r3, r7, r4
 8003d7e:	1dfa      	adds	r2, r7, #7
 8003d80:	7812      	ldrb	r2, [r2, #0]
 8003d82:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
 8003d84:	f000 fc92 	bl	80046ac <prvTraceNextFreeEventBufferSlot>
 8003d88:	0003      	movs	r3, r0
 8003d8a:	617b      	str	r3, [r7, #20]
		if (tr != NULL)
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00c      	beq.n	8003dac <prvTraceStoreTaskReady+0xac>
		{
			tr->type = DIV_TASK_READY;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	2202      	movs	r2, #2
 8003d96:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	197a      	adds	r2, r7, r5
 8003d9c:	8812      	ldrh	r2, [r2, #0]
 8003d9e:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	193a      	adds	r2, r7, r4
 8003da4:	7812      	ldrb	r2, [r2, #0]
 8003da6:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 8003da8:	f000 fec0 	bl	8004b2c <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8003dac:	4b0a      	ldr	r3, [pc, #40]	; (8003dd8 <prvTraceStoreTaskReady+0xd8>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	1e5a      	subs	r2, r3, #1
 8003db2:	4b09      	ldr	r3, [pc, #36]	; (8003dd8 <prvTraceStoreTaskReady+0xd8>)
 8003db4:	601a      	str	r2, [r3, #0]
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	f383 8810 	msr	PRIMASK, r3
}
 8003dc0:	e002      	b.n	8003dc8 <prvTraceStoreTaskReady+0xc8>
		return;
 8003dc2:	46c0      	nop			; (mov r8, r8)
 8003dc4:	e000      	b.n	8003dc8 <prvTraceStoreTaskReady+0xc8>
		return;
 8003dc6:	46c0      	nop			; (mov r8, r8)
}
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	b008      	add	sp, #32
 8003dcc:	bdb0      	pop	{r4, r5, r7, pc}
 8003dce:	46c0      	nop			; (mov r8, r8)
 8003dd0:	20000010 	.word	0x20000010
 8003dd4:	08006388 	.word	0x08006388
 8003dd8:	20001d90 	.word	0x20001d90
 8003ddc:	080063c8 	.word	0x080063c8
 8003de0:	20003488 	.word	0x20003488
 8003de4:	0000ffff 	.word	0x0000ffff

08003de8 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
 8003de8:	b5b0      	push	{r4, r5, r7, lr}
 8003dea:	b08e      	sub	sp, #56	; 0x38
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
 8003df4:	4b4c      	ldr	r3, [pc, #304]	; (8003f28 <vTraceStoreMemMangEvent+0x140>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d100      	bne.n	8003dfe <vTraceStoreMemMangEvent+0x16>
 8003dfc:	e090      	b.n	8003f20 <vTraceStoreMemMangEvent+0x138>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	da03      	bge.n	8003e0c <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	425b      	negs	r3, r3
 8003e08:	637b      	str	r3, [r7, #52]	; 0x34
 8003e0a:	e001      	b.n	8003e10 <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e10:	f3ef 8310 	mrs	r3, PRIMASK
 8003e14:	61bb      	str	r3, [r7, #24]
  return(result);
 8003e16:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
 8003e18:	633b      	str	r3, [r7, #48]	; 0x30
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	f383 8810 	msr	PRIMASK, r3
}
 8003e24:	46c0      	nop			; (mov r8, r8)
 8003e26:	4b41      	ldr	r3, [pc, #260]	; (8003f2c <vTraceStoreMemMangEvent+0x144>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	1c5a      	adds	r2, r3, #1
 8003e2c:	4b3f      	ldr	r3, [pc, #252]	; (8003f2c <vTraceStoreMemMangEvent+0x144>)
 8003e2e:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d015      	beq.n	8003e62 <vTraceStoreMemMangEvent+0x7a>
	{
		RecorderDataPtr->heapMemUsage += (uint32_t)signed_size;
 8003e36:	4b3c      	ldr	r3, [pc, #240]	; (8003f28 <vTraceStoreMemMangEvent+0x140>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	4b3a      	ldr	r3, [pc, #232]	; (8003f28 <vTraceStoreMemMangEvent+0x140>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	188a      	adds	r2, r1, r2
 8003e44:	63da      	str	r2, [r3, #60]	; 0x3c

		if (RecorderDataPtr->heapMemUsage > RecorderDataPtr->heapMemMaxUsage)
 8003e46:	4b38      	ldr	r3, [pc, #224]	; (8003f28 <vTraceStoreMemMangEvent+0x140>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e4c:	4b36      	ldr	r3, [pc, #216]	; (8003f28 <vTraceStoreMemMangEvent+0x140>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d905      	bls.n	8003e62 <vTraceStoreMemMangEvent+0x7a>
		{
			RecorderDataPtr->heapMemMaxUsage = RecorderDataPtr->heapMemUsage;
 8003e56:	4b34      	ldr	r3, [pc, #208]	; (8003f28 <vTraceStoreMemMangEvent+0x140>)
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	4b33      	ldr	r3, [pc, #204]	; (8003f28 <vTraceStoreMemMangEvent+0x140>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e60:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}

	if (RecorderDataPtr->recorderActive)
 8003e62:	4b31      	ldr	r3, [pc, #196]	; (8003f28 <vTraceStoreMemMangEvent+0x140>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d04e      	beq.n	8003f0a <vTraceStoreMemMangEvent+0x122>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
 8003e6c:	20ff      	movs	r0, #255	; 0xff
 8003e6e:	f000 fe7d 	bl	8004b6c <prvTraceGetDTS>
 8003e72:	0003      	movs	r3, r0
 8003e74:	001a      	movs	r2, r3
 8003e76:	242f      	movs	r4, #47	; 0x2f
 8003e78:	193b      	adds	r3, r7, r4
 8003e7a:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
 8003e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e7e:	4a2c      	ldr	r2, [pc, #176]	; (8003f30 <vTraceStoreMemMangEvent+0x148>)
 8003e80:	0019      	movs	r1, r3
 8003e82:	0010      	movs	r0, r2
 8003e84:	f000 f980 	bl	8004188 <prvTraceGetParam>
 8003e88:	0002      	movs	r2, r0
 8003e8a:	252c      	movs	r5, #44	; 0x2c
 8003e8c:	197b      	adds	r3, r7, r5
 8003e8e:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
 8003e90:	f000 fc0c 	bl	80046ac <prvTraceNextFreeEventBufferSlot>
 8003e94:	0003      	movs	r3, r0
 8003e96:	62bb      	str	r3, [r7, #40]	; 0x28

		if (ms != NULL)
 8003e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d035      	beq.n	8003f0a <vTraceStoreMemMangEvent+0x122>
		{
			ms->dts = dts1;
 8003e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea0:	193a      	adds	r2, r7, r4
 8003ea2:	7812      	ldrb	r2, [r2, #0]
 8003ea4:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
 8003ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
 8003eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eae:	197a      	adds	r2, r7, r5
 8003eb0:	8812      	ldrh	r2, [r2, #0]
 8003eb2:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 8003eb4:	f000 fe3a 	bl	8004b2c <prvTraceUpdateCounters>
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	4a1d      	ldr	r2, [pc, #116]	; (8003f30 <vTraceStoreMemMangEvent+0x148>)
 8003ebc:	0019      	movs	r1, r3
 8003ebe:	0010      	movs	r0, r2
 8003ec0:	f000 f962 	bl	8004188 <prvTraceGetParam>
 8003ec4:	0002      	movs	r2, r0
 8003ec6:	2426      	movs	r4, #38	; 0x26
 8003ec8:	193b      	adds	r3, r7, r4
 8003eca:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
 8003ecc:	2525      	movs	r5, #37	; 0x25
 8003ece:	197b      	adds	r3, r7, r5
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
 8003ed4:	f000 fbea 	bl	80046ac <prvTraceNextFreeEventBufferSlot>
 8003ed8:	0003      	movs	r3, r0
 8003eda:	623b      	str	r3, [r7, #32]
			if (ma != NULL)
 8003edc:	6a3b      	ldr	r3, [r7, #32]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d013      	beq.n	8003f0a <vTraceStoreMemMangEvent+0x122>
			{
				ma->addr_low = addr_low;
 8003ee2:	6a3b      	ldr	r3, [r7, #32]
 8003ee4:	193a      	adds	r2, r7, r4
 8003ee6:	8812      	ldrh	r2, [r2, #0]
 8003ee8:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
 8003eea:	6a3b      	ldr	r3, [r7, #32]
 8003eec:	197a      	adds	r2, r7, r5
 8003eee:	7812      	ldrb	r2, [r2, #0]
 8003ef0:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1);	/* Note this! */
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	b2da      	uxtb	r2, r3
 8003efa:	6a3b      	ldr	r3, [r7, #32]
 8003efc:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;			/* Set type of first event */
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	b2da      	uxtb	r2, r3
 8003f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f04:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();
 8003f06:	f000 fe11 	bl	8004b2c <prvTraceUpdateCounters>
			}
		}
	}
	trcCRITICAL_SECTION_END();
 8003f0a:	4b08      	ldr	r3, [pc, #32]	; (8003f2c <vTraceStoreMemMangEvent+0x144>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	1e5a      	subs	r2, r3, #1
 8003f10:	4b06      	ldr	r3, [pc, #24]	; (8003f2c <vTraceStoreMemMangEvent+0x144>)
 8003f12:	601a      	str	r2, [r3, #0]
 8003f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	f383 8810 	msr	PRIMASK, r3
}
 8003f1e:	e000      	b.n	8003f22 <vTraceStoreMemMangEvent+0x13a>
		return;
 8003f20:	46c0      	nop			; (mov r8, r8)
}
 8003f22:	46bd      	mov	sp, r7
 8003f24:	b00e      	add	sp, #56	; 0x38
 8003f26:	bdb0      	pop	{r4, r5, r7, pc}
 8003f28:	20003488 	.word	0x20003488
 8003f2c:	20001d90 	.word	0x20001d90
 8003f30:	0000ffff 	.word	0x0000ffff

08003f34 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
 8003f34:	b5b0      	push	{r4, r5, r7, lr}
 8003f36:	b08a      	sub	sp, #40	; 0x28
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	607a      	str	r2, [r7, #4]
 8003f3e:	230b      	movs	r3, #11
 8003f40:	18fb      	adds	r3, r7, r3
 8003f42:	1c0a      	adds	r2, r1, #0
 8003f44:	701a      	strb	r2, [r3, #0]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2bfe      	cmp	r3, #254	; 0xfe
 8003f4a:	d904      	bls.n	8003f56 <prvTraceStoreKernelCall+0x22>
 8003f4c:	4b39      	ldr	r3, [pc, #228]	; (8004034 <prvTraceStoreKernelCall+0x100>)
 8003f4e:	0018      	movs	r0, r3
 8003f50:	f000 fdbe 	bl	8004ad0 <prvTraceError>
 8003f54:	e06a      	b.n	800402c <prvTraceStoreKernelCall+0xf8>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
 8003f56:	230b      	movs	r3, #11
 8003f58:	18fb      	adds	r3, r7, r3
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	2b08      	cmp	r3, #8
 8003f5e:	d904      	bls.n	8003f6a <prvTraceStoreKernelCall+0x36>
 8003f60:	4b35      	ldr	r3, [pc, #212]	; (8004038 <prvTraceStoreKernelCall+0x104>)
 8003f62:	0018      	movs	r0, r3
 8003f64:	f000 fdb4 	bl	8004ad0 <prvTraceError>
 8003f68:	e060      	b.n	800402c <prvTraceStoreKernelCall+0xf8>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
 8003f6a:	4b34      	ldr	r3, [pc, #208]	; (800403c <prvTraceStoreKernelCall+0x108>)
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	230b      	movs	r3, #11
 8003f70:	18fb      	adds	r3, r7, r3
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	2150      	movs	r1, #80	; 0x50
 8003f76:	18d3      	adds	r3, r2, r3
 8003f78:	185b      	adds	r3, r3, r1
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	001a      	movs	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d904      	bls.n	8003f8e <prvTraceStoreKernelCall+0x5a>
 8003f84:	4b2e      	ldr	r3, [pc, #184]	; (8004040 <prvTraceStoreKernelCall+0x10c>)
 8003f86:	0018      	movs	r0, r3
 8003f88:	f000 fda2 	bl	8004ad0 <prvTraceError>
 8003f8c:	e04e      	b.n	800402c <prvTraceStoreKernelCall+0xf8>

	if (recorder_busy)
 8003f8e:	4b2d      	ldr	r3, [pc, #180]	; (8004044 <prvTraceStoreKernelCall+0x110>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d004      	beq.n	8003fa0 <prvTraceStoreKernelCall+0x6c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
 8003f96:	4b2c      	ldr	r3, [pc, #176]	; (8004048 <prvTraceStoreKernelCall+0x114>)
 8003f98:	0018      	movs	r0, r3
 8003f9a:	f000 fd99 	bl	8004ad0 <prvTraceError>
		return;
 8003f9e:	e045      	b.n	800402c <prvTraceStoreKernelCall+0xf8>
	}

	if (handle_of_last_logged_task == 0)
 8003fa0:	4b2a      	ldr	r3, [pc, #168]	; (800404c <prvTraceStoreKernelCall+0x118>)
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d040      	beq.n	800402a <prvTraceStoreKernelCall+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fa8:	f3ef 8310 	mrs	r3, PRIMASK
 8003fac:	617b      	str	r3, [r7, #20]
  return(result);
 8003fae:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
 8003fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	f383 8810 	msr	PRIMASK, r3
}
 8003fbc:	46c0      	nop			; (mov r8, r8)
 8003fbe:	4b21      	ldr	r3, [pc, #132]	; (8004044 <prvTraceStoreKernelCall+0x110>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	1c5a      	adds	r2, r3, #1
 8003fc4:	4b1f      	ldr	r3, [pc, #124]	; (8004044 <prvTraceStoreKernelCall+0x110>)
 8003fc6:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
 8003fc8:	4b1c      	ldr	r3, [pc, #112]	; (800403c <prvTraceStoreKernelCall+0x108>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d020      	beq.n	8004014 <prvTraceStoreKernelCall+0xe0>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8003fd2:	2522      	movs	r5, #34	; 0x22
 8003fd4:	197c      	adds	r4, r7, r5
 8003fd6:	4b1e      	ldr	r3, [pc, #120]	; (8004050 <prvTraceStoreKernelCall+0x11c>)
 8003fd8:	0018      	movs	r0, r3
 8003fda:	f000 fdc7 	bl	8004b6c <prvTraceGetDTS>
 8003fde:	0003      	movs	r3, r0
 8003fe0:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 8003fe2:	2421      	movs	r4, #33	; 0x21
 8003fe4:	193b      	adds	r3, r7, r4
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
 8003fea:	f000 fb5f 	bl	80046ac <prvTraceNextFreeEventBufferSlot>
 8003fee:	0003      	movs	r3, r0
 8003ff0:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00d      	beq.n	8004014 <prvTraceStoreKernelCall+0xe0>
		{
			kse->dts = dts1;
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	197a      	adds	r2, r7, r5
 8003ffc:	8812      	ldrh	r2, [r2, #0]
 8003ffe:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	b2da      	uxtb	r2, r3
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	193a      	adds	r2, r7, r4
 800400c:	7812      	ldrb	r2, [r2, #0]
 800400e:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
 8004010:	f000 fd8c 	bl	8004b2c <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8004014:	4b0b      	ldr	r3, [pc, #44]	; (8004044 <prvTraceStoreKernelCall+0x110>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	1e5a      	subs	r2, r3, #1
 800401a:	4b0a      	ldr	r3, [pc, #40]	; (8004044 <prvTraceStoreKernelCall+0x110>)
 800401c:	601a      	str	r2, [r3, #0]
 800401e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004020:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	f383 8810 	msr	PRIMASK, r3
}
 8004028:	e000      	b.n	800402c <prvTraceStoreKernelCall+0xf8>
		return;
 800402a:	46c0      	nop			; (mov r8, r8)
}
 800402c:	46bd      	mov	sp, r7
 800402e:	b00a      	add	sp, #40	; 0x28
 8004030:	bdb0      	pop	{r4, r5, r7, pc}
 8004032:	46c0      	nop			; (mov r8, r8)
 8004034:	08006438 	.word	0x08006438
 8004038:	08006470 	.word	0x08006470
 800403c:	20003488 	.word	0x20003488
 8004040:	080064b8 	.word	0x080064b8
 8004044:	20001d90 	.word	0x20001d90
 8004048:	08006500 	.word	0x08006500
 800404c:	20001d98 	.word	0x20001d98
 8004050:	0000ffff 	.word	0x0000ffff

08004054 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
 8004054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004056:	b08b      	sub	sp, #44	; 0x2c
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	607a      	str	r2, [r7, #4]
 800405e:	603b      	str	r3, [r7, #0]
 8004060:	230b      	movs	r3, #11
 8004062:	18fb      	adds	r3, r7, r3
 8004064:	1c0a      	adds	r2, r1, #0
 8004066:	701a      	strb	r2, [r3, #0]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2bfe      	cmp	r3, #254	; 0xfe
 800406c:	d904      	bls.n	8004078 <prvTraceStoreKernelCallWithParam+0x24>
 800406e:	4b3f      	ldr	r3, [pc, #252]	; (800416c <prvTraceStoreKernelCallWithParam+0x118>)
 8004070:	0018      	movs	r0, r3
 8004072:	f000 fd2d 	bl	8004ad0 <prvTraceError>
 8004076:	e076      	b.n	8004166 <prvTraceStoreKernelCallWithParam+0x112>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
 8004078:	230b      	movs	r3, #11
 800407a:	18fb      	adds	r3, r7, r3
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	2b08      	cmp	r3, #8
 8004080:	d904      	bls.n	800408c <prvTraceStoreKernelCallWithParam+0x38>
 8004082:	4b3b      	ldr	r3, [pc, #236]	; (8004170 <prvTraceStoreKernelCallWithParam+0x11c>)
 8004084:	0018      	movs	r0, r3
 8004086:	f000 fd23 	bl	8004ad0 <prvTraceError>
 800408a:	e06c      	b.n	8004166 <prvTraceStoreKernelCallWithParam+0x112>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
 800408c:	4b39      	ldr	r3, [pc, #228]	; (8004174 <prvTraceStoreKernelCallWithParam+0x120>)
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	230b      	movs	r3, #11
 8004092:	18fb      	adds	r3, r7, r3
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	2150      	movs	r1, #80	; 0x50
 8004098:	18d3      	adds	r3, r2, r3
 800409a:	185b      	adds	r3, r3, r1
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	001a      	movs	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d904      	bls.n	80040b0 <prvTraceStoreKernelCallWithParam+0x5c>
 80040a6:	4b34      	ldr	r3, [pc, #208]	; (8004178 <prvTraceStoreKernelCallWithParam+0x124>)
 80040a8:	0018      	movs	r0, r3
 80040aa:	f000 fd11 	bl	8004ad0 <prvTraceError>
 80040ae:	e05a      	b.n	8004166 <prvTraceStoreKernelCallWithParam+0x112>

	if (recorder_busy)
 80040b0:	4b32      	ldr	r3, [pc, #200]	; (800417c <prvTraceStoreKernelCallWithParam+0x128>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d004      	beq.n	80040c2 <prvTraceStoreKernelCallWithParam+0x6e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
 80040b8:	4b31      	ldr	r3, [pc, #196]	; (8004180 <prvTraceStoreKernelCallWithParam+0x12c>)
 80040ba:	0018      	movs	r0, r3
 80040bc:	f000 fd08 	bl	8004ad0 <prvTraceError>
		return;
 80040c0:	e051      	b.n	8004166 <prvTraceStoreKernelCallWithParam+0x112>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040c2:	f3ef 8310 	mrs	r3, PRIMASK
 80040c6:	617b      	str	r3, [r7, #20]
  return(result);
 80040c8:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
 80040ca:	627b      	str	r3, [r7, #36]	; 0x24
 80040cc:	2301      	movs	r3, #1
 80040ce:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	f383 8810 	msr	PRIMASK, r3
}
 80040d6:	46c0      	nop			; (mov r8, r8)
 80040d8:	4b28      	ldr	r3, [pc, #160]	; (800417c <prvTraceStoreKernelCallWithParam+0x128>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	1c5a      	adds	r2, r3, #1
 80040de:	4b27      	ldr	r3, [pc, #156]	; (800417c <prvTraceStoreKernelCallWithParam+0x128>)
 80040e0:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 80040e2:	4b24      	ldr	r3, [pc, #144]	; (8004174 <prvTraceStoreKernelCallWithParam+0x120>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d031      	beq.n	8004150 <prvTraceStoreKernelCallWithParam+0xfc>
 80040ec:	4b25      	ldr	r3, [pc, #148]	; (8004184 <prvTraceStoreKernelCallWithParam+0x130>)
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d02d      	beq.n	8004150 <prvTraceStoreKernelCallWithParam+0xfc>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
 80040f4:	20ff      	movs	r0, #255	; 0xff
 80040f6:	f000 fd39 	bl	8004b6c <prvTraceGetDTS>
 80040fa:	0003      	movs	r3, r0
 80040fc:	001a      	movs	r2, r3
 80040fe:	2423      	movs	r4, #35	; 0x23
 8004100:	193b      	adds	r3, r7, r4
 8004102:	701a      	strb	r2, [r3, #0]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	0019      	movs	r1, r3
 8004108:	20ff      	movs	r0, #255	; 0xff
 800410a:	f000 f83d 	bl	8004188 <prvTraceGetParam>
 800410e:	0002      	movs	r2, r0
 8004110:	2522      	movs	r5, #34	; 0x22
 8004112:	197b      	adds	r3, r7, r5
 8004114:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 8004116:	2621      	movs	r6, #33	; 0x21
 8004118:	19bb      	adds	r3, r7, r6
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	701a      	strb	r2, [r3, #0]
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
 800411e:	f000 fac5 	bl	80046ac <prvTraceNextFreeEventBufferSlot>
 8004122:	0003      	movs	r3, r0
 8004124:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d011      	beq.n	8004150 <prvTraceStoreKernelCallWithParam+0xfc>
		{
			kse->dts = dts2;
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	193a      	adds	r2, r7, r4
 8004130:	7812      	ldrb	r2, [r2, #0]
 8004132:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	b2da      	uxtb	r2, r3
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	19ba      	adds	r2, r7, r6
 8004140:	7812      	ldrb	r2, [r2, #0]
 8004142:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	197a      	adds	r2, r7, r5
 8004148:	7812      	ldrb	r2, [r2, #0]
 800414a:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
 800414c:	f000 fcee 	bl	8004b2c <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 8004150:	4b0a      	ldr	r3, [pc, #40]	; (800417c <prvTraceStoreKernelCallWithParam+0x128>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	1e5a      	subs	r2, r3, #1
 8004156:	4b09      	ldr	r3, [pc, #36]	; (800417c <prvTraceStoreKernelCallWithParam+0x128>)
 8004158:	601a      	str	r2, [r3, #0]
 800415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	f383 8810 	msr	PRIMASK, r3
}
 8004164:	46c0      	nop			; (mov r8, r8)
}
 8004166:	46bd      	mov	sp, r7
 8004168:	b00b      	add	sp, #44	; 0x2c
 800416a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800416c:	08006538 	.word	0x08006538
 8004170:	08006578 	.word	0x08006578
 8004174:	20003488 	.word	0x20003488
 8004178:	080065c8 	.word	0x080065c8
 800417c:	20001d90 	.word	0x20001d90
 8004180:	08006618 	.word	0x08006618
 8004184:	20001d98 	.word	0x20001d98

08004188 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2bff      	cmp	r3, #255	; 0xff
 8004196:	d009      	beq.n	80041ac <prvTraceGetParam+0x24>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a19      	ldr	r2, [pc, #100]	; (8004200 <prvTraceGetParam+0x78>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d005      	beq.n	80041ac <prvTraceGetParam+0x24>
 80041a0:	4b18      	ldr	r3, [pc, #96]	; (8004204 <prvTraceGetParam+0x7c>)
 80041a2:	0018      	movs	r0, r3
 80041a4:	f000 fc94 	bl	8004ad0 <prvTraceError>
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	e024      	b.n	80041f6 <prvTraceGetParam+0x6e>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d801      	bhi.n	80041b8 <prvTraceGetParam+0x30>
	{
		return param;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	e01e      	b.n	80041f6 <prvTraceGetParam+0x6e>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
 80041b8:	f000 fa78 	bl	80046ac <prvTraceNextFreeEventBufferSlot>
 80041bc:	0003      	movs	r3, r0
 80041be:	60fb      	str	r3, [r7, #12]
		if (xps != NULL)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d014      	beq.n	80041f0 <prvTraceGetParam+0x68>
		{
			xps->type = DIV_XPS;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2201      	movs	r2, #1
 80041ca:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	43db      	mvns	r3, r3
 80041d0:	683a      	ldr	r2, [r7, #0]
 80041d2:	4013      	ands	r3, r2
 80041d4:	0a1b      	lsrs	r3, r3, #8
 80041d6:	b2da      	uxtb	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	43db      	mvns	r3, r3
 80041e0:	683a      	ldr	r2, [r7, #0]
 80041e2:	4013      	ands	r3, r2
 80041e4:	0c1b      	lsrs	r3, r3, #16
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 80041ec:	f000 fc9e 	bl	8004b2c <prvTraceUpdateCounters>
		}

		return param & param_max;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	4013      	ands	r3, r2
	}
}
 80041f6:	0018      	movs	r0, r3
 80041f8:	46bd      	mov	sp, r7
 80041fa:	b004      	add	sp, #16
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	46c0      	nop			; (mov r8, r8)
 8004200:	0000ffff 	.word	0x0000ffff
 8004204:	08006650 	.word	0x08006650

08004208 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
 8004208:	b5b0      	push	{r4, r5, r7, lr}
 800420a:	b08a      	sub	sp, #40	; 0x28
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
 8004212:	2326      	movs	r3, #38	; 0x26
 8004214:	18fb      	adds	r3, r7, r3
 8004216:	2200      	movs	r2, #0
 8004218:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2bfe      	cmp	r3, #254	; 0xfe
 800421e:	d904      	bls.n	800422a <prvTraceStoreKernelCallWithNumericParamOnly+0x22>
 8004220:	4b2d      	ldr	r3, [pc, #180]	; (80042d8 <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
 8004222:	0018      	movs	r0, r3
 8004224:	f000 fc54 	bl	8004ad0 <prvTraceError>
 8004228:	e053      	b.n	80042d2 <prvTraceStoreKernelCallWithNumericParamOnly+0xca>

	if (recorder_busy)
 800422a:	4b2c      	ldr	r3, [pc, #176]	; (80042dc <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d004      	beq.n	800423c <prvTraceStoreKernelCallWithNumericParamOnly+0x34>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
 8004232:	4b2b      	ldr	r3, [pc, #172]	; (80042e0 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
 8004234:	0018      	movs	r0, r3
 8004236:	f000 fc4b 	bl	8004ad0 <prvTraceError>
		return;
 800423a:	e04a      	b.n	80042d2 <prvTraceStoreKernelCallWithNumericParamOnly+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800423c:	f3ef 8310 	mrs	r3, PRIMASK
 8004240:	613b      	str	r3, [r7, #16]
  return(result);
 8004242:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
 8004244:	623b      	str	r3, [r7, #32]
 8004246:	2301      	movs	r3, #1
 8004248:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	f383 8810 	msr	PRIMASK, r3
}
 8004250:	46c0      	nop			; (mov r8, r8)
 8004252:	4b22      	ldr	r3, [pc, #136]	; (80042dc <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	1c5a      	adds	r2, r3, #1
 8004258:	4b20      	ldr	r3, [pc, #128]	; (80042dc <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
 800425a:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 800425c:	4b21      	ldr	r3, [pc, #132]	; (80042e4 <prvTraceStoreKernelCallWithNumericParamOnly+0xdc>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004262:	2b00      	cmp	r3, #0
 8004264:	d02a      	beq.n	80042bc <prvTraceStoreKernelCallWithNumericParamOnly+0xb4>
 8004266:	4b20      	ldr	r3, [pc, #128]	; (80042e8 <prvTraceStoreKernelCallWithNumericParamOnly+0xe0>)
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d026      	beq.n	80042bc <prvTraceStoreKernelCallWithNumericParamOnly+0xb4>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
 800426e:	20ff      	movs	r0, #255	; 0xff
 8004270:	f000 fc7c 	bl	8004b6c <prvTraceGetDTS>
 8004274:	0003      	movs	r3, r0
 8004276:	001a      	movs	r2, r3
 8004278:	241f      	movs	r4, #31
 800427a:	193b      	adds	r3, r7, r4
 800427c:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	4a1a      	ldr	r2, [pc, #104]	; (80042ec <prvTraceStoreKernelCallWithNumericParamOnly+0xe4>)
 8004282:	0019      	movs	r1, r3
 8004284:	0010      	movs	r0, r2
 8004286:	f7ff ff7f 	bl	8004188 <prvTraceGetParam>
 800428a:	0002      	movs	r2, r0
 800428c:	2526      	movs	r5, #38	; 0x26
 800428e:	197b      	adds	r3, r7, r5
 8004290:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
 8004292:	f000 fa0b 	bl	80046ac <prvTraceNextFreeEventBufferSlot>
 8004296:	0003      	movs	r3, r0
 8004298:	61bb      	str	r3, [r7, #24]
		if (kse != NULL)
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00d      	beq.n	80042bc <prvTraceStoreKernelCallWithNumericParamOnly+0xb4>
		{
			kse->dts = dts6;
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	193a      	adds	r2, r7, r4
 80042a4:	7812      	ldrb	r2, [r2, #0]
 80042a6:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	b2da      	uxtb	r2, r3
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	197a      	adds	r2, r7, r5
 80042b4:	8812      	ldrh	r2, [r2, #0]
 80042b6:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
 80042b8:	f000 fc38 	bl	8004b2c <prvTraceUpdateCounters>
		}
	}
	trcCRITICAL_SECTION_END();
 80042bc:	4b07      	ldr	r3, [pc, #28]	; (80042dc <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	1e5a      	subs	r2, r3, #1
 80042c2:	4b06      	ldr	r3, [pc, #24]	; (80042dc <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	6a3b      	ldr	r3, [r7, #32]
 80042c8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f383 8810 	msr	PRIMASK, r3
}
 80042d0:	46c0      	nop			; (mov r8, r8)
}
 80042d2:	46bd      	mov	sp, r7
 80042d4:	b00a      	add	sp, #40	; 0x28
 80042d6:	bdb0      	pop	{r4, r5, r7, pc}
 80042d8:	0800668c 	.word	0x0800668c
 80042dc:	20001d90 	.word	0x20001d90
 80042e0:	080066e4 	.word	0x080066e4
 80042e4:	20003488 	.word	0x20003488
 80042e8:	20001d98 	.word	0x20001d98
 80042ec:	0000ffff 	.word	0x0000ffff

080042f0 <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
 80042f0:	b590      	push	{r4, r7, lr}
 80042f2:	b089      	sub	sp, #36	; 0x24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	0002      	movs	r2, r0
 80042f8:	1dfb      	adds	r3, r7, #7
 80042fa:	701a      	strb	r2, [r3, #0]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
 80042fc:	1dfb      	adds	r3, r7, #7
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	2b08      	cmp	r3, #8
 8004302:	d904      	bls.n	800430e <prvTraceStoreTaskswitch+0x1e>
 8004304:	4b35      	ldr	r3, [pc, #212]	; (80043dc <prvTraceStoreTaskswitch+0xec>)
 8004306:	0018      	movs	r0, r3
 8004308:	f000 fbe2 	bl	8004ad0 <prvTraceError>
 800430c:	e063      	b.n	80043d6 <prvTraceStoreTaskswitch+0xe6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800430e:	f3ef 8310 	mrs	r3, PRIMASK
 8004312:	60fb      	str	r3, [r7, #12]
  return(result);
 8004314:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
 8004316:	61fb      	str	r3, [r7, #28]
 8004318:	2301      	movs	r3, #1
 800431a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	f383 8810 	msr	PRIMASK, r3
}
 8004322:	46c0      	nop			; (mov r8, r8)
 8004324:	4b2e      	ldr	r3, [pc, #184]	; (80043e0 <prvTraceStoreTaskswitch+0xf0>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	1c5a      	adds	r2, r3, #1
 800432a:	4b2d      	ldr	r3, [pc, #180]	; (80043e0 <prvTraceStoreTaskswitch+0xf0>)
 800432c:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
 800432e:	4b2d      	ldr	r3, [pc, #180]	; (80043e4 <prvTraceStoreTaskswitch+0xf4>)
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	1dfa      	adds	r2, r7, #7
 8004334:	7812      	ldrb	r2, [r2, #0]
 8004336:	429a      	cmp	r2, r3
 8004338:	d042      	beq.n	80043c0 <prvTraceStoreTaskswitch+0xd0>
 800433a:	4b2b      	ldr	r3, [pc, #172]	; (80043e8 <prvTraceStoreTaskswitch+0xf8>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004340:	2b00      	cmp	r3, #0
 8004342:	d03d      	beq.n	80043c0 <prvTraceStoreTaskswitch+0xd0>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
 8004344:	4b29      	ldr	r3, [pc, #164]	; (80043ec <prvTraceStoreTaskswitch+0xfc>)
 8004346:	2200      	movs	r2, #0
 8004348:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
 800434a:	231a      	movs	r3, #26
 800434c:	18fc      	adds	r4, r7, r3
 800434e:	4b28      	ldr	r3, [pc, #160]	; (80043f0 <prvTraceStoreTaskswitch+0x100>)
 8004350:	0018      	movs	r0, r3
 8004352:	f000 fc0b 	bl	8004b6c <prvTraceGetDTS>
 8004356:	0003      	movs	r3, r0
 8004358:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
 800435a:	4b22      	ldr	r3, [pc, #136]	; (80043e4 <prvTraceStoreTaskswitch+0xf4>)
 800435c:	1dfa      	adds	r2, r7, #7
 800435e:	7812      	ldrb	r2, [r2, #0]
 8004360:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
 8004362:	2319      	movs	r3, #25
 8004364:	18fb      	adds	r3, r7, r3
 8004366:	4a1f      	ldr	r2, [pc, #124]	; (80043e4 <prvTraceStoreTaskswitch+0xf4>)
 8004368:	7812      	ldrb	r2, [r2, #0]
 800436a:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
 800436c:	f000 f99e 	bl	80046ac <prvTraceNextFreeEventBufferSlot>
 8004370:	0003      	movs	r3, r0
 8004372:	617b      	str	r3, [r7, #20]

		if (ts != NULL)
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d022      	beq.n	80043c0 <prvTraceStoreTaskswitch+0xd0>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
 800437a:	4b1a      	ldr	r3, [pc, #104]	; (80043e4 <prvTraceStoreTaskswitch+0xf4>)
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	0019      	movs	r1, r3
 8004380:	2003      	movs	r0, #3
 8004382:	f000 f91d 	bl	80045c0 <prvTraceGetObjectState>
 8004386:	0003      	movs	r3, r0
 8004388:	2b01      	cmp	r3, #1
 800438a:	d103      	bne.n	8004394 <prvTraceStoreTaskswitch+0xa4>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	2207      	movs	r2, #7
 8004390:	701a      	strb	r2, [r3, #0]
 8004392:	e002      	b.n	800439a <prvTraceStoreTaskswitch+0xaa>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	2206      	movs	r2, #6
 8004398:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	221a      	movs	r2, #26
 800439e:	18ba      	adds	r2, r7, r2
 80043a0:	8812      	ldrh	r2, [r2, #0]
 80043a2:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	2219      	movs	r2, #25
 80043a8:	18ba      	adds	r2, r7, r2
 80043aa:	7812      	ldrb	r2, [r2, #0]
 80043ac:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
 80043ae:	4b0d      	ldr	r3, [pc, #52]	; (80043e4 <prvTraceStoreTaskswitch+0xf4>)
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	2201      	movs	r2, #1
 80043b4:	0019      	movs	r1, r3
 80043b6:	2003      	movs	r0, #3
 80043b8:	f000 f8b4 	bl	8004524 <prvTraceSetObjectState>
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
 80043bc:	f000 fbb6 	bl	8004b2c <prvTraceUpdateCounters>
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
 80043c0:	4b07      	ldr	r3, [pc, #28]	; (80043e0 <prvTraceStoreTaskswitch+0xf0>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	1e5a      	subs	r2, r3, #1
 80043c6:	4b06      	ldr	r3, [pc, #24]	; (80043e0 <prvTraceStoreTaskswitch+0xf0>)
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	f383 8810 	msr	PRIMASK, r3
}
 80043d4:	46c0      	nop			; (mov r8, r8)
}
 80043d6:	46bd      	mov	sp, r7
 80043d8:	b009      	add	sp, #36	; 0x24
 80043da:	bd90      	pop	{r4, r7, pc}
 80043dc:	0800671c 	.word	0x0800671c
 80043e0:	20001d90 	.word	0x20001d90
 80043e4:	20001d98 	.word	0x20001d98
 80043e8:	20003488 	.word	0x20003488
 80043ec:	20001d7c 	.word	0x20001d7c
 80043f0:	0000ffff 	.word	0x0000ffff

080043f4 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
 80043f4:	b590      	push	{r4, r7, lr}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	0004      	movs	r4, r0
 80043fc:	0008      	movs	r0, r1
 80043fe:	0011      	movs	r1, r2
 8004400:	1dfb      	adds	r3, r7, #7
 8004402:	1c22      	adds	r2, r4, #0
 8004404:	701a      	strb	r2, [r3, #0]
 8004406:	1dbb      	adds	r3, r7, #6
 8004408:	1c02      	adds	r2, r0, #0
 800440a:	701a      	strb	r2, [r3, #0]
 800440c:	1d7b      	adds	r3, r7, #5
 800440e:	1c0a      	adds	r2, r1, #0
 8004410:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 8004412:	1dfb      	adds	r3, r7, #7
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	2b08      	cmp	r3, #8
 8004418:	d904      	bls.n	8004424 <prvTraceSetPriorityProperty+0x30>
 800441a:	4b1a      	ldr	r3, [pc, #104]	; (8004484 <prvTraceSetPriorityProperty+0x90>)
 800441c:	0018      	movs	r0, r3
 800441e:	f000 fb57 	bl	8004ad0 <prvTraceError>
 8004422:	e02c      	b.n	800447e <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8004424:	4b18      	ldr	r3, [pc, #96]	; (8004488 <prvTraceSetPriorityProperty+0x94>)
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	1dfb      	adds	r3, r7, #7
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	2150      	movs	r1, #80	; 0x50
 800442e:	18d3      	adds	r3, r2, r3
 8004430:	185b      	adds	r3, r3, r1
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	1dba      	adds	r2, r7, #6
 8004436:	7812      	ldrb	r2, [r2, #0]
 8004438:	429a      	cmp	r2, r3
 800443a:	d904      	bls.n	8004446 <prvTraceSetPriorityProperty+0x52>
 800443c:	4b13      	ldr	r3, [pc, #76]	; (800448c <prvTraceSetPriorityProperty+0x98>)
 800443e:	0018      	movs	r0, r3
 8004440:	f000 fb46 	bl	8004ad0 <prvTraceError>
 8004444:	e01b      	b.n	800447e <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
 8004446:	4b10      	ldr	r3, [pc, #64]	; (8004488 <prvTraceSetPriorityProperty+0x94>)
 8004448:	681c      	ldr	r4, [r3, #0]
 800444a:	1dfb      	adds	r3, r7, #7
 800444c:	781a      	ldrb	r2, [r3, #0]
 800444e:	1dbb      	adds	r3, r7, #6
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	0011      	movs	r1, r2
 8004454:	0018      	movs	r0, r3
 8004456:	f000 f953 	bl	8004700 <uiIndexOfObject>
 800445a:	0003      	movs	r3, r0
 800445c:	0018      	movs	r0, r3
 800445e:	4b0a      	ldr	r3, [pc, #40]	; (8004488 <prvTraceSetPriorityProperty+0x94>)
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	1dfb      	adds	r3, r7, #7
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	215c      	movs	r1, #92	; 0x5c
 8004468:	18d3      	adds	r3, r2, r3
 800446a:	185b      	adds	r3, r3, r1
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	18c3      	adds	r3, r0, r3
 8004470:	3301      	adds	r3, #1
 8004472:	2288      	movs	r2, #136	; 0x88
 8004474:	18e3      	adds	r3, r4, r3
 8004476:	189b      	adds	r3, r3, r2
 8004478:	1d7a      	adds	r2, r7, #5
 800447a:	7812      	ldrb	r2, [r2, #0]
 800447c:	701a      	strb	r2, [r3, #0]
}
 800447e:	46bd      	mov	sp, r7
 8004480:	b003      	add	sp, #12
 8004482:	bd90      	pop	{r4, r7, pc}
 8004484:	080068b0 	.word	0x080068b0
 8004488:	20003488 	.word	0x20003488
 800448c:	080068fc 	.word	0x080068fc

08004490 <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
 8004490:	b590      	push	{r4, r7, lr}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	0002      	movs	r2, r0
 8004498:	1dfb      	adds	r3, r7, #7
 800449a:	701a      	strb	r2, [r3, #0]
 800449c:	1dbb      	adds	r3, r7, #6
 800449e:	1c0a      	adds	r2, r1, #0
 80044a0:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 80044a2:	1dfb      	adds	r3, r7, #7
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	2b08      	cmp	r3, #8
 80044a8:	d905      	bls.n	80044b6 <prvTraceGetPriorityProperty+0x26>
 80044aa:	4b1b      	ldr	r3, [pc, #108]	; (8004518 <prvTraceGetPriorityProperty+0x88>)
 80044ac:	0018      	movs	r0, r3
 80044ae:	f000 fb0f 	bl	8004ad0 <prvTraceError>
 80044b2:	2300      	movs	r3, #0
 80044b4:	e02b      	b.n	800450e <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 80044b6:	4b19      	ldr	r3, [pc, #100]	; (800451c <prvTraceGetPriorityProperty+0x8c>)
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	1dfb      	adds	r3, r7, #7
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	2150      	movs	r1, #80	; 0x50
 80044c0:	18d3      	adds	r3, r2, r3
 80044c2:	185b      	adds	r3, r3, r1
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	1dba      	adds	r2, r7, #6
 80044c8:	7812      	ldrb	r2, [r2, #0]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d905      	bls.n	80044da <prvTraceGetPriorityProperty+0x4a>
 80044ce:	4b14      	ldr	r3, [pc, #80]	; (8004520 <prvTraceGetPriorityProperty+0x90>)
 80044d0:	0018      	movs	r0, r3
 80044d2:	f000 fafd 	bl	8004ad0 <prvTraceError>
 80044d6:	2300      	movs	r3, #0
 80044d8:	e019      	b.n	800450e <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
 80044da:	4b10      	ldr	r3, [pc, #64]	; (800451c <prvTraceGetPriorityProperty+0x8c>)
 80044dc:	681c      	ldr	r4, [r3, #0]
 80044de:	1dfb      	adds	r3, r7, #7
 80044e0:	781a      	ldrb	r2, [r3, #0]
 80044e2:	1dbb      	adds	r3, r7, #6
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	0011      	movs	r1, r2
 80044e8:	0018      	movs	r0, r3
 80044ea:	f000 f909 	bl	8004700 <uiIndexOfObject>
 80044ee:	0003      	movs	r3, r0
 80044f0:	0018      	movs	r0, r3
 80044f2:	4b0a      	ldr	r3, [pc, #40]	; (800451c <prvTraceGetPriorityProperty+0x8c>)
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	1dfb      	adds	r3, r7, #7
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	215c      	movs	r1, #92	; 0x5c
 80044fc:	18d3      	adds	r3, r2, r3
 80044fe:	185b      	adds	r3, r3, r1
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	18c3      	adds	r3, r0, r3
 8004504:	3301      	adds	r3, #1
 8004506:	2288      	movs	r2, #136	; 0x88
 8004508:	18e3      	adds	r3, r4, r3
 800450a:	189b      	adds	r3, r3, r2
 800450c:	781b      	ldrb	r3, [r3, #0]
}
 800450e:	0018      	movs	r0, r3
 8004510:	46bd      	mov	sp, r7
 8004512:	b003      	add	sp, #12
 8004514:	bd90      	pop	{r4, r7, pc}
 8004516:	46c0      	nop			; (mov r8, r8)
 8004518:	0800693c 	.word	0x0800693c
 800451c:	20003488 	.word	0x20003488
 8004520:	08006988 	.word	0x08006988

08004524 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
 8004524:	b590      	push	{r4, r7, lr}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	0004      	movs	r4, r0
 800452c:	0008      	movs	r0, r1
 800452e:	0011      	movs	r1, r2
 8004530:	1dfb      	adds	r3, r7, #7
 8004532:	1c22      	adds	r2, r4, #0
 8004534:	701a      	strb	r2, [r3, #0]
 8004536:	1dbb      	adds	r3, r7, #6
 8004538:	1c02      	adds	r2, r0, #0
 800453a:	701a      	strb	r2, [r3, #0]
 800453c:	1d7b      	adds	r3, r7, #5
 800453e:	1c0a      	adds	r2, r1, #0
 8004540:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 8004542:	1dfb      	adds	r3, r7, #7
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	2b08      	cmp	r3, #8
 8004548:	d904      	bls.n	8004554 <prvTraceSetObjectState+0x30>
 800454a:	4b1a      	ldr	r3, [pc, #104]	; (80045b4 <prvTraceSetObjectState+0x90>)
 800454c:	0018      	movs	r0, r3
 800454e:	f000 fabf 	bl	8004ad0 <prvTraceError>
 8004552:	e02b      	b.n	80045ac <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8004554:	4b18      	ldr	r3, [pc, #96]	; (80045b8 <prvTraceSetObjectState+0x94>)
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	1dfb      	adds	r3, r7, #7
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	2150      	movs	r1, #80	; 0x50
 800455e:	18d3      	adds	r3, r2, r3
 8004560:	185b      	adds	r3, r3, r1
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	1dba      	adds	r2, r7, #6
 8004566:	7812      	ldrb	r2, [r2, #0]
 8004568:	429a      	cmp	r2, r3
 800456a:	d904      	bls.n	8004576 <prvTraceSetObjectState+0x52>
 800456c:	4b13      	ldr	r3, [pc, #76]	; (80045bc <prvTraceSetObjectState+0x98>)
 800456e:	0018      	movs	r0, r3
 8004570:	f000 faae 	bl	8004ad0 <prvTraceError>
 8004574:	e01a      	b.n	80045ac <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
 8004576:	4b10      	ldr	r3, [pc, #64]	; (80045b8 <prvTraceSetObjectState+0x94>)
 8004578:	681c      	ldr	r4, [r3, #0]
 800457a:	1dfb      	adds	r3, r7, #7
 800457c:	781a      	ldrb	r2, [r3, #0]
 800457e:	1dbb      	adds	r3, r7, #6
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	0011      	movs	r1, r2
 8004584:	0018      	movs	r0, r3
 8004586:	f000 f8bb 	bl	8004700 <uiIndexOfObject>
 800458a:	0003      	movs	r3, r0
 800458c:	0018      	movs	r0, r3
 800458e:	4b0a      	ldr	r3, [pc, #40]	; (80045b8 <prvTraceSetObjectState+0x94>)
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	1dfb      	adds	r3, r7, #7
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	215c      	movs	r1, #92	; 0x5c
 8004598:	18d3      	adds	r3, r2, r3
 800459a:	185b      	adds	r3, r3, r1
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	18c3      	adds	r3, r0, r3
 80045a0:	2288      	movs	r2, #136	; 0x88
 80045a2:	18e3      	adds	r3, r4, r3
 80045a4:	189b      	adds	r3, r3, r2
 80045a6:	1d7a      	adds	r2, r7, #5
 80045a8:	7812      	ldrb	r2, [r2, #0]
 80045aa:	701a      	strb	r2, [r3, #0]
}
 80045ac:	46bd      	mov	sp, r7
 80045ae:	b003      	add	sp, #12
 80045b0:	bd90      	pop	{r4, r7, pc}
 80045b2:	46c0      	nop			; (mov r8, r8)
 80045b4:	080069c8 	.word	0x080069c8
 80045b8:	20003488 	.word	0x20003488
 80045bc:	08006a0c 	.word	0x08006a0c

080045c0 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
 80045c0:	b590      	push	{r4, r7, lr}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	0002      	movs	r2, r0
 80045c8:	1dfb      	adds	r3, r7, #7
 80045ca:	701a      	strb	r2, [r3, #0]
 80045cc:	1dbb      	adds	r3, r7, #6
 80045ce:	1c0a      	adds	r2, r1, #0
 80045d0:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 80045d2:	1dfb      	adds	r3, r7, #7
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	2b08      	cmp	r3, #8
 80045d8:	d905      	bls.n	80045e6 <prvTraceGetObjectState+0x26>
 80045da:	4b1a      	ldr	r3, [pc, #104]	; (8004644 <prvTraceGetObjectState+0x84>)
 80045dc:	0018      	movs	r0, r3
 80045de:	f000 fa77 	bl	8004ad0 <prvTraceError>
 80045e2:	2300      	movs	r3, #0
 80045e4:	e02a      	b.n	800463c <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 80045e6:	4b18      	ldr	r3, [pc, #96]	; (8004648 <prvTraceGetObjectState+0x88>)
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	1dfb      	adds	r3, r7, #7
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	2150      	movs	r1, #80	; 0x50
 80045f0:	18d3      	adds	r3, r2, r3
 80045f2:	185b      	adds	r3, r3, r1
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	1dba      	adds	r2, r7, #6
 80045f8:	7812      	ldrb	r2, [r2, #0]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d905      	bls.n	800460a <prvTraceGetObjectState+0x4a>
 80045fe:	4b13      	ldr	r3, [pc, #76]	; (800464c <prvTraceGetObjectState+0x8c>)
 8004600:	0018      	movs	r0, r3
 8004602:	f000 fa65 	bl	8004ad0 <prvTraceError>
 8004606:	2300      	movs	r3, #0
 8004608:	e018      	b.n	800463c <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
 800460a:	4b0f      	ldr	r3, [pc, #60]	; (8004648 <prvTraceGetObjectState+0x88>)
 800460c:	681c      	ldr	r4, [r3, #0]
 800460e:	1dfb      	adds	r3, r7, #7
 8004610:	781a      	ldrb	r2, [r3, #0]
 8004612:	1dbb      	adds	r3, r7, #6
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	0011      	movs	r1, r2
 8004618:	0018      	movs	r0, r3
 800461a:	f000 f871 	bl	8004700 <uiIndexOfObject>
 800461e:	0003      	movs	r3, r0
 8004620:	0018      	movs	r0, r3
 8004622:	4b09      	ldr	r3, [pc, #36]	; (8004648 <prvTraceGetObjectState+0x88>)
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	1dfb      	adds	r3, r7, #7
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	215c      	movs	r1, #92	; 0x5c
 800462c:	18d3      	adds	r3, r2, r3
 800462e:	185b      	adds	r3, r3, r1
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	18c3      	adds	r3, r0, r3
 8004634:	2288      	movs	r2, #136	; 0x88
 8004636:	18e3      	adds	r3, r4, r3
 8004638:	189b      	adds	r3, r3, r2
 800463a:	781b      	ldrb	r3, [r3, #0]
}
 800463c:	0018      	movs	r0, r3
 800463e:	46bd      	mov	sp, r7
 8004640:	b003      	add	sp, #12
 8004642:	bd90      	pop	{r4, r7, pc}
 8004644:	08006a48 	.word	0x08006a48
 8004648:	20003488 	.word	0x20003488
 800464c:	08006a8c 	.word	0x08006a8c

08004650 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
 8004650:	b590      	push	{r4, r7, lr}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	0002      	movs	r2, r0
 8004658:	1dfb      	adds	r3, r7, #7
 800465a:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
 800465c:	4b11      	ldr	r3, [pc, #68]	; (80046a4 <prvTraceSetTaskInstanceFinished+0x54>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2253      	movs	r2, #83	; 0x53
 8004662:	5c9b      	ldrb	r3, [r3, r2]
 8004664:	1dfa      	adds	r2, r7, #7
 8004666:	7812      	ldrb	r2, [r2, #0]
 8004668:	429a      	cmp	r2, r3
 800466a:	d904      	bls.n	8004676 <prvTraceSetTaskInstanceFinished+0x26>
 800466c:	4b0e      	ldr	r3, [pc, #56]	; (80046a8 <prvTraceSetTaskInstanceFinished+0x58>)
 800466e:	0018      	movs	r0, r3
 8004670:	f000 fa2e 	bl	8004ad0 <prvTraceError>
 8004674:	e013      	b.n	800469e <prvTraceSetTaskInstanceFinished+0x4e>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
 8004676:	4b0b      	ldr	r3, [pc, #44]	; (80046a4 <prvTraceSetTaskInstanceFinished+0x54>)
 8004678:	681c      	ldr	r4, [r3, #0]
 800467a:	1dfb      	adds	r3, r7, #7
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	2103      	movs	r1, #3
 8004680:	0018      	movs	r0, r3
 8004682:	f000 f83d 	bl	8004700 <uiIndexOfObject>
 8004686:	0003      	movs	r3, r0
 8004688:	0019      	movs	r1, r3
 800468a:	4b06      	ldr	r3, [pc, #24]	; (80046a4 <prvTraceSetTaskInstanceFinished+0x54>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	225f      	movs	r2, #95	; 0x5f
 8004690:	5c9b      	ldrb	r3, [r3, r2]
 8004692:	18cb      	adds	r3, r1, r3
 8004694:	2288      	movs	r2, #136	; 0x88
 8004696:	18e3      	adds	r3, r4, r3
 8004698:	189b      	adds	r3, r3, r2
 800469a:	2200      	movs	r2, #0
 800469c:	701a      	strb	r2, [r3, #0]
#endif
}
 800469e:	46bd      	mov	sp, r7
 80046a0:	b003      	add	sp, #12
 80046a2:	bd90      	pop	{r4, r7, pc}
 80046a4:	20003488 	.word	0x20003488
 80046a8:	08006ac8 	.word	0x08006ac8

080046ac <prvTraceNextFreeEventBufferSlot>:

void* prvTraceNextFreeEventBufferSlot(void)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
 80046b0:	4b11      	ldr	r3, [pc, #68]	; (80046f8 <prvTraceNextFreeEventBufferSlot+0x4c>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
 80046ba:	2300      	movs	r3, #0
 80046bc:	e018      	b.n	80046f0 <prvTraceNextFreeEventBufferSlot+0x44>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 80046be:	4b0e      	ldr	r3, [pc, #56]	; (80046f8 <prvTraceNextFreeEventBufferSlot+0x4c>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	69da      	ldr	r2, [r3, #28]
 80046c4:	23fa      	movs	r3, #250	; 0xfa
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d305      	bcc.n	80046d8 <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
 80046cc:	4b0b      	ldr	r3, [pc, #44]	; (80046fc <prvTraceNextFreeEventBufferSlot+0x50>)
 80046ce:	0018      	movs	r0, r3
 80046d0:	f000 f9fe 	bl	8004ad0 <prvTraceError>
		return NULL;
 80046d4:	2300      	movs	r3, #0
 80046d6:	e00b      	b.n	80046f0 <prvTraceNextFreeEventBufferSlot+0x44>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
 80046d8:	4b07      	ldr	r3, [pc, #28]	; (80046f8 <prvTraceNextFreeEventBufferSlot+0x4c>)
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	4b06      	ldr	r3, [pc, #24]	; (80046f8 <prvTraceNextFreeEventBufferSlot+0x4c>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	21d8      	movs	r1, #216	; 0xd8
 80046e6:	00c9      	lsls	r1, r1, #3
 80046e8:	468c      	mov	ip, r1
 80046ea:	4463      	add	r3, ip
 80046ec:	18d3      	adds	r3, r2, r3
 80046ee:	3304      	adds	r3, #4
}
 80046f0:	0018      	movs	r0, r3
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	46c0      	nop			; (mov r8, r8)
 80046f8:	20003488 	.word	0x20003488
 80046fc:	08006b10 	.word	0x08006b10

08004700 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	0002      	movs	r2, r0
 8004708:	1dfb      	adds	r3, r7, #7
 800470a:	701a      	strb	r2, [r3, #0]
 800470c:	1dbb      	adds	r3, r7, #6
 800470e:	1c0a      	adds	r2, r1, #0
 8004710:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
 8004712:	1dbb      	adds	r3, r7, #6
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	2b08      	cmp	r3, #8
 8004718:	d905      	bls.n	8004726 <uiIndexOfObject+0x26>
 800471a:	4b2a      	ldr	r3, [pc, #168]	; (80047c4 <uiIndexOfObject+0xc4>)
 800471c:	0018      	movs	r0, r3
 800471e:	f000 f9d7 	bl	8004ad0 <prvTraceError>
 8004722:	2300      	movs	r3, #0
 8004724:	e049      	b.n	80047ba <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
 8004726:	1dfb      	adds	r3, r7, #7
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00b      	beq.n	8004746 <uiIndexOfObject+0x46>
 800472e:	4b26      	ldr	r3, [pc, #152]	; (80047c8 <uiIndexOfObject+0xc8>)
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	1dbb      	adds	r3, r7, #6
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	2150      	movs	r1, #80	; 0x50
 8004738:	18d3      	adds	r3, r2, r3
 800473a:	185b      	adds	r3, r3, r1
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	1dfa      	adds	r2, r7, #7
 8004740:	7812      	ldrb	r2, [r2, #0]
 8004742:	429a      	cmp	r2, r3
 8004744:	d905      	bls.n	8004752 <uiIndexOfObject+0x52>
 8004746:	4b21      	ldr	r3, [pc, #132]	; (80047cc <uiIndexOfObject+0xcc>)
 8004748:	0018      	movs	r0, r3
 800474a:	f000 f9c1 	bl	8004ad0 <prvTraceError>
 800474e:	2300      	movs	r3, #0
 8004750:	e033      	b.n	80047ba <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 8004752:	1dbb      	adds	r3, r7, #6
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	2b08      	cmp	r3, #8
 8004758:	d82a      	bhi.n	80047b0 <uiIndexOfObject+0xb0>
 800475a:	1dfb      	adds	r3, r7, #7
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d026      	beq.n	80047b0 <uiIndexOfObject+0xb0>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
 8004762:	4b19      	ldr	r3, [pc, #100]	; (80047c8 <uiIndexOfObject+0xc8>)
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	1dbb      	adds	r3, r7, #6
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	2150      	movs	r1, #80	; 0x50
 800476c:	18d3      	adds	r3, r2, r3
 800476e:	185b      	adds	r3, r3, r1
 8004770:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
 8004772:	1dfa      	adds	r2, r7, #7
 8004774:	7812      	ldrb	r2, [r2, #0]
 8004776:	429a      	cmp	r2, r3
 8004778:	d81a      	bhi.n	80047b0 <uiIndexOfObject+0xb0>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 800477a:	4b13      	ldr	r3, [pc, #76]	; (80047c8 <uiIndexOfObject+0xc8>)
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	1dbb      	adds	r3, r7, #6
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	3338      	adds	r3, #56	; 0x38
 8004784:	005b      	lsls	r3, r3, #1
 8004786:	18d3      	adds	r3, r2, r3
 8004788:	3304      	adds	r3, #4
 800478a:	881a      	ldrh	r2, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
 800478c:	4b0e      	ldr	r3, [pc, #56]	; (80047c8 <uiIndexOfObject+0xc8>)
 800478e:	6819      	ldr	r1, [r3, #0]
 8004790:	1dbb      	adds	r3, r7, #6
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	2068      	movs	r0, #104	; 0x68
 8004796:	18cb      	adds	r3, r1, r3
 8004798:	181b      	adds	r3, r3, r0
 800479a:	781b      	ldrb	r3, [r3, #0]
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 800479c:	b29b      	uxth	r3, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
 800479e:	1df9      	adds	r1, r7, #7
 80047a0:	7809      	ldrb	r1, [r1, #0]
 80047a2:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 80047a4:	b289      	uxth	r1, r1
 80047a6:	434b      	muls	r3, r1
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	18d3      	adds	r3, r2, r3
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	e004      	b.n	80047ba <uiIndexOfObject+0xba>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
 80047b0:	4b07      	ldr	r3, [pc, #28]	; (80047d0 <uiIndexOfObject+0xd0>)
 80047b2:	0018      	movs	r0, r3
 80047b4:	f000 f98c 	bl	8004ad0 <prvTraceError>
	return 0;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	0018      	movs	r0, r3
 80047bc:	46bd      	mov	sp, r7
 80047be:	b002      	add	sp, #8
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	46c0      	nop			; (mov r8, r8)
 80047c4:	08006b38 	.word	0x08006b38
 80047c8:	20003488 	.word	0x20003488
 80047cc:	08006b78 	.word	0x08006b78
 80047d0:	08006bb8 	.word	0x08006bb8

080047d4 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
 80047d4:	b590      	push	{r4, r7, lr}
 80047d6:	b089      	sub	sp, #36	; 0x24
 80047d8:	af00      	add	r7, sp, #0
 80047da:	0002      	movs	r2, r0
 80047dc:	1dfb      	adds	r3, r7, #7
 80047de:	701a      	strb	r2, [r3, #0]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
 80047e0:	4b5b      	ldr	r3, [pc, #364]	; (8004950 <prvTraceGetObjectHandle+0x17c>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d105      	bne.n	80047f4 <prvTraceGetObjectHandle+0x20>
 80047e8:	4b5a      	ldr	r3, [pc, #360]	; (8004954 <prvTraceGetObjectHandle+0x180>)
 80047ea:	0018      	movs	r0, r3
 80047ec:	f000 f970 	bl	8004ad0 <prvTraceError>
 80047f0:	2300      	movs	r3, #0
 80047f2:	e0a8      	b.n	8004946 <prvTraceGetObjectHandle+0x172>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
 80047f4:	1dfb      	adds	r3, r7, #7
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	d905      	bls.n	8004808 <prvTraceGetObjectHandle+0x34>
 80047fc:	4b56      	ldr	r3, [pc, #344]	; (8004958 <prvTraceGetObjectHandle+0x184>)
 80047fe:	0018      	movs	r0, r3
 8004800:	f000 f966 	bl	8004ad0 <prvTraceError>
 8004804:	2300      	movs	r3, #0
 8004806:	e09e      	b.n	8004946 <prvTraceGetObjectHandle+0x172>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004808:	f3ef 8310 	mrs	r3, PRIMASK
 800480c:	60fb      	str	r3, [r7, #12]
  return(result);
 800480e:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
 8004810:	61bb      	str	r3, [r7, #24]
 8004812:	2301      	movs	r3, #1
 8004814:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	f383 8810 	msr	PRIMASK, r3
}
 800481c:	46c0      	nop			; (mov r8, r8)
 800481e:	4b4f      	ldr	r3, [pc, #316]	; (800495c <prvTraceGetObjectHandle+0x188>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	1c5a      	adds	r2, r3, #1
 8004824:	4b4d      	ldr	r3, [pc, #308]	; (800495c <prvTraceGetObjectHandle+0x188>)
 8004826:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
 8004828:	1dfb      	adds	r3, r7, #7
 800482a:	781a      	ldrb	r2, [r3, #0]
 800482c:	4b4c      	ldr	r3, [pc, #304]	; (8004960 <prvTraceGetObjectHandle+0x18c>)
 800482e:	0052      	lsls	r2, r2, #1
 8004830:	5ad3      	ldrh	r3, [r2, r3]
 8004832:	001a      	movs	r2, r3
 8004834:	4b4b      	ldr	r3, [pc, #300]	; (8004964 <prvTraceGetObjectHandle+0x190>)
 8004836:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
 8004838:	4b4a      	ldr	r3, [pc, #296]	; (8004964 <prvTraceGetObjectHandle+0x190>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a48      	ldr	r2, [pc, #288]	; (8004960 <prvTraceGetObjectHandle+0x18c>)
 800483e:	2148      	movs	r1, #72	; 0x48
 8004840:	18d3      	adds	r3, r2, r3
 8004842:	185b      	adds	r3, r3, r1
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d117      	bne.n	800487a <prvTraceGetObjectHandle+0xa6>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
			(traceHandle)(1 + indexOfHandle -
 800484a:	4b46      	ldr	r3, [pc, #280]	; (8004964 <prvTraceGetObjectHandle+0x190>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	b2da      	uxtb	r2, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
 8004850:	1dfb      	adds	r3, r7, #7
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	4942      	ldr	r1, [pc, #264]	; (8004960 <prvTraceGetObjectHandle+0x18c>)
 8004856:	3308      	adds	r3, #8
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	18cb      	adds	r3, r1, r3
 800485c:	3302      	adds	r3, #2
 800485e:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
 8004860:	b2db      	uxtb	r3, r3
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	b2da      	uxtb	r2, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
 8004866:	4b3f      	ldr	r3, [pc, #252]	; (8004964 <prvTraceGetObjectHandle+0x190>)
 8004868:	681b      	ldr	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
 800486a:	3201      	adds	r2, #1
 800486c:	b2d0      	uxtb	r0, r2
		objectHandleStacks.objectHandles[indexOfHandle] =
 800486e:	4a3c      	ldr	r2, [pc, #240]	; (8004960 <prvTraceGetObjectHandle+0x18c>)
 8004870:	2148      	movs	r1, #72	; 0x48
 8004872:	18d3      	adds	r3, r2, r3
 8004874:	185b      	adds	r3, r3, r1
 8004876:	1c02      	adds	r2, r0, #0
 8004878:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
 800487a:	4b3a      	ldr	r3, [pc, #232]	; (8004964 <prvTraceGetObjectHandle+0x190>)
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	241f      	movs	r4, #31
 8004880:	193b      	adds	r3, r7, r4
 8004882:	4937      	ldr	r1, [pc, #220]	; (8004960 <prvTraceGetObjectHandle+0x18c>)
 8004884:	2048      	movs	r0, #72	; 0x48
 8004886:	188a      	adds	r2, r1, r2
 8004888:	1812      	adds	r2, r2, r0
 800488a:	7812      	ldrb	r2, [r2, #0]
 800488c:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 800488e:	1dfb      	adds	r3, r7, #7
 8004890:	781a      	ldrb	r2, [r3, #0]
 8004892:	4b33      	ldr	r3, [pc, #204]	; (8004960 <prvTraceGetObjectHandle+0x18c>)
 8004894:	0052      	lsls	r2, r2, #1
 8004896:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
 8004898:	1dfb      	adds	r3, r7, #7
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	4930      	ldr	r1, [pc, #192]	; (8004960 <prvTraceGetObjectHandle+0x18c>)
 800489e:	3310      	adds	r3, #16
 80048a0:	005b      	lsls	r3, r3, #1
 80048a2:	18cb      	adds	r3, r1, r3
 80048a4:	3304      	adds	r3, #4
 80048a6:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d90c      	bls.n	80048c6 <prvTraceGetObjectHandle+0xf2>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 80048ac:	1dfb      	adds	r3, r7, #7
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	0018      	movs	r0, r3
 80048b2:	f7ff f80f 	bl	80038d4 <pszTraceGetErrorNotEnoughHandles>
 80048b6:	0003      	movs	r3, r0
 80048b8:	0018      	movs	r0, r3
 80048ba:	f000 f909 	bl	8004ad0 <prvTraceError>
		handle = 0;
 80048be:	193b      	adds	r3, r7, r4
 80048c0:	2200      	movs	r2, #0
 80048c2:	701a      	strb	r2, [r3, #0]
 80048c4:	e031      	b.n	800492a <prvTraceGetObjectHandle+0x156>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
 80048c6:	1dfb      	adds	r3, r7, #7
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	4a25      	ldr	r2, [pc, #148]	; (8004960 <prvTraceGetObjectHandle+0x18c>)
 80048cc:	0059      	lsls	r1, r3, #1
 80048ce:	5a8a      	ldrh	r2, [r1, r2]
 80048d0:	3201      	adds	r2, #1
 80048d2:	b291      	uxth	r1, r2
 80048d4:	4a22      	ldr	r2, [pc, #136]	; (8004960 <prvTraceGetObjectHandle+0x18c>)
 80048d6:	005b      	lsls	r3, r3, #1
 80048d8:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 80048da:	1dfb      	adds	r3, r7, #7
 80048dc:	781a      	ldrb	r2, [r3, #0]
 80048de:	4b20      	ldr	r3, [pc, #128]	; (8004960 <prvTraceGetObjectHandle+0x18c>)
 80048e0:	0052      	lsls	r2, r2, #1
 80048e2:	5ad3      	ldrh	r3, [r2, r3]
 80048e4:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
 80048e6:	1dfb      	adds	r3, r7, #7
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	4a1d      	ldr	r2, [pc, #116]	; (8004960 <prvTraceGetObjectHandle+0x18c>)
 80048ec:	3308      	adds	r3, #8
 80048ee:	005b      	lsls	r3, r3, #1
 80048f0:	18d3      	adds	r3, r2, r3
 80048f2:	3302      	adds	r3, #2
 80048f4:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 80048f6:	1acb      	subs	r3, r1, r3
 80048f8:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
 80048fa:	1dfb      	adds	r3, r7, #7
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	4a18      	ldr	r2, [pc, #96]	; (8004960 <prvTraceGetObjectHandle+0x18c>)
 8004900:	3318      	adds	r3, #24
 8004902:	005b      	lsls	r3, r3, #1
 8004904:	18d3      	adds	r3, r2, r3
 8004906:	3306      	adds	r3, #6
 8004908:	881b      	ldrh	r3, [r3, #0]
 800490a:	001a      	movs	r2, r3
		if (hndCount >
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	4293      	cmp	r3, r2
 8004910:	dd0b      	ble.n	800492a <prvTraceGetObjectHandle+0x156>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
				(traceHandle)hndCount;
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	b2da      	uxtb	r2, r3
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 8004916:	1dfb      	adds	r3, r7, #7
 8004918:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
 800491a:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
 800491c:	4a10      	ldr	r2, [pc, #64]	; (8004960 <prvTraceGetObjectHandle+0x18c>)
 800491e:	3318      	adds	r3, #24
 8004920:	005b      	lsls	r3, r3, #1
 8004922:	18d3      	adds	r3, r2, r3
 8004924:	3306      	adds	r3, #6
 8004926:	1c0a      	adds	r2, r1, #0
 8004928:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
 800492a:	4b0c      	ldr	r3, [pc, #48]	; (800495c <prvTraceGetObjectHandle+0x188>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	1e5a      	subs	r2, r3, #1
 8004930:	4b0a      	ldr	r3, [pc, #40]	; (800495c <prvTraceGetObjectHandle+0x188>)
 8004932:	601a      	str	r2, [r3, #0]
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	f383 8810 	msr	PRIMASK, r3
}
 800493e:	46c0      	nop			; (mov r8, r8)

	return handle;
 8004940:	231f      	movs	r3, #31
 8004942:	18fb      	adds	r3, r7, r3
 8004944:	781b      	ldrb	r3, [r3, #0]
}
 8004946:	0018      	movs	r0, r3
 8004948:	46bd      	mov	sp, r7
 800494a:	b009      	add	sp, #36	; 0x24
 800494c:	bd90      	pop	{r4, r7, pc}
 800494e:	46c0      	nop			; (mov r8, r8)
 8004950:	20003488 	.word	0x20003488
 8004954:	08006018 	.word	0x08006018
 8004958:	08006bf8 	.word	0x08006bf8
 800495c:	20001d90 	.word	0x20001d90
 8004960:	20001da8 	.word	0x20001da8
 8004964:	20003490 	.word	0x20003490

08004968 <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
 8004968:	b5b0      	push	{r4, r5, r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	0002      	movs	r2, r0
 8004970:	1dfb      	adds	r3, r7, #7
 8004972:	701a      	strb	r2, [r3, #0]
 8004974:	1dbb      	adds	r3, r7, #6
 8004976:	1c0a      	adds	r2, r1, #0
 8004978:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
 800497a:	250e      	movs	r5, #14
 800497c:	197c      	adds	r4, r7, r5
 800497e:	1dfb      	adds	r3, r7, #7
 8004980:	781a      	ldrb	r2, [r3, #0]
 8004982:	1dbb      	adds	r3, r7, #6
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	0011      	movs	r1, r2
 8004988:	0018      	movs	r0, r3
 800498a:	f7ff feb9 	bl	8004700 <uiIndexOfObject>
 800498e:	0003      	movs	r3, r0
 8004990:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
 8004992:	4b06      	ldr	r3, [pc, #24]	; (80049ac <prvMarkObjectAsUsed+0x44>)
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	197b      	adds	r3, r7, r5
 8004998:	881b      	ldrh	r3, [r3, #0]
 800499a:	2188      	movs	r1, #136	; 0x88
 800499c:	18d3      	adds	r3, r2, r3
 800499e:	185b      	adds	r3, r3, r1
 80049a0:	2201      	movs	r2, #1
 80049a2:	701a      	strb	r2, [r3, #0]
}
 80049a4:	46c0      	nop			; (mov r8, r8)
 80049a6:	46bd      	mov	sp, r7
 80049a8:	b004      	add	sp, #16
 80049aa:	bdb0      	pop	{r4, r5, r7, pc}
 80049ac:	20003488 	.word	0x20003488

080049b0 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
 80049bc:	2300      	movs	r3, #0
 80049be:	617b      	str	r3, [r7, #20]
 80049c0:	e010      	b.n	80049e4 <prvStrncpy+0x34>
	{
		dst[i] = src[i];
 80049c2:	68ba      	ldr	r2, [r7, #8]
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	18d2      	adds	r2, r2, r3
 80049c8:	68f9      	ldr	r1, [r7, #12]
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	18cb      	adds	r3, r1, r3
 80049ce:	7812      	ldrb	r2, [r2, #0]
 80049d0:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	18d3      	adds	r3, r2, r3
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d007      	beq.n	80049ee <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	3301      	adds	r3, #1
 80049e2:	617b      	str	r3, [r7, #20]
 80049e4:	697a      	ldr	r2, [r7, #20]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d3ea      	bcc.n	80049c2 <prvStrncpy+0x12>
			break;
	}
}
 80049ec:	e000      	b.n	80049f0 <prvStrncpy+0x40>
			break;
 80049ee:	46c0      	nop			; (mov r8, r8)
}
 80049f0:	46c0      	nop			; (mov r8, r8)
 80049f2:	46bd      	mov	sp, r7
 80049f4:	b006      	add	sp, #24
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	603a      	str	r2, [r7, #0]
 8004a00:	1dfb      	adds	r3, r7, #7
 8004a02:	1c02      	adds	r2, r0, #0
 8004a04:	701a      	strb	r2, [r3, #0]
 8004a06:	1dbb      	adds	r3, r7, #6
 8004a08:	1c0a      	adds	r2, r1, #0
 8004a0a:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d104      	bne.n	8004a1c <prvTraceSetObjectName+0x24>
 8004a12:	4b29      	ldr	r3, [pc, #164]	; (8004ab8 <prvTraceSetObjectName+0xc0>)
 8004a14:	0018      	movs	r0, r3
 8004a16:	f000 f85b 	bl	8004ad0 <prvTraceError>
 8004a1a:	e04a      	b.n	8004ab2 <prvTraceSetObjectName+0xba>

	if (objectclass >= TRACE_NCLASSES)
 8004a1c:	1dfb      	adds	r3, r7, #7
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	2b08      	cmp	r3, #8
 8004a22:	d904      	bls.n	8004a2e <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
 8004a24:	4b25      	ldr	r3, [pc, #148]	; (8004abc <prvTraceSetObjectName+0xc4>)
 8004a26:	0018      	movs	r0, r3
 8004a28:	f000 f852 	bl	8004ad0 <prvTraceError>
		return;
 8004a2c:	e041      	b.n	8004ab2 <prvTraceSetObjectName+0xba>
	}

	if (handle == 0)
 8004a2e:	1dbb      	adds	r3, r7, #6
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d104      	bne.n	8004a40 <prvTraceSetObjectName+0x48>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
 8004a36:	4b22      	ldr	r3, [pc, #136]	; (8004ac0 <prvTraceSetObjectName+0xc8>)
 8004a38:	0018      	movs	r0, r3
 8004a3a:	f000 f849 	bl	8004ad0 <prvTraceError>
		return;
 8004a3e:	e038      	b.n	8004ab2 <prvTraceSetObjectName+0xba>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
 8004a40:	4b20      	ldr	r3, [pc, #128]	; (8004ac4 <prvTraceSetObjectName+0xcc>)
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	1dfb      	adds	r3, r7, #7
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	2150      	movs	r1, #80	; 0x50
 8004a4a:	18d3      	adds	r3, r2, r3
 8004a4c:	185b      	adds	r3, r3, r1
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	1dba      	adds	r2, r7, #6
 8004a52:	7812      	ldrb	r2, [r2, #0]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d909      	bls.n	8004a6c <prvTraceSetObjectName+0x74>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 8004a58:	1dfb      	adds	r3, r7, #7
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	0018      	movs	r0, r3
 8004a5e:	f7fe ff39 	bl	80038d4 <pszTraceGetErrorNotEnoughHandles>
 8004a62:	0003      	movs	r3, r0
 8004a64:	0018      	movs	r0, r3
 8004a66:	f000 f833 	bl	8004ad0 <prvTraceError>
 8004a6a:	e022      	b.n	8004ab2 <prvTraceSetObjectName+0xba>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
 8004a6c:	1dfb      	adds	r3, r7, #7
 8004a6e:	781a      	ldrb	r2, [r3, #0]
 8004a70:	1dbb      	adds	r3, r7, #6
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	0011      	movs	r1, r2
 8004a76:	0018      	movs	r0, r3
 8004a78:	f7ff fe42 	bl	8004700 <uiIndexOfObject>
 8004a7c:	0003      	movs	r3, r0
 8004a7e:	001a      	movs	r2, r3
 8004a80:	4b11      	ldr	r3, [pc, #68]	; (8004ac8 <prvTraceSetObjectName+0xd0>)
 8004a82:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
 8004a84:	4b11      	ldr	r3, [pc, #68]	; (8004acc <prvTraceSetObjectName+0xd4>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d112      	bne.n	8004ab2 <prvTraceSetObjectName+0xba>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 8004a8c:	4b0d      	ldr	r3, [pc, #52]	; (8004ac4 <prvTraceSetObjectName+0xcc>)
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	4b0d      	ldr	r3, [pc, #52]	; (8004ac8 <prvTraceSetObjectName+0xd0>)
 8004a92:	881b      	ldrh	r3, [r3, #0]
 8004a94:	3388      	adds	r3, #136	; 0x88
 8004a96:	18d0      	adds	r0, r2, r3
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
 8004a98:	4b0a      	ldr	r3, [pc, #40]	; (8004ac4 <prvTraceSetObjectName+0xcc>)
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	1dfb      	adds	r3, r7, #7
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	215c      	movs	r1, #92	; 0x5c
 8004aa2:	18d3      	adds	r3, r2, r3
 8004aa4:	185b      	adds	r3, r3, r1
 8004aa6:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 8004aa8:	001a      	movs	r2, r3
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	0019      	movs	r1, r3
 8004aae:	f7ff ff7f 	bl	80049b0 <prvStrncpy>
		}
	}
}
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	b002      	add	sp, #8
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	08006cfc 	.word	0x08006cfc
 8004abc:	08006d30 	.word	0x08006d30
 8004ac0:	08006d60 	.word	0x08006d60
 8004ac4:	20003488 	.word	0x20003488
 8004ac8:	20003494 	.word	0x20003494
 8004acc:	20001e10 	.word	0x20001e10

08004ad0 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
 8004ad8:	4b12      	ldr	r3, [pc, #72]	; (8004b24 <prvTraceError+0x54>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d001      	beq.n	8004ae4 <prvTraceError+0x14>
	{
		vTraceStop();
 8004ae0:	f7fe ffb8 	bl	8003a54 <vTraceStop>
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
 8004ae4:	4b10      	ldr	r3, [pc, #64]	; (8004b28 <prvTraceError+0x58>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d117      	bne.n	8004b1c <prvTraceError+0x4c>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
 8004aec:	4b0e      	ldr	r3, [pc, #56]	; (8004b28 <prvTraceError+0x58>)
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != NULL)
 8004af2:	4b0c      	ldr	r3, [pc, #48]	; (8004b24 <prvTraceError+0x54>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d010      	beq.n	8004b1c <prvTraceError+0x4c>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8004afa:	4b0a      	ldr	r3, [pc, #40]	; (8004b24 <prvTraceError+0x54>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	22ce      	movs	r2, #206	; 0xce
 8004b00:	00d2      	lsls	r2, r2, #3
 8004b02:	1898      	adds	r0, r3, r2
 8004b04:	4b08      	ldr	r3, [pc, #32]	; (8004b28 <prvTraceError+0x58>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2250      	movs	r2, #80	; 0x50
 8004b0a:	0019      	movs	r1, r3
 8004b0c:	f7ff ff50 	bl	80049b0 <prvStrncpy>
			RecorderDataPtr->internalErrorOccured = 1;
 8004b10:	4b04      	ldr	r3, [pc, #16]	; (8004b24 <prvTraceError+0x54>)
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	23cd      	movs	r3, #205	; 0xcd
 8004b16:	00db      	lsls	r3, r3, #3
 8004b18:	2101      	movs	r1, #1
 8004b1a:	50d1      	str	r1, [r2, r3]
		}
	}
}
 8004b1c:	46c0      	nop			; (mov r8, r8)
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	b002      	add	sp, #8
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	20003488 	.word	0x20003488
 8004b28:	20001e10 	.word	0x20001e10

08004b2c <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
 8004b30:	4b0d      	ldr	r3, [pc, #52]	; (8004b68 <prvTraceUpdateCounters+0x3c>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d013      	beq.n	8004b62 <prvTraceUpdateCounters+0x36>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
 8004b3a:	4b0b      	ldr	r3, [pc, #44]	; (8004b68 <prvTraceUpdateCounters+0x3c>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	695a      	ldr	r2, [r3, #20]
 8004b40:	3201      	adds	r2, #1
 8004b42:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
 8004b44:	4b08      	ldr	r3, [pc, #32]	; (8004b68 <prvTraceUpdateCounters+0x3c>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	69da      	ldr	r2, [r3, #28]
 8004b4a:	3201      	adds	r2, #1
 8004b4c:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 8004b4e:	4b06      	ldr	r3, [pc, #24]	; (8004b68 <prvTraceUpdateCounters+0x3c>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	69da      	ldr	r2, [r3, #28]
 8004b54:	23fa      	movs	r3, #250	; 0xfa
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d303      	bcc.n	8004b64 <prvTraceUpdateCounters+0x38>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
		RecorderDataPtr->nextFreeIndex = 0;
#else
		vTraceStop();
 8004b5c:	f7fe ff7a 	bl	8003a54 <vTraceStop>
 8004b60:	e000      	b.n	8004b64 <prvTraceUpdateCounters+0x38>
		return;
 8004b62:	46c0      	nop			; (mov r8, r8)
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
#endif
}
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	20003488 	.word	0x20003488

08004b6c <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
 8004b6c:	b590      	push	{r4, r7, lr}
 8004b6e:	b087      	sub	sp, #28
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	0002      	movs	r2, r0
 8004b74:	1dbb      	adds	r3, r7, #6
 8004b76:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
 8004b80:	2300      	movs	r3, #0
 8004b82:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
 8004b84:	1dbb      	adds	r3, r7, #6
 8004b86:	881b      	ldrh	r3, [r3, #0]
 8004b88:	2bff      	cmp	r3, #255	; 0xff
 8004b8a:	d00a      	beq.n	8004ba2 <prvTraceGetDTS+0x36>
 8004b8c:	1dbb      	adds	r3, r7, #6
 8004b8e:	881b      	ldrh	r3, [r3, #0]
 8004b90:	4a5f      	ldr	r2, [pc, #380]	; (8004d10 <prvTraceGetDTS+0x1a4>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d005      	beq.n	8004ba2 <prvTraceGetDTS+0x36>
 8004b96:	4b5f      	ldr	r3, [pc, #380]	; (8004d14 <prvTraceGetDTS+0x1a8>)
 8004b98:	0018      	movs	r0, r3
 8004b9a:	f7ff ff99 	bl	8004ad0 <prvTraceError>
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	e0b2      	b.n	8004d08 <prvTraceGetDTS+0x19c>

	
	if (RecorderDataPtr->frequency == 0)
 8004ba2:	4b5d      	ldr	r3, [pc, #372]	; (8004d18 <prvTraceGetDTS+0x1ac>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d114      	bne.n	8004bd6 <prvTraceGetDTS+0x6a>
	{	
		if (timestampFrequency != 0)
 8004bac:	4b5b      	ldr	r3, [pc, #364]	; (8004d1c <prvTraceGetDTS+0x1b0>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d006      	beq.n	8004bc2 <prvTraceGetDTS+0x56>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
 8004bb4:	4b59      	ldr	r3, [pc, #356]	; (8004d1c <prvTraceGetDTS+0x1b0>)
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	4b57      	ldr	r3, [pc, #348]	; (8004d18 <prvTraceGetDTS+0x1ac>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	0892      	lsrs	r2, r2, #2
 8004bbe:	625a      	str	r2, [r3, #36]	; 0x24
 8004bc0:	e009      	b.n	8004bd6 <prvTraceGetDTS+0x6a>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
 8004bc2:	4b57      	ldr	r3, [pc, #348]	; (8004d20 <prvTraceGetDTS+0x1b4>)
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	4b57      	ldr	r3, [pc, #348]	; (8004d24 <prvTraceGetDTS+0x1b8>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d003      	beq.n	8004bd6 <prvTraceGetDTS+0x6a>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
 8004bce:	4b52      	ldr	r3, [pc, #328]	; (8004d18 <prvTraceGetDTS+0x1ac>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a55      	ldr	r2, [pc, #340]	; (8004d28 <prvTraceGetDTS+0x1bc>)
 8004bd4:	625a      	str	r2, [r3, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
 8004bd6:	230c      	movs	r3, #12
 8004bd8:	18fb      	adds	r3, r7, r3
 8004bda:	0018      	movs	r0, r3
 8004bdc:	f000 f8aa 	bl	8004d34 <prvTracePortGetTimeStamp>
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	4b52      	ldr	r3, [pc, #328]	; (8004d2c <prvTraceGetDTS+0x1c0>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	4b4f      	ldr	r3, [pc, #316]	; (8004d2c <prvTraceGetDTS+0x1c0>)
 8004bee:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
 8004bf0:	4b49      	ldr	r3, [pc, #292]	; (8004d18 <prvTraceGetDTS+0x1ac>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d047      	beq.n	8004c8a <prvTraceGetDTS+0x11e>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
 8004bfa:	4b47      	ldr	r3, [pc, #284]	; (8004d18 <prvTraceGetDTS+0x1ac>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d921      	bls.n	8004c4a <prvTraceGetDTS+0xde>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
 8004c06:	4b44      	ldr	r3, [pc, #272]	; (8004d18 <prvTraceGetDTS+0x1ac>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8004c0c:	4b42      	ldr	r3, [pc, #264]	; (8004d18 <prvTraceGetDTS+0x1ac>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c12:	0019      	movs	r1, r3
 8004c14:	6938      	ldr	r0, [r7, #16]
 8004c16:	f7fb fa77 	bl	8000108 <__udivsi3>
 8004c1a:	0003      	movs	r3, r0
 8004c1c:	001a      	movs	r2, r3
 8004c1e:	4b3e      	ldr	r3, [pc, #248]	; (8004d18 <prvTraceGetDTS+0x1ac>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	18a2      	adds	r2, r4, r2
 8004c24:	62da      	str	r2, [r3, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
 8004c26:	4b3c      	ldr	r3, [pc, #240]	; (8004d18 <prvTraceGetDTS+0x1ac>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8004c2c:	4b3a      	ldr	r3, [pc, #232]	; (8004d18 <prvTraceGetDTS+0x1ac>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	0011      	movs	r1, r2
 8004c36:	0018      	movs	r0, r3
 8004c38:	f7fb faec 	bl	8000214 <__aeabi_uidivmod>
 8004c3c:	000b      	movs	r3, r1
 8004c3e:	001a      	movs	r2, r3
 8004c40:	4b35      	ldr	r3, [pc, #212]	; (8004d18 <prvTraceGetDTS+0x1ac>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	18a2      	adds	r2, r4, r2
 8004c46:	629a      	str	r2, [r3, #40]	; 0x28
 8004c48:	e007      	b.n	8004c5a <prvTraceGetDTS+0xee>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
 8004c4a:	4b33      	ldr	r3, [pc, #204]	; (8004d18 <prvTraceGetDTS+0x1ac>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004c50:	4b31      	ldr	r3, [pc, #196]	; (8004d18 <prvTraceGetDTS+0x1ac>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	188a      	adds	r2, r1, r2
 8004c58:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
 8004c5a:	4b2f      	ldr	r3, [pc, #188]	; (8004d18 <prvTraceGetDTS+0x1ac>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c60:	4b2d      	ldr	r3, [pc, #180]	; (8004d18 <prvTraceGetDTS+0x1ac>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d313      	bcc.n	8004c92 <prvTraceGetDTS+0x126>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
 8004c6a:	4b2b      	ldr	r3, [pc, #172]	; (8004d18 <prvTraceGetDTS+0x1ac>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c70:	3201      	adds	r2, #1
 8004c72:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
 8004c74:	4b28      	ldr	r3, [pc, #160]	; (8004d18 <prvTraceGetDTS+0x1ac>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004c7a:	4b27      	ldr	r3, [pc, #156]	; (8004d18 <prvTraceGetDTS+0x1ac>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c80:	4b25      	ldr	r3, [pc, #148]	; (8004d18 <prvTraceGetDTS+0x1ac>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	1a8a      	subs	r2, r1, r2
 8004c86:	629a      	str	r2, [r3, #40]	; 0x28
 8004c88:	e003      	b.n	8004c92 <prvTraceGetDTS+0x126>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
 8004c8a:	4b23      	ldr	r3, [pc, #140]	; (8004d18 <prvTraceGetDTS+0x1ac>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
 8004c92:	1dbb      	adds	r3, r7, #6
 8004c94:	881b      	ldrh	r3, [r3, #0]
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d92f      	bls.n	8004cfc <prvTraceGetDTS+0x190>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
 8004c9c:	f7ff fd06 	bl	80046ac <prvTraceNextFreeEventBufferSlot>
 8004ca0:	0003      	movs	r3, r0
 8004ca2:	617b      	str	r3, [r7, #20]

		if (xts != NULL)
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d028      	beq.n	8004cfc <prvTraceGetDTS+0x190>
		{
			if (param_maxDTS == 0xFFFF)
 8004caa:	1dbb      	adds	r3, r7, #6
 8004cac:	881b      	ldrh	r3, [r3, #0]
 8004cae:	4a18      	ldr	r2, [pc, #96]	; (8004d10 <prvTraceGetDTS+0x1a4>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d10b      	bne.n	8004ccc <prvTraceGetDTS+0x160>
			{
				xts->type = XTS16;
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	22a9      	movs	r2, #169	; 0xa9
 8004cb8:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	0c1b      	lsrs	r3, r3, #16
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	705a      	strb	r2, [r3, #1]
 8004cca:	e015      	b.n	8004cf8 <prvTraceGetDTS+0x18c>
			}
			else if (param_maxDTS == 0xFF)
 8004ccc:	1dbb      	adds	r3, r7, #6
 8004cce:	881b      	ldrh	r3, [r3, #0]
 8004cd0:	2bff      	cmp	r3, #255	; 0xff
 8004cd2:	d10d      	bne.n	8004cf0 <prvTraceGetDTS+0x184>
			{
				xts->type = XTS8;
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	22a8      	movs	r2, #168	; 0xa8
 8004cd8:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	0a1b      	lsrs	r3, r3, #8
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	0e1b      	lsrs	r3, r3, #24
 8004ce8:	b2da      	uxtb	r2, r3
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	705a      	strb	r2, [r3, #1]
 8004cee:	e003      	b.n	8004cf8 <prvTraceGetDTS+0x18c>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
 8004cf0:	4b0f      	ldr	r3, [pc, #60]	; (8004d30 <prvTraceGetDTS+0x1c4>)
 8004cf2:	0018      	movs	r0, r3
 8004cf4:	f7ff feec 	bl	8004ad0 <prvTraceError>
			}
			prvTraceUpdateCounters();
 8004cf8:	f7ff ff18 	bl	8004b2c <prvTraceUpdateCounters>
		}
	}

	return (uint16_t)dts & param_maxDTS;
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	1dba      	adds	r2, r7, #6
 8004d02:	8812      	ldrh	r2, [r2, #0]
 8004d04:	4013      	ands	r3, r2
 8004d06:	b29b      	uxth	r3, r3
}
 8004d08:	0018      	movs	r0, r3
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	b007      	add	sp, #28
 8004d0e:	bd90      	pop	{r4, r7, pc}
 8004d10:	0000ffff 	.word	0x0000ffff
 8004d14:	08006dc0 	.word	0x08006dc0
 8004d18:	20003488 	.word	0x20003488
 8004d1c:	20001d94 	.word	0x20001d94
 8004d20:	e000e018 	.word	0xe000e018
 8004d24:	20001da0 	.word	0x20001da0
 8004d28:	00b71b00 	.word	0x00b71b00
 8004d2c:	20003498 	.word	0x20003498
 8004d30:	08006e00 	.word	0x08006e00

08004d34 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
 8004d40:	2300      	movs	r3, #0
 8004d42:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
 8004d44:	4b2d      	ldr	r3, [pc, #180]	; (8004dfc <prvTracePortGetTimeStamp+0xc8>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d107      	bne.n	8004d5c <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d04f      	beq.n	8004df2 <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
 8004d52:	4b2b      	ldr	r3, [pc, #172]	; (8004e00 <prvTracePortGetTimeStamp+0xcc>)
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	601a      	str	r2, [r3, #0]
		return;
 8004d5a:	e04a      	b.n	8004df2 <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
 8004d5c:	4b29      	ldr	r3, [pc, #164]	; (8004e04 <prvTracePortGetTimeStamp+0xd0>)
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	4b29      	ldr	r3, [pc, #164]	; (8004e08 <prvTracePortGetTimeStamp+0xd4>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	3301      	adds	r3, #1
 8004d68:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
 8004d6a:	4b28      	ldr	r3, [pc, #160]	; (8004e0c <prvTracePortGetTimeStamp+0xd8>)
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	4b28      	ldr	r3, [pc, #160]	; (8004e10 <prvTracePortGetTimeStamp+0xdc>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	3b01      	subs	r3, #1
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	db03      	blt.n	8004d82 <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
 8004d7a:	4b24      	ldr	r3, [pc, #144]	; (8004e0c <prvTracePortGetTimeStamp+0xd8>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	60fb      	str	r3, [r7, #12]
 8004d80:	e002      	b.n	8004d88 <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
 8004d82:	4b23      	ldr	r3, [pc, #140]	; (8004e10 <prvTracePortGetTimeStamp+0xdc>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
 8004d88:	4b20      	ldr	r3, [pc, #128]	; (8004e0c <prvTracePortGetTimeStamp+0xd8>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d107      	bne.n	8004da2 <prvTracePortGetTimeStamp+0x6e>
 8004d92:	4b20      	ldr	r3, [pc, #128]	; (8004e14 <prvTracePortGetTimeStamp+0xe0>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68ba      	ldr	r2, [r7, #8]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d202      	bcs.n	8004da2 <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	3301      	adds	r3, #1
 8004da0:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d016      	beq.n	8004dd6 <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
 8004da8:	4b16      	ldr	r3, [pc, #88]	; (8004e04 <prvTracePortGetTimeStamp+0xd0>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	3301      	adds	r3, #1
 8004dae:	089b      	lsrs	r3, r3, #2
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	435a      	muls	r2, r3
 8004db4:	4b12      	ldr	r3, [pc, #72]	; (8004e00 <prvTracePortGetTimeStamp+0xcc>)
 8004db6:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
 8004db8:	4b12      	ldr	r3, [pc, #72]	; (8004e04 <prvTracePortGetTimeStamp+0xd0>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	2203      	movs	r2, #3
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	435a      	muls	r2, r3
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	18d3      	adds	r3, r2, r3
 8004dca:	089a      	lsrs	r2, r3, #2
 8004dcc:	4b0c      	ldr	r3, [pc, #48]	; (8004e00 <prvTracePortGetTimeStamp+0xcc>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	18d2      	adds	r2, r2, r3
 8004dd2:	4b0b      	ldr	r3, [pc, #44]	; (8004e00 <prvTracePortGetTimeStamp+0xcc>)
 8004dd4:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
 8004dd6:	4b0d      	ldr	r3, [pc, #52]	; (8004e0c <prvTracePortGetTimeStamp+0xd8>)
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d003      	beq.n	8004dea <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
 8004de2:	4b07      	ldr	r3, [pc, #28]	; (8004e00 <prvTracePortGetTimeStamp+0xcc>)
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
 8004dea:	4b0a      	ldr	r3, [pc, #40]	; (8004e14 <prvTracePortGetTimeStamp+0xe0>)
 8004dec:	68ba      	ldr	r2, [r7, #8]
 8004dee:	601a      	str	r2, [r3, #0]
 8004df0:	e000      	b.n	8004df4 <prvTracePortGetTimeStamp+0xc0>
		return;
 8004df2:	46c0      	nop			; (mov r8, r8)
}
 8004df4:	46bd      	mov	sp, r7
 8004df6:	b004      	add	sp, #16
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	46c0      	nop			; (mov r8, r8)
 8004dfc:	20001d84 	.word	0x20001d84
 8004e00:	20001d88 	.word	0x20001d88
 8004e04:	e000e014 	.word	0xe000e014
 8004e08:	e000e018 	.word	0xe000e018
 8004e0c:	2000349c 	.word	0x2000349c
 8004e10:	20001d80 	.word	0x20001d80
 8004e14:	200034a0 	.word	0x200034a0

08004e18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	0002      	movs	r2, r0
 8004e20:	1dfb      	adds	r3, r7, #7
 8004e22:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004e24:	1dfb      	adds	r3, r7, #7
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	2b7f      	cmp	r3, #127	; 0x7f
 8004e2a:	d809      	bhi.n	8004e40 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e2c:	1dfb      	adds	r3, r7, #7
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	001a      	movs	r2, r3
 8004e32:	231f      	movs	r3, #31
 8004e34:	401a      	ands	r2, r3
 8004e36:	4b04      	ldr	r3, [pc, #16]	; (8004e48 <__NVIC_EnableIRQ+0x30>)
 8004e38:	2101      	movs	r1, #1
 8004e3a:	4091      	lsls	r1, r2
 8004e3c:	000a      	movs	r2, r1
 8004e3e:	601a      	str	r2, [r3, #0]
  }
}
 8004e40:	46c0      	nop			; (mov r8, r8)
 8004e42:	46bd      	mov	sp, r7
 8004e44:	b002      	add	sp, #8
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	e000e100 	.word	0xe000e100

08004e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e4c:	b590      	push	{r4, r7, lr}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	0002      	movs	r2, r0
 8004e54:	6039      	str	r1, [r7, #0]
 8004e56:	1dfb      	adds	r3, r7, #7
 8004e58:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004e5a:	1dfb      	adds	r3, r7, #7
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	2b7f      	cmp	r3, #127	; 0x7f
 8004e60:	d828      	bhi.n	8004eb4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e62:	4a2f      	ldr	r2, [pc, #188]	; (8004f20 <__NVIC_SetPriority+0xd4>)
 8004e64:	1dfb      	adds	r3, r7, #7
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	b25b      	sxtb	r3, r3
 8004e6a:	089b      	lsrs	r3, r3, #2
 8004e6c:	33c0      	adds	r3, #192	; 0xc0
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	589b      	ldr	r3, [r3, r2]
 8004e72:	1dfa      	adds	r2, r7, #7
 8004e74:	7812      	ldrb	r2, [r2, #0]
 8004e76:	0011      	movs	r1, r2
 8004e78:	2203      	movs	r2, #3
 8004e7a:	400a      	ands	r2, r1
 8004e7c:	00d2      	lsls	r2, r2, #3
 8004e7e:	21ff      	movs	r1, #255	; 0xff
 8004e80:	4091      	lsls	r1, r2
 8004e82:	000a      	movs	r2, r1
 8004e84:	43d2      	mvns	r2, r2
 8004e86:	401a      	ands	r2, r3
 8004e88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	019b      	lsls	r3, r3, #6
 8004e8e:	22ff      	movs	r2, #255	; 0xff
 8004e90:	401a      	ands	r2, r3
 8004e92:	1dfb      	adds	r3, r7, #7
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	0018      	movs	r0, r3
 8004e98:	2303      	movs	r3, #3
 8004e9a:	4003      	ands	r3, r0
 8004e9c:	00db      	lsls	r3, r3, #3
 8004e9e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ea0:	481f      	ldr	r0, [pc, #124]	; (8004f20 <__NVIC_SetPriority+0xd4>)
 8004ea2:	1dfb      	adds	r3, r7, #7
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	b25b      	sxtb	r3, r3
 8004ea8:	089b      	lsrs	r3, r3, #2
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	33c0      	adds	r3, #192	; 0xc0
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004eb2:	e031      	b.n	8004f18 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004eb4:	4a1b      	ldr	r2, [pc, #108]	; (8004f24 <__NVIC_SetPriority+0xd8>)
 8004eb6:	1dfb      	adds	r3, r7, #7
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	0019      	movs	r1, r3
 8004ebc:	230f      	movs	r3, #15
 8004ebe:	400b      	ands	r3, r1
 8004ec0:	3b08      	subs	r3, #8
 8004ec2:	089b      	lsrs	r3, r3, #2
 8004ec4:	3306      	adds	r3, #6
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	18d3      	adds	r3, r2, r3
 8004eca:	3304      	adds	r3, #4
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	1dfa      	adds	r2, r7, #7
 8004ed0:	7812      	ldrb	r2, [r2, #0]
 8004ed2:	0011      	movs	r1, r2
 8004ed4:	2203      	movs	r2, #3
 8004ed6:	400a      	ands	r2, r1
 8004ed8:	00d2      	lsls	r2, r2, #3
 8004eda:	21ff      	movs	r1, #255	; 0xff
 8004edc:	4091      	lsls	r1, r2
 8004ede:	000a      	movs	r2, r1
 8004ee0:	43d2      	mvns	r2, r2
 8004ee2:	401a      	ands	r2, r3
 8004ee4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	019b      	lsls	r3, r3, #6
 8004eea:	22ff      	movs	r2, #255	; 0xff
 8004eec:	401a      	ands	r2, r3
 8004eee:	1dfb      	adds	r3, r7, #7
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	0018      	movs	r0, r3
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	4003      	ands	r3, r0
 8004ef8:	00db      	lsls	r3, r3, #3
 8004efa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004efc:	4809      	ldr	r0, [pc, #36]	; (8004f24 <__NVIC_SetPriority+0xd8>)
 8004efe:	1dfb      	adds	r3, r7, #7
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	001c      	movs	r4, r3
 8004f04:	230f      	movs	r3, #15
 8004f06:	4023      	ands	r3, r4
 8004f08:	3b08      	subs	r3, #8
 8004f0a:	089b      	lsrs	r3, r3, #2
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	3306      	adds	r3, #6
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	18c3      	adds	r3, r0, r3
 8004f14:	3304      	adds	r3, #4
 8004f16:	601a      	str	r2, [r3, #0]
}
 8004f18:	46c0      	nop			; (mov r8, r8)
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	b003      	add	sp, #12
 8004f1e:	bd90      	pop	{r4, r7, pc}
 8004f20:	e000e100 	.word	0xe000e100
 8004f24:	e000ed00 	.word	0xe000ed00

08004f28 <main>:
	const TickType_t ticks = pdMS_TO_TICKS(milliseconds);
	vTaskDelay(ticks);
}
// Main program
int main()
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af02      	add	r7, sp, #8
	// Configure System Clock
	SystemClock_Config();
 8004f2e:	f000 f97d 	bl	800522c <SystemClock_Config>

	// Initialize LED pin
	BSP_LED_Init();
 8004f32:	f000 fc4f 	bl	80057d4 <BSP_LED_Init>

	// Initialize the user Push-Button
	BSP_PB_Init();
 8004f36:	f000 fc99 	bl	800586c <BSP_PB_Init>

	// Initialize Debug Console
	BSP_Console_Init();
 8004f3a:	f000 fcb9 	bl	80058b0 <BSP_Console_Init>

	// Initialize NVIC
	BSP_NVIC_Init();
 8004f3e:	f000 fd85 	bl	8005a4c <BSP_NVIC_Init>
	// NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 1);

	// Enable DMA1_Channel5 interrupts
	// NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
	// Start Trace Recording
	vTraceEnable(TRC_START);
 8004f42:	2001      	movs	r0, #1
 8004f44:	f7fe fb4e 	bl	80035e4 <vTraceEnable>
	// Create Queue to hold console messages
	xConsoleQueue = xQueueCreate(10, sizeof(message_t *));
 8004f48:	2200      	movs	r2, #0
 8004f4a:	2104      	movs	r1, #4
 8004f4c:	200a      	movs	r0, #10
 8004f4e:	f7fb fa61 	bl	8000414 <xQueueGenericCreate>
 8004f52:	0002      	movs	r2, r0
 8004f54:	4b29      	ldr	r3, [pc, #164]	; (8004ffc <main+0xd4>)
 8004f56:	601a      	str	r2, [r3, #0]
	xPublishQueue = xQueueCreate(10, sizeof(message_t *));
 8004f58:	2200      	movs	r2, #0
 8004f5a:	2104      	movs	r1, #4
 8004f5c:	200a      	movs	r0, #10
 8004f5e:	f7fb fa59 	bl	8000414 <xQueueGenericCreate>
 8004f62:	0002      	movs	r2, r0
 8004f64:	4b26      	ldr	r3, [pc, #152]	; (8005000 <main+0xd8>)
 8004f66:	601a      	str	r2, [r3, #0]

	// Give a nice name to the Queue in the trace recorder
	vTraceSetQueueName(xConsoleQueue, "Console Queue");
 8004f68:	4b24      	ldr	r3, [pc, #144]	; (8004ffc <main+0xd4>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a25      	ldr	r2, [pc, #148]	; (8005004 <main+0xdc>)
 8004f6e:	0011      	movs	r1, r2
 8004f70:	0018      	movs	r0, r3
 8004f72:	f7fe fb1a 	bl	80035aa <vTraceSetQueueName>
	// Create Semaphore object (this is not a 'give')
	xSem1 = xSemaphoreCreateBinary();
 8004f76:	2203      	movs	r2, #3
 8004f78:	2100      	movs	r1, #0
 8004f7a:	2001      	movs	r0, #1
 8004f7c:	f7fb fa4a 	bl	8000414 <xQueueGenericCreate>
 8004f80:	0002      	movs	r2, r0
 8004f82:	4b21      	ldr	r3, [pc, #132]	; (8005008 <main+0xe0>)
 8004f84:	601a      	str	r2, [r3, #0]
	xSem2 = xSemaphoreCreateBinary();
 8004f86:	2203      	movs	r2, #3
 8004f88:	2100      	movs	r1, #0
 8004f8a:	2001      	movs	r0, #1
 8004f8c:	f7fb fa42 	bl	8000414 <xQueueGenericCreate>
 8004f90:	0002      	movs	r2, r0
 8004f92:	4b1e      	ldr	r3, [pc, #120]	; (800500c <main+0xe4>)
 8004f94:	601a      	str	r2, [r3, #0]
	// xSemTC = xSemaphoreCreateBinary();
	xTask_Pere = xSemaphoreCreateMutex();
 8004f96:	2001      	movs	r0, #1
 8004f98:	f7fb fb5e 	bl	8000658 <xQueueCreateMutex>
 8004f9c:	0002      	movs	r2, r0
 8004f9e:	4b1c      	ldr	r3, [pc, #112]	; (8005010 <main+0xe8>)
 8004fa0:	601a      	str	r2, [r3, #0]
	xSem_DMA_TC = xSemaphoreCreateBinary();
 8004fa2:	2203      	movs	r2, #3
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	2001      	movs	r0, #1
 8004fa8:	f7fb fa34 	bl	8000414 <xQueueGenericCreate>
 8004fac:	0002      	movs	r2, r0
 8004fae:	4b19      	ldr	r3, [pc, #100]	; (8005014 <main+0xec>)
 8004fb0:	601a      	str	r2, [r3, #0]
	// init_vet();

	xTaskCreate(vTask1, "Task_1", 256, NULL, 1, NULL);
 8004fb2:	2380      	movs	r3, #128	; 0x80
 8004fb4:	005a      	lsls	r2, r3, #1
 8004fb6:	4918      	ldr	r1, [pc, #96]	; (8005018 <main+0xf0>)
 8004fb8:	4818      	ldr	r0, [pc, #96]	; (800501c <main+0xf4>)
 8004fba:	2300      	movs	r3, #0
 8004fbc:	9301      	str	r3, [sp, #4]
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	9300      	str	r3, [sp, #0]
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	f7fc fcab 	bl	800191e <xTaskCreate>
	xTaskCreate(vTask2, "Task_2", 256, NULL, 1, NULL);
 8004fc8:	2380      	movs	r3, #128	; 0x80
 8004fca:	005a      	lsls	r2, r3, #1
 8004fcc:	4914      	ldr	r1, [pc, #80]	; (8005020 <main+0xf8>)
 8004fce:	4815      	ldr	r0, [pc, #84]	; (8005024 <main+0xfc>)
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	9301      	str	r3, [sp, #4]
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	9300      	str	r3, [sp, #0]
 8004fd8:	2300      	movs	r3, #0
 8004fda:	f7fc fca0 	bl	800191e <xTaskCreate>
	xTaskCreate(vTask_Write, "vTask_Write", 256, NULL, 1, NULL);
 8004fde:	2380      	movs	r3, #128	; 0x80
 8004fe0:	005a      	lsls	r2, r3, #1
 8004fe2:	4911      	ldr	r1, [pc, #68]	; (8005028 <main+0x100>)
 8004fe4:	4811      	ldr	r0, [pc, #68]	; (800502c <main+0x104>)
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	9301      	str	r3, [sp, #4]
 8004fea:	2301      	movs	r3, #1
 8004fec:	9300      	str	r3, [sp, #0]
 8004fee:	2300      	movs	r3, #0
 8004ff0:	f7fc fc95 	bl	800191e <xTaskCreate>

	vTaskStartScheduler();
 8004ff4:	f7fc fe96 	bl	8001d24 <vTaskStartScheduler>
	// my_printf("SYSCLK = %2d Hz \r\n",SystemCoreClock);
	while (1)
 8004ff8:	e7fe      	b.n	8004ff8 <main+0xd0>
 8004ffa:	46c0      	nop			; (mov r8, r8)
 8004ffc:	200034b4 	.word	0x200034b4
 8005000:	200034b8 	.word	0x200034b8
 8005004:	08006fec 	.word	0x08006fec
 8005008:	200034a4 	.word	0x200034a4
 800500c:	200034a8 	.word	0x200034a8
 8005010:	200034ac 	.word	0x200034ac
 8005014:	200034b0 	.word	0x200034b0
 8005018:	08006ffc 	.word	0x08006ffc
 800501c:	08005031 	.word	0x08005031
 8005020:	08007004 	.word	0x08007004
 8005024:	080050bd 	.word	0x080050bd
 8005028:	0800700c 	.word	0x0800700c
 800502c:	08005149 	.word	0x08005149

08005030 <vTask1>:
		// The program should never be here...
	}
}

void vTask1(void *pvParameters)
{
 8005030:	b590      	push	{r4, r7, lr}
 8005032:	b095      	sub	sp, #84	; 0x54
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
	message_t carac;
	message_t *pcarac;
	portBASE_TYPE xStatus;
	xSemaphoreTake(xSem1, 0);
 8005038:	4b1c      	ldr	r3, [pc, #112]	; (80050ac <vTask1+0x7c>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2100      	movs	r1, #0
 800503e:	0018      	movs	r0, r3
 8005040:	f7fc f8d6 	bl	80011f0 <xQueueSemaphoreTake>
	while (1)
	{
		xStatus = xSemaphoreTake(xSem1, 500);
 8005044:	4b19      	ldr	r3, [pc, #100]	; (80050ac <vTask1+0x7c>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	22fa      	movs	r2, #250	; 0xfa
 800504a:	0052      	lsls	r2, r2, #1
 800504c:	0011      	movs	r1, r2
 800504e:	0018      	movs	r0, r3
 8005050:	f7fc f8ce 	bl	80011f0 <xQueueSemaphoreTake>
 8005054:	0003      	movs	r3, r0
 8005056:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (xStatus == pdPASS)
 8005058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800505a:	2b01      	cmp	r3, #1
 800505c:	d11d      	bne.n	800509a <vTask1+0x6a>
		{

			// subscribe("Arthour ! Pas changer assiette pour fromage !\r\n");
			my_sprintf((char *)carac, "Arthour ! Pas changer assiette pour fromage !\r\n");
 800505e:	4a14      	ldr	r2, [pc, #80]	; (80050b0 <vTask1+0x80>)
 8005060:	2410      	movs	r4, #16
 8005062:	193b      	adds	r3, r7, r4
 8005064:	0011      	movs	r1, r2
 8005066:	0018      	movs	r0, r3
 8005068:	f000 fb6e 	bl	8005748 <my_sprintf>
			pcarac = &carac;
 800506c:	193b      	adds	r3, r7, r4
 800506e:	60fb      	str	r3, [r7, #12]

			// Send message to Console Queue
			// pm = &carac;
			if (xQueueSendToBack(xPublishQueue, &pcarac, 0) == pdTRUE)
 8005070:	4b10      	ldr	r3, [pc, #64]	; (80050b4 <vTask1+0x84>)
 8005072:	6818      	ldr	r0, [r3, #0]
 8005074:	230c      	movs	r3, #12
 8005076:	18f9      	adds	r1, r7, r3
 8005078:	2300      	movs	r3, #0
 800507a:	2200      	movs	r2, #0
 800507c:	f7fb fb08 	bl	8000690 <xQueueGenericSend>
 8005080:	0003      	movs	r3, r0
 8005082:	2b01      	cmp	r3, #1
 8005084:	d104      	bne.n	8005090 <vTask1+0x60>
			{
				count++;
 8005086:	4b0c      	ldr	r3, [pc, #48]	; (80050b8 <vTask1+0x88>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	1c5a      	adds	r2, r3, #1
 800508c:	4b0a      	ldr	r3, [pc, #40]	; (80050b8 <vTask1+0x88>)
 800508e:	601a      	str	r2, [r3, #0]
			}
			// task1_ready = true;
			vTaskDelay(4000 / portTICK_RATE_MS);
 8005090:	23c8      	movs	r3, #200	; 0xc8
 8005092:	005b      	lsls	r3, r3, #1
 8005094:	0018      	movs	r0, r3
 8005096:	f7fc fde7 	bl	8001c68 <vTaskDelay>
			// delay_ms(5000);
		}
		xSemaphoreGive(xSem1);
 800509a:	4b04      	ldr	r3, [pc, #16]	; (80050ac <vTask1+0x7c>)
 800509c:	6818      	ldr	r0, [r3, #0]
 800509e:	2300      	movs	r3, #0
 80050a0:	2200      	movs	r2, #0
 80050a2:	2100      	movs	r1, #0
 80050a4:	f7fb faf4 	bl	8000690 <xQueueGenericSend>
		xStatus = xSemaphoreTake(xSem1, 500);
 80050a8:	e7cc      	b.n	8005044 <vTask1+0x14>
 80050aa:	46c0      	nop			; (mov r8, r8)
 80050ac:	200034a4 	.word	0x200034a4
 80050b0:	08007018 	.word	0x08007018
 80050b4:	200034b8 	.word	0x200034b8
 80050b8:	200034bc 	.word	0x200034bc

080050bc <vTask2>:
	}
}

void vTask2(void *pvParameters)
{
 80050bc:	b590      	push	{r4, r7, lr}
 80050be:	b095      	sub	sp, #84	; 0x54
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
	message_t carac;
	message_t *pcarac;
	portBASE_TYPE xStatus;
	xSemaphoreTake(xSem2, 0);
 80050c4:	4b1c      	ldr	r3, [pc, #112]	; (8005138 <vTask2+0x7c>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2100      	movs	r1, #0
 80050ca:	0018      	movs	r0, r3
 80050cc:	f7fc f890 	bl	80011f0 <xQueueSemaphoreTake>
	while (1)
	{
		xStatus = xSemaphoreTake(xSem2, 500);
 80050d0:	4b19      	ldr	r3, [pc, #100]	; (8005138 <vTask2+0x7c>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	22fa      	movs	r2, #250	; 0xfa
 80050d6:	0052      	lsls	r2, r2, #1
 80050d8:	0011      	movs	r1, r2
 80050da:	0018      	movs	r0, r3
 80050dc:	f7fc f888 	bl	80011f0 <xQueueSemaphoreTake>
 80050e0:	0003      	movs	r3, r0
 80050e2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (xStatus == pdPASS)
 80050e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d11d      	bne.n	8005126 <vTask2+0x6a>
		{

			//subscribe("Arthour ! Couhillere !\r\n");
			my_sprintf((char *)carac, "Arthour ! Couhillere !\r\n");
 80050ea:	4a14      	ldr	r2, [pc, #80]	; (800513c <vTask2+0x80>)
 80050ec:	2410      	movs	r4, #16
 80050ee:	193b      	adds	r3, r7, r4
 80050f0:	0011      	movs	r1, r2
 80050f2:	0018      	movs	r0, r3
 80050f4:	f000 fb28 	bl	8005748 <my_sprintf>
			pcarac = &carac;
 80050f8:	193b      	adds	r3, r7, r4
 80050fa:	60fb      	str	r3, [r7, #12]

			// Send message to Console Queue
			// pm = &carac;
			if (xQueueSendToBack(xPublishQueue, &pcarac, 0) == pdTRUE)
 80050fc:	4b10      	ldr	r3, [pc, #64]	; (8005140 <vTask2+0x84>)
 80050fe:	6818      	ldr	r0, [r3, #0]
 8005100:	230c      	movs	r3, #12
 8005102:	18f9      	adds	r1, r7, r3
 8005104:	2300      	movs	r3, #0
 8005106:	2200      	movs	r2, #0
 8005108:	f7fb fac2 	bl	8000690 <xQueueGenericSend>
 800510c:	0003      	movs	r3, r0
 800510e:	2b01      	cmp	r3, #1
 8005110:	d104      	bne.n	800511c <vTask2+0x60>
			{
				count++;
 8005112:	4b0c      	ldr	r3, [pc, #48]	; (8005144 <vTask2+0x88>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	1c5a      	adds	r2, r3, #1
 8005118:	4b0a      	ldr	r3, [pc, #40]	; (8005144 <vTask2+0x88>)
 800511a:	601a      	str	r2, [r3, #0]
			}
			// task2_ready = true;
			vTaskDelay(4000 / portTICK_RATE_MS);
 800511c:	23c8      	movs	r3, #200	; 0xc8
 800511e:	005b      	lsls	r3, r3, #1
 8005120:	0018      	movs	r0, r3
 8005122:	f7fc fda1 	bl	8001c68 <vTaskDelay>
			// delay_ms(4000);
		}
		xSemaphoreGive(xSem2);
 8005126:	4b04      	ldr	r3, [pc, #16]	; (8005138 <vTask2+0x7c>)
 8005128:	6818      	ldr	r0, [r3, #0]
 800512a:	2300      	movs	r3, #0
 800512c:	2200      	movs	r2, #0
 800512e:	2100      	movs	r1, #0
 8005130:	f7fb faae 	bl	8000690 <xQueueGenericSend>
		xStatus = xSemaphoreTake(xSem2, 500);
 8005134:	e7cc      	b.n	80050d0 <vTask2+0x14>
 8005136:	46c0      	nop			; (mov r8, r8)
 8005138:	200034a8 	.word	0x200034a8
 800513c:	08007048 	.word	0x08007048
 8005140:	200034b8 	.word	0x200034b8
 8005144:	200034bc 	.word	0x200034bc

08005148 <vTask_Write>:
}
*/

// In French, is the definition on TP3.
void vTask_Write(void *pvParameters)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
	message_t *message;
	uint8_t cnt = 0;
 8005150:	230f      	movs	r3, #15
 8005152:	18fb      	adds	r3, r7, r3
 8005154:	2200      	movs	r2, #0
 8005156:	701a      	strb	r2, [r3, #0]

	// Set priority level 1 for DMA1 interrupt -> reading the sensor values is our highest priority
	NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 1);
 8005158:	2106      	movs	r1, #6
 800515a:	200b      	movs	r0, #11
 800515c:	f7ff fe76 	bl	8004e4c <__NVIC_SetPriority>

	// Enable DMA1 interrupts
	NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8005160:	200b      	movs	r0, #11
 8005162:	f7ff fe59 	bl	8004e18 <__NVIC_EnableIRQ>

	while (1)
	{
		xQueueReceive(xPublishQueue, &message, portMAX_DELAY);
 8005166:	4b2c      	ldr	r3, [pc, #176]	; (8005218 <vTask_Write+0xd0>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2201      	movs	r2, #1
 800516c:	4252      	negs	r2, r2
 800516e:	2108      	movs	r1, #8
 8005170:	1879      	adds	r1, r7, r1
 8005172:	0018      	movs	r0, r3
 8005174:	f7fb fe56 	bl	8000e24 <xQueueReceive>
		// The message was taken as expected

		cnt = 0;
 8005178:	230f      	movs	r3, #15
 800517a:	18fb      	adds	r3, r7, r3
 800517c:	2200      	movs	r2, #0
 800517e:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < SIZE_DMA_CHANNEL_5; i++)
 8005180:	230e      	movs	r3, #14
 8005182:	18fb      	adds	r3, r7, r3
 8005184:	2200      	movs	r2, #0
 8005186:	701a      	strb	r2, [r3, #0]
 8005188:	e019      	b.n	80051be <vTask_Write+0x76>
		{
			cnt++;
 800518a:	210f      	movs	r1, #15
 800518c:	187b      	adds	r3, r7, r1
 800518e:	781a      	ldrb	r2, [r3, #0]
 8005190:	187b      	adds	r3, r7, r1
 8005192:	3201      	adds	r2, #1
 8005194:	701a      	strb	r2, [r3, #0]
			if ((*message)[i] != '\0')
 8005196:	68ba      	ldr	r2, [r7, #8]
 8005198:	200e      	movs	r0, #14
 800519a:	183b      	adds	r3, r7, r0
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	5cd3      	ldrb	r3, [r2, r3]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d012      	beq.n	80051ca <vTask_Write+0x82>
				tx_dma_buffer[i] = (*message)[i];
 80051a4:	68b9      	ldr	r1, [r7, #8]
 80051a6:	183b      	adds	r3, r7, r0
 80051a8:	781a      	ldrb	r2, [r3, #0]
 80051aa:	183b      	adds	r3, r7, r0
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	5c89      	ldrb	r1, [r1, r2]
 80051b0:	4a1a      	ldr	r2, [pc, #104]	; (800521c <vTask_Write+0xd4>)
 80051b2:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < SIZE_DMA_CHANNEL_5; i++)
 80051b4:	183b      	adds	r3, r7, r0
 80051b6:	781a      	ldrb	r2, [r3, #0]
 80051b8:	183b      	adds	r3, r7, r0
 80051ba:	3201      	adds	r2, #1
 80051bc:	701a      	strb	r2, [r3, #0]
 80051be:	230e      	movs	r3, #14
 80051c0:	18fb      	adds	r3, r7, r3
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	2b31      	cmp	r3, #49	; 0x31
 80051c6:	d9e0      	bls.n	800518a <vTask_Write+0x42>
 80051c8:	e000      	b.n	80051cc <vTask_Write+0x84>
			else
				break;
 80051ca:	46c0      	nop			; (mov r8, r8)
		}
		// Indiquez au DMA la taille CNDTR = n du transfert. Cette opération doit être faite avec le canal DMA désactivé
		//  Set Memory Buffer size
		DMA1_Channel4->CNDTR = cnt;
 80051cc:	4b14      	ldr	r3, [pc, #80]	; (8005220 <vTask_Write+0xd8>)
 80051ce:	220f      	movs	r2, #15
 80051d0:	18ba      	adds	r2, r7, r2
 80051d2:	7812      	ldrb	r2, [r2, #0]
 80051d4:	605a      	str	r2, [r3, #4]
		// Activez le canal DMA
		// Enable DMA1 Channel 4
		DMA1_Channel4->CCR |= DMA_CCR_EN;
 80051d6:	4b12      	ldr	r3, [pc, #72]	; (8005220 <vTask_Write+0xd8>)
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	4b11      	ldr	r3, [pc, #68]	; (8005220 <vTask_Write+0xd8>)
 80051dc:	2101      	movs	r1, #1
 80051de:	430a      	orrs	r2, r1
 80051e0:	601a      	str	r2, [r3, #0]
		// Activez l’appel au DMA (request) de l’USART2 TX
		// Enable USART2 DMA Request on TX
		USART2->CR3 |= USART_CR3_DMAT;
 80051e2:	4b10      	ldr	r3, [pc, #64]	; (8005224 <vTask_Write+0xdc>)
 80051e4:	689a      	ldr	r2, [r3, #8]
 80051e6:	4b0f      	ldr	r3, [pc, #60]	; (8005224 <vTask_Write+0xdc>)
 80051e8:	2180      	movs	r1, #128	; 0x80
 80051ea:	430a      	orrs	r2, r1
 80051ec:	609a      	str	r2, [r3, #8]

		// Attendez (take) le sémaphore xSem_DMA_TC avec un timeout infini.
		xSemaphoreTake(xSem_DMA_TC, portMAX_DELAY);
 80051ee:	4b0e      	ldr	r3, [pc, #56]	; (8005228 <vTask_Write+0xe0>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2201      	movs	r2, #1
 80051f4:	4252      	negs	r2, r2
 80051f6:	0011      	movs	r1, r2
 80051f8:	0018      	movs	r0, r3
 80051fa:	f7fb fff9 	bl	80011f0 <xQueueSemaphoreTake>
		// Désactivez le canal DMA
		//  Disable DMA1 Channel 4
		DMA1_Channel4->CCR &= ~DMA_CCR_EN;
 80051fe:	4b08      	ldr	r3, [pc, #32]	; (8005220 <vTask_Write+0xd8>)
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	4b07      	ldr	r3, [pc, #28]	; (8005220 <vTask_Write+0xd8>)
 8005204:	2101      	movs	r1, #1
 8005206:	438a      	bics	r2, r1
 8005208:	601a      	str	r2, [r3, #0]
		// Désactivez l’appel au DMA de l’USART2 TX
		//  Disable USART2 DMA Request on TX
		USART2->CR3 &= ~USART_CR3_DMAT;
 800520a:	4b06      	ldr	r3, [pc, #24]	; (8005224 <vTask_Write+0xdc>)
 800520c:	689a      	ldr	r2, [r3, #8]
 800520e:	4b05      	ldr	r3, [pc, #20]	; (8005224 <vTask_Write+0xdc>)
 8005210:	2180      	movs	r1, #128	; 0x80
 8005212:	438a      	bics	r2, r1
 8005214:	609a      	str	r2, [r3, #8]
		xQueueReceive(xPublishQueue, &message, portMAX_DELAY);
 8005216:	e7a6      	b.n	8005166 <vTask_Write+0x1e>
 8005218:	200034b8 	.word	0x200034b8
 800521c:	200034c8 	.word	0x200034c8
 8005220:	40020044 	.word	0x40020044
 8005224:	40004400 	.word	0x40004400
 8005228:	200034b0 	.word	0x200034b0

0800522c <SystemClock_Config>:
 * SYSCLK, AHB, APB1                -> 48MHz
 * PA8 as MCO with /16 prescaler    -> 3MHz
 */

static void SystemClock_Config()
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
	uint32_t HSE_Status;
	uint32_t PLL_Status;
	uint32_t SW_Status;
	uint32_t timeout = 0;
 8005232:	2300      	movs	r3, #0
 8005234:	60fb      	str	r3, [r7, #12]

	timeout = 1000000;
 8005236:	4b44      	ldr	r3, [pc, #272]	; (8005348 <SystemClock_Config+0x11c>)
 8005238:	60fb      	str	r3, [r7, #12]

	// Start HSE in Bypass Mode
	RCC->CR |= RCC_CR_HSEBYP;
 800523a:	4b44      	ldr	r3, [pc, #272]	; (800534c <SystemClock_Config+0x120>)
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	4b43      	ldr	r3, [pc, #268]	; (800534c <SystemClock_Config+0x120>)
 8005240:	2180      	movs	r1, #128	; 0x80
 8005242:	02c9      	lsls	r1, r1, #11
 8005244:	430a      	orrs	r2, r1
 8005246:	601a      	str	r2, [r3, #0]
	RCC->CR |= RCC_CR_HSEON;
 8005248:	4b40      	ldr	r3, [pc, #256]	; (800534c <SystemClock_Config+0x120>)
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	4b3f      	ldr	r3, [pc, #252]	; (800534c <SystemClock_Config+0x120>)
 800524e:	2180      	movs	r1, #128	; 0x80
 8005250:	0249      	lsls	r1, r1, #9
 8005252:	430a      	orrs	r2, r1
 8005254:	601a      	str	r2, [r3, #0]

	// Wait until HSE is ready
	do
	{
		HSE_Status = RCC->CR & RCC_CR_HSERDY_Msk;
 8005256:	4b3d      	ldr	r3, [pc, #244]	; (800534c <SystemClock_Config+0x120>)
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	2380      	movs	r3, #128	; 0x80
 800525c:	029b      	lsls	r3, r3, #10
 800525e:	4013      	ands	r3, r2
 8005260:	60bb      	str	r3, [r7, #8]
		timeout--;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	3b01      	subs	r3, #1
 8005266:	60fb      	str	r3, [r7, #12]
	} while ((HSE_Status == 0) && (timeout > 0));
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d102      	bne.n	8005274 <SystemClock_Config+0x48>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1f0      	bne.n	8005256 <SystemClock_Config+0x2a>

	// Select HSE as PLL input source
	RCC->CFGR &= ~RCC_CFGR_PLLSRC_Msk;
 8005274:	4b35      	ldr	r3, [pc, #212]	; (800534c <SystemClock_Config+0x120>)
 8005276:	685a      	ldr	r2, [r3, #4]
 8005278:	4b34      	ldr	r3, [pc, #208]	; (800534c <SystemClock_Config+0x120>)
 800527a:	4935      	ldr	r1, [pc, #212]	; (8005350 <SystemClock_Config+0x124>)
 800527c:	400a      	ands	r2, r1
 800527e:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= (0x02 << RCC_CFGR_PLLSRC_Pos);
 8005280:	4b32      	ldr	r3, [pc, #200]	; (800534c <SystemClock_Config+0x120>)
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	4b31      	ldr	r3, [pc, #196]	; (800534c <SystemClock_Config+0x120>)
 8005286:	2180      	movs	r1, #128	; 0x80
 8005288:	0249      	lsls	r1, r1, #9
 800528a:	430a      	orrs	r2, r1
 800528c:	605a      	str	r2, [r3, #4]

	// Set PLL PREDIV to /1
	RCC->CFGR2 = 0x00000000;
 800528e:	4b2f      	ldr	r3, [pc, #188]	; (800534c <SystemClock_Config+0x120>)
 8005290:	2200      	movs	r2, #0
 8005292:	62da      	str	r2, [r3, #44]	; 0x2c

	// Set PLL MUL to x6
	RCC->CFGR &= ~RCC_CFGR_PLLMUL_Msk;
 8005294:	4b2d      	ldr	r3, [pc, #180]	; (800534c <SystemClock_Config+0x120>)
 8005296:	685a      	ldr	r2, [r3, #4]
 8005298:	4b2c      	ldr	r3, [pc, #176]	; (800534c <SystemClock_Config+0x120>)
 800529a:	492e      	ldr	r1, [pc, #184]	; (8005354 <SystemClock_Config+0x128>)
 800529c:	400a      	ands	r2, r1
 800529e:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= (0x04 << RCC_CFGR_PLLMUL_Pos);
 80052a0:	4b2a      	ldr	r3, [pc, #168]	; (800534c <SystemClock_Config+0x120>)
 80052a2:	685a      	ldr	r2, [r3, #4]
 80052a4:	4b29      	ldr	r3, [pc, #164]	; (800534c <SystemClock_Config+0x120>)
 80052a6:	2180      	movs	r1, #128	; 0x80
 80052a8:	0349      	lsls	r1, r1, #13
 80052aa:	430a      	orrs	r2, r1
 80052ac:	605a      	str	r2, [r3, #4]

	// Enable the main PLL
	RCC->CR |= RCC_CR_PLLON;
 80052ae:	4b27      	ldr	r3, [pc, #156]	; (800534c <SystemClock_Config+0x120>)
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	4b26      	ldr	r3, [pc, #152]	; (800534c <SystemClock_Config+0x120>)
 80052b4:	2180      	movs	r1, #128	; 0x80
 80052b6:	0449      	lsls	r1, r1, #17
 80052b8:	430a      	orrs	r2, r1
 80052ba:	601a      	str	r2, [r3, #0]

	// Wait until PLL is ready
	do
	{
		PLL_Status = RCC->CR & RCC_CR_PLLRDY_Msk;
 80052bc:	4b23      	ldr	r3, [pc, #140]	; (800534c <SystemClock_Config+0x120>)
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	2380      	movs	r3, #128	; 0x80
 80052c2:	049b      	lsls	r3, r3, #18
 80052c4:	4013      	ands	r3, r2
 80052c6:	607b      	str	r3, [r7, #4]
		timeout--;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	3b01      	subs	r3, #1
 80052cc:	60fb      	str	r3, [r7, #12]
	} while ((PLL_Status == 0) && (timeout > 0));
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d102      	bne.n	80052da <SystemClock_Config+0xae>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1f0      	bne.n	80052bc <SystemClock_Config+0x90>

	// Set AHB prescaler to /1
	RCC->CFGR &= ~RCC_CFGR_HPRE_Msk;
 80052da:	4b1c      	ldr	r3, [pc, #112]	; (800534c <SystemClock_Config+0x120>)
 80052dc:	685a      	ldr	r2, [r3, #4]
 80052de:	4b1b      	ldr	r3, [pc, #108]	; (800534c <SystemClock_Config+0x120>)
 80052e0:	21f0      	movs	r1, #240	; 0xf0
 80052e2:	438a      	bics	r2, r1
 80052e4:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80052e6:	4a19      	ldr	r2, [pc, #100]	; (800534c <SystemClock_Config+0x120>)
 80052e8:	4b18      	ldr	r3, [pc, #96]	; (800534c <SystemClock_Config+0x120>)
 80052ea:	6852      	ldr	r2, [r2, #4]
 80052ec:	605a      	str	r2, [r3, #4]

	// Set APB1 prescaler to /1
	RCC->CFGR &= ~RCC_CFGR_PPRE_Msk;
 80052ee:	4b17      	ldr	r3, [pc, #92]	; (800534c <SystemClock_Config+0x120>)
 80052f0:	685a      	ldr	r2, [r3, #4]
 80052f2:	4b16      	ldr	r3, [pc, #88]	; (800534c <SystemClock_Config+0x120>)
 80052f4:	4918      	ldr	r1, [pc, #96]	; (8005358 <SystemClock_Config+0x12c>)
 80052f6:	400a      	ands	r2, r1
 80052f8:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_PPRE_DIV1;
 80052fa:	4a14      	ldr	r2, [pc, #80]	; (800534c <SystemClock_Config+0x120>)
 80052fc:	4b13      	ldr	r3, [pc, #76]	; (800534c <SystemClock_Config+0x120>)
 80052fe:	6852      	ldr	r2, [r2, #4]
 8005300:	605a      	str	r2, [r3, #4]

	// Enable FLASH Prefetch Buffer and set Flash Latency
	FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 8005302:	4b16      	ldr	r3, [pc, #88]	; (800535c <SystemClock_Config+0x130>)
 8005304:	2211      	movs	r2, #17
 8005306:	601a      	str	r2, [r3, #0]

	// Select the main PLL as system clock source
	RCC->CFGR &= ~RCC_CFGR_SW;
 8005308:	4b10      	ldr	r3, [pc, #64]	; (800534c <SystemClock_Config+0x120>)
 800530a:	685a      	ldr	r2, [r3, #4]
 800530c:	4b0f      	ldr	r3, [pc, #60]	; (800534c <SystemClock_Config+0x120>)
 800530e:	2103      	movs	r1, #3
 8005310:	438a      	bics	r2, r1
 8005312:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8005314:	4b0d      	ldr	r3, [pc, #52]	; (800534c <SystemClock_Config+0x120>)
 8005316:	685a      	ldr	r2, [r3, #4]
 8005318:	4b0c      	ldr	r3, [pc, #48]	; (800534c <SystemClock_Config+0x120>)
 800531a:	2102      	movs	r1, #2
 800531c:	430a      	orrs	r2, r1
 800531e:	605a      	str	r2, [r3, #4]

	// Wait until PLL becomes main switch input
	do
	{
		SW_Status = (RCC->CFGR & RCC_CFGR_SWS_Msk);
 8005320:	4b0a      	ldr	r3, [pc, #40]	; (800534c <SystemClock_Config+0x120>)
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	220c      	movs	r2, #12
 8005326:	4013      	ands	r3, r2
 8005328:	603b      	str	r3, [r7, #0]
		timeout--;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	3b01      	subs	r3, #1
 800532e:	60fb      	str	r3, [r7, #12]
	} while ((SW_Status != RCC_CFGR_SWS_PLL) && (timeout > 0));
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	2b08      	cmp	r3, #8
 8005334:	d002      	beq.n	800533c <SystemClock_Config+0x110>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1f1      	bne.n	8005320 <SystemClock_Config+0xf4>

	// Update SystemCoreClock global variable
	SystemCoreClockUpdate();
 800533c:	f000 fbba 	bl	8005ab4 <SystemCoreClockUpdate>
}
 8005340:	46c0      	nop			; (mov r8, r8)
 8005342:	46bd      	mov	sp, r7
 8005344:	b004      	add	sp, #16
 8005346:	bd80      	pop	{r7, pc}
 8005348:	000f4240 	.word	0x000f4240
 800534c:	40021000 	.word	0x40021000
 8005350:	fffe7fff 	.word	0xfffe7fff
 8005354:	ffc3ffff 	.word	0xffc3ffff
 8005358:	fffff8ff 	.word	0xfffff8ff
 800535c:	40022000 	.word	0x40022000

08005360 <printchar>:
	}
}*/

xSemaphoreHandle xSem_UART_TC;
static void printchar(char **str, int c)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
	portBASE_TYPE xStatus;
	xSem_UART_TC = xSemaphoreCreateBinary();
 800536a:	2203      	movs	r2, #3
 800536c:	2100      	movs	r1, #0
 800536e:	2001      	movs	r0, #1
 8005370:	f7fb f850 	bl	8000414 <xQueueGenericCreate>
 8005374:	0002      	movs	r2, r0
 8005376:	4b17      	ldr	r3, [pc, #92]	; (80053d4 <printchar+0x74>)
 8005378:	601a      	str	r2, [r3, #0]
	if (str)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00a      	beq.n	8005396 <printchar+0x36>
	{
		**str = c;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	683a      	ldr	r2, [r7, #0]
 8005386:	b2d2      	uxtb	r2, r2
 8005388:	701a      	strb	r2, [r3, #0]
		++(*str);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	1c5a      	adds	r2, r3, #1
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	601a      	str	r2, [r3, #0]
		{
			while ((USART2->ISR & USART_ISR_TC) != USART_ISR_TC);
			USART2->TDR = c;
		}
	}
}
 8005394:	e01a      	b.n	80053cc <printchar+0x6c>
		xStatus = xSemaphoreTake(xSem_UART_TC, 100);
 8005396:	4b0f      	ldr	r3, [pc, #60]	; (80053d4 <printchar+0x74>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2164      	movs	r1, #100	; 0x64
 800539c:	0018      	movs	r0, r3
 800539e:	f7fb ff27 	bl	80011f0 <xQueueSemaphoreTake>
 80053a2:	0003      	movs	r3, r0
 80053a4:	60fb      	str	r3, [r7, #12]
		if (xStatus == pdPASS)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d104      	bne.n	80053b6 <printchar+0x56>
			USART2->TDR = c;
 80053ac:	4b0a      	ldr	r3, [pc, #40]	; (80053d8 <printchar+0x78>)
 80053ae:	683a      	ldr	r2, [r7, #0]
 80053b0:	b292      	uxth	r2, r2
 80053b2:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80053b4:	e00a      	b.n	80053cc <printchar+0x6c>
			while ((USART2->ISR & USART_ISR_TC) != USART_ISR_TC);
 80053b6:	46c0      	nop			; (mov r8, r8)
 80053b8:	4b07      	ldr	r3, [pc, #28]	; (80053d8 <printchar+0x78>)
 80053ba:	69db      	ldr	r3, [r3, #28]
 80053bc:	2240      	movs	r2, #64	; 0x40
 80053be:	4013      	ands	r3, r2
 80053c0:	2b40      	cmp	r3, #64	; 0x40
 80053c2:	d1f9      	bne.n	80053b8 <printchar+0x58>
			USART2->TDR = c;
 80053c4:	4b04      	ldr	r3, [pc, #16]	; (80053d8 <printchar+0x78>)
 80053c6:	683a      	ldr	r2, [r7, #0]
 80053c8:	b292      	uxth	r2, r2
 80053ca:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80053cc:	46c0      	nop			; (mov r8, r8)
 80053ce:	46bd      	mov	sp, r7
 80053d0:	b004      	add	sp, #16
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	200034fc 	.word	0x200034fc
 80053d8:	40004400 	.word	0x40004400

080053dc <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 80053dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053de:	46c6      	mov	lr, r8
 80053e0:	b500      	push	{lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]
 80053ec:	603b      	str	r3, [r7, #0]
	register int pc = 0, padchar = ' ';
 80053ee:	2400      	movs	r4, #0
 80053f0:	2320      	movs	r3, #32
 80053f2:	4698      	mov	r8, r3

	if (width > 0) {
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	dd16      	ble.n	8005428 <prints+0x4c>
		register int len = 0;
 80053fa:	2500      	movs	r5, #0
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 80053fc:	68be      	ldr	r6, [r7, #8]
 80053fe:	e001      	b.n	8005404 <prints+0x28>
 8005400:	3501      	adds	r5, #1
 8005402:	3601      	adds	r6, #1
 8005404:	7833      	ldrb	r3, [r6, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1fa      	bne.n	8005400 <prints+0x24>
		if (len >= width) width = 0;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	429d      	cmp	r5, r3
 800540e:	db02      	blt.n	8005416 <prints+0x3a>
 8005410:	2300      	movs	r3, #0
 8005412:	607b      	str	r3, [r7, #4]
 8005414:	e002      	b.n	800541c <prints+0x40>
		else width -= len;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	1b5b      	subs	r3, r3, r5
 800541a:	607b      	str	r3, [r7, #4]
		if (pad & PAD_ZERO) padchar = '0';
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	2202      	movs	r2, #2
 8005420:	4013      	ands	r3, r2
 8005422:	d001      	beq.n	8005428 <prints+0x4c>
 8005424:	2330      	movs	r3, #48	; 0x30
 8005426:	4698      	mov	r8, r3
	}
	if (!(pad & PAD_RIGHT)) {
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	2201      	movs	r2, #1
 800542c:	4013      	ands	r3, r2
 800542e:	d119      	bne.n	8005464 <prints+0x88>
		for ( ; width > 0; --width) {
 8005430:	e008      	b.n	8005444 <prints+0x68>
			printchar (out, padchar);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	4641      	mov	r1, r8
 8005436:	0018      	movs	r0, r3
 8005438:	f7ff ff92 	bl	8005360 <printchar>
			++pc;
 800543c:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	3b01      	subs	r3, #1
 8005442:	607b      	str	r3, [r7, #4]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	dcf3      	bgt.n	8005432 <prints+0x56>
		}
	}
	for ( ; *string ; ++string) {
 800544a:	e00b      	b.n	8005464 <prints+0x88>
		printchar (out, *string);
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	001a      	movs	r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	0011      	movs	r1, r2
 8005456:	0018      	movs	r0, r3
 8005458:	f7ff ff82 	bl	8005360 <printchar>
		++pc;
 800545c:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	3301      	adds	r3, #1
 8005462:	60bb      	str	r3, [r7, #8]
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1ef      	bne.n	800544c <prints+0x70>
	}
	for ( ; width > 0; --width) {
 800546c:	e008      	b.n	8005480 <prints+0xa4>
		printchar (out, padchar);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	4641      	mov	r1, r8
 8005472:	0018      	movs	r0, r3
 8005474:	f7ff ff74 	bl	8005360 <printchar>
		++pc;
 8005478:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	3b01      	subs	r3, #1
 800547e:	607b      	str	r3, [r7, #4]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	dcf3      	bgt.n	800546e <prints+0x92>
	}

	return pc;
 8005486:	0023      	movs	r3, r4
}
 8005488:	0018      	movs	r0, r3
 800548a:	46bd      	mov	sp, r7
 800548c:	b004      	add	sp, #16
 800548e:	bc80      	pop	{r7}
 8005490:	46b8      	mov	r8, r7
 8005492:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005494 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 8005494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005496:	46ce      	mov	lr, r9
 8005498:	4647      	mov	r7, r8
 800549a:	b580      	push	{r7, lr}
 800549c:	b089      	sub	sp, #36	; 0x24
 800549e:	af00      	add	r7, sp, #0
 80054a0:	60f8      	str	r0, [r7, #12]
 80054a2:	60b9      	str	r1, [r7, #8]
 80054a4:	607a      	str	r2, [r7, #4]
 80054a6:	603b      	str	r3, [r7, #0]
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 80054a8:	2300      	movs	r3, #0
 80054aa:	4699      	mov	r9, r3
 80054ac:	2600      	movs	r6, #0
	register unsigned int u = i;
 80054ae:	68bd      	ldr	r5, [r7, #8]

	if (i == 0) {
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d10e      	bne.n	80054d4 <printi+0x40>
		print_buf[0] = '0';
 80054b6:	2114      	movs	r1, #20
 80054b8:	187b      	adds	r3, r7, r1
 80054ba:	2230      	movs	r2, #48	; 0x30
 80054bc:	701a      	strb	r2, [r3, #0]
		print_buf[1] = '\0';
 80054be:	187b      	adds	r3, r7, r1
 80054c0:	2200      	movs	r2, #0
 80054c2:	705a      	strb	r2, [r3, #1]
		return prints (out, print_buf, width, pad);
 80054c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054c8:	1879      	adds	r1, r7, r1
 80054ca:	68f8      	ldr	r0, [r7, #12]
 80054cc:	f7ff ff86 	bl	80053dc <prints>
 80054d0:	0003      	movs	r3, r0
 80054d2:	e04e      	b.n	8005572 <printi+0xde>
	}

	if (sg && b == 10 && i < 0) {
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00a      	beq.n	80054f0 <printi+0x5c>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2b0a      	cmp	r3, #10
 80054de:	d107      	bne.n	80054f0 <printi+0x5c>
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	da04      	bge.n	80054f0 <printi+0x5c>
		neg = 1;
 80054e6:	2301      	movs	r3, #1
 80054e8:	4699      	mov	r9, r3
		u = -i;
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	425b      	negs	r3, r3
 80054ee:	001d      	movs	r5, r3
	}

	s = print_buf + PRINT_BUF_LEN-1;
 80054f0:	2314      	movs	r3, #20
 80054f2:	18fc      	adds	r4, r7, r3
 80054f4:	340b      	adds	r4, #11
	*s = '\0';
 80054f6:	2300      	movs	r3, #0
 80054f8:	7023      	strb	r3, [r4, #0]

	while (u) {
 80054fa:	e019      	b.n	8005530 <printi+0x9c>
		t = u % b;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	0019      	movs	r1, r3
 8005500:	0028      	movs	r0, r5
 8005502:	f7fa fe87 	bl	8000214 <__aeabi_uidivmod>
 8005506:	000b      	movs	r3, r1
 8005508:	4698      	mov	r8, r3
		if( t >= 10 )
 800550a:	4643      	mov	r3, r8
 800550c:	2b09      	cmp	r3, #9
 800550e:	dd02      	ble.n	8005516 <printi+0x82>
			t += letbase - '0' - 10;
 8005510:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005512:	3b3a      	subs	r3, #58	; 0x3a
 8005514:	4498      	add	r8, r3
		*--s = t + '0';
 8005516:	4643      	mov	r3, r8
 8005518:	b2db      	uxtb	r3, r3
 800551a:	3c01      	subs	r4, #1
 800551c:	3330      	adds	r3, #48	; 0x30
 800551e:	b2db      	uxtb	r3, r3
 8005520:	7023      	strb	r3, [r4, #0]
		u /= b;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	0019      	movs	r1, r3
 8005526:	0028      	movs	r0, r5
 8005528:	f7fa fdee 	bl	8000108 <__udivsi3>
 800552c:	0003      	movs	r3, r0
 800552e:	001d      	movs	r5, r3
	while (u) {
 8005530:	2d00      	cmp	r5, #0
 8005532:	d1e3      	bne.n	80054fc <printi+0x68>
	}

	if (neg) {
 8005534:	464b      	mov	r3, r9
 8005536:	2b00      	cmp	r3, #0
 8005538:	d013      	beq.n	8005562 <printi+0xce>
		if( width && (pad & PAD_ZERO) ) {
 800553a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00d      	beq.n	800555c <printi+0xc8>
 8005540:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005542:	2202      	movs	r2, #2
 8005544:	4013      	ands	r3, r2
 8005546:	d009      	beq.n	800555c <printi+0xc8>
			printchar (out, '-');
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	212d      	movs	r1, #45	; 0x2d
 800554c:	0018      	movs	r0, r3
 800554e:	f7ff ff07 	bl	8005360 <printchar>
			++pc;
 8005552:	3601      	adds	r6, #1
			--width;
 8005554:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005556:	3b01      	subs	r3, #1
 8005558:	643b      	str	r3, [r7, #64]	; 0x40
 800555a:	e002      	b.n	8005562 <printi+0xce>
		}
		else {
			*--s = '-';
 800555c:	3c01      	subs	r4, #1
 800555e:	232d      	movs	r3, #45	; 0x2d
 8005560:	7023      	strb	r3, [r4, #0]
		}
	}

	return pc + prints (out, s, width, pad);
 8005562:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005564:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005566:	68f8      	ldr	r0, [r7, #12]
 8005568:	0021      	movs	r1, r4
 800556a:	f7ff ff37 	bl	80053dc <prints>
 800556e:	0003      	movs	r3, r0
 8005570:	18f3      	adds	r3, r6, r3
}
 8005572:	0018      	movs	r0, r3
 8005574:	46bd      	mov	sp, r7
 8005576:	b009      	add	sp, #36	; 0x24
 8005578:	bcc0      	pop	{r6, r7}
 800557a:	46b9      	mov	r9, r7
 800557c:	46b0      	mov	r8, r6
 800557e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005580 <print>:

static int print(char **out, const char *format, va_list args )
{
 8005580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005582:	b08b      	sub	sp, #44	; 0x2c
 8005584:	af04      	add	r7, sp, #16
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
	register int width, pad;
	register int pc = 0;
 800558c:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 800558e:	e0c6      	b.n	800571e <print+0x19e>
		if (*format == '%') {
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	2b25      	cmp	r3, #37	; 0x25
 8005596:	d000      	beq.n	800559a <print+0x1a>
 8005598:	e0b2      	b.n	8005700 <print+0x180>
			++format;
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	3301      	adds	r3, #1
 800559e:	60bb      	str	r3, [r7, #8]
			width = pad = 0;
 80055a0:	2600      	movs	r6, #0
 80055a2:	0035      	movs	r5, r6
			if (*format == '\0') break;
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d100      	bne.n	80055ae <print+0x2e>
 80055ac:	e0bd      	b.n	800572a <print+0x1aa>
			if (*format == '%') goto out;
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	2b25      	cmp	r3, #37	; 0x25
 80055b4:	d100      	bne.n	80055b8 <print+0x38>
 80055b6:	e0a5      	b.n	8005704 <print+0x184>
			if (*format == '-') {
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	2b2d      	cmp	r3, #45	; 0x2d
 80055be:	d10a      	bne.n	80055d6 <print+0x56>
				++format;
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	3301      	adds	r3, #1
 80055c4:	60bb      	str	r3, [r7, #8]
				pad = PAD_RIGHT;
 80055c6:	2601      	movs	r6, #1
			}
			while (*format == '0') {
 80055c8:	e005      	b.n	80055d6 <print+0x56>
				++format;
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	3301      	adds	r3, #1
 80055ce:	60bb      	str	r3, [r7, #8]
				pad |= PAD_ZERO;
 80055d0:	2302      	movs	r3, #2
 80055d2:	4333      	orrs	r3, r6
 80055d4:	001e      	movs	r6, r3
			while (*format == '0') {
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	2b30      	cmp	r3, #48	; 0x30
 80055dc:	d0f5      	beq.n	80055ca <print+0x4a>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 80055de:	e00b      	b.n	80055f8 <print+0x78>
				width *= 10;
 80055e0:	002b      	movs	r3, r5
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	195b      	adds	r3, r3, r5
 80055e6:	005b      	lsls	r3, r3, #1
 80055e8:	001d      	movs	r5, r3
				width += *format - '0';
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	3b30      	subs	r3, #48	; 0x30
 80055f0:	18ed      	adds	r5, r5, r3
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	3301      	adds	r3, #1
 80055f6:	60bb      	str	r3, [r7, #8]
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	2b2f      	cmp	r3, #47	; 0x2f
 80055fe:	d903      	bls.n	8005608 <print+0x88>
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	2b39      	cmp	r3, #57	; 0x39
 8005606:	d9eb      	bls.n	80055e0 <print+0x60>
			}
			if( *format == 's' ) {
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	2b73      	cmp	r3, #115	; 0x73
 800560e:	d10f      	bne.n	8005630 <print+0xb0>
				register char *s = (char *)va_arg( args, int );
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	1d1a      	adds	r2, r3, #4
 8005614:	607a      	str	r2, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	1e19      	subs	r1, r3, #0
				pc += prints (out, s?s:"(null)", width, pad);
 800561a:	d000      	beq.n	800561e <print+0x9e>
 800561c:	e000      	b.n	8005620 <print+0xa0>
 800561e:	4949      	ldr	r1, [pc, #292]	; (8005744 <print+0x1c4>)
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	0033      	movs	r3, r6
 8005624:	002a      	movs	r2, r5
 8005626:	f7ff fed9 	bl	80053dc <prints>
 800562a:	0003      	movs	r3, r0
 800562c:	18e4      	adds	r4, r4, r3
				continue;
 800562e:	e073      	b.n	8005718 <print+0x198>
			}
			if( *format == 'd' ) {
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	2b64      	cmp	r3, #100	; 0x64
 8005636:	d10f      	bne.n	8005658 <print+0xd8>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	1d1a      	adds	r2, r3, #4
 800563c:	607a      	str	r2, [r7, #4]
 800563e:	6819      	ldr	r1, [r3, #0]
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	2361      	movs	r3, #97	; 0x61
 8005644:	9302      	str	r3, [sp, #8]
 8005646:	9601      	str	r6, [sp, #4]
 8005648:	9500      	str	r5, [sp, #0]
 800564a:	2301      	movs	r3, #1
 800564c:	220a      	movs	r2, #10
 800564e:	f7ff ff21 	bl	8005494 <printi>
 8005652:	0003      	movs	r3, r0
 8005654:	18e4      	adds	r4, r4, r3
				continue;
 8005656:	e05f      	b.n	8005718 <print+0x198>
			}
			if( *format == 'x' ) {
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	2b78      	cmp	r3, #120	; 0x78
 800565e:	d10f      	bne.n	8005680 <print+0x100>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	1d1a      	adds	r2, r3, #4
 8005664:	607a      	str	r2, [r7, #4]
 8005666:	6819      	ldr	r1, [r3, #0]
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	2361      	movs	r3, #97	; 0x61
 800566c:	9302      	str	r3, [sp, #8]
 800566e:	9601      	str	r6, [sp, #4]
 8005670:	9500      	str	r5, [sp, #0]
 8005672:	2300      	movs	r3, #0
 8005674:	2210      	movs	r2, #16
 8005676:	f7ff ff0d 	bl	8005494 <printi>
 800567a:	0003      	movs	r3, r0
 800567c:	18e4      	adds	r4, r4, r3
				continue;
 800567e:	e04b      	b.n	8005718 <print+0x198>
			}
			if( *format == 'X' ) {
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	2b58      	cmp	r3, #88	; 0x58
 8005686:	d10f      	bne.n	80056a8 <print+0x128>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	1d1a      	adds	r2, r3, #4
 800568c:	607a      	str	r2, [r7, #4]
 800568e:	6819      	ldr	r1, [r3, #0]
 8005690:	68f8      	ldr	r0, [r7, #12]
 8005692:	2341      	movs	r3, #65	; 0x41
 8005694:	9302      	str	r3, [sp, #8]
 8005696:	9601      	str	r6, [sp, #4]
 8005698:	9500      	str	r5, [sp, #0]
 800569a:	2300      	movs	r3, #0
 800569c:	2210      	movs	r2, #16
 800569e:	f7ff fef9 	bl	8005494 <printi>
 80056a2:	0003      	movs	r3, r0
 80056a4:	18e4      	adds	r4, r4, r3
				continue;
 80056a6:	e037      	b.n	8005718 <print+0x198>
			}
			if( *format == 'u' ) {
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	2b75      	cmp	r3, #117	; 0x75
 80056ae:	d10f      	bne.n	80056d0 <print+0x150>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	1d1a      	adds	r2, r3, #4
 80056b4:	607a      	str	r2, [r7, #4]
 80056b6:	6819      	ldr	r1, [r3, #0]
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	2361      	movs	r3, #97	; 0x61
 80056bc:	9302      	str	r3, [sp, #8]
 80056be:	9601      	str	r6, [sp, #4]
 80056c0:	9500      	str	r5, [sp, #0]
 80056c2:	2300      	movs	r3, #0
 80056c4:	220a      	movs	r2, #10
 80056c6:	f7ff fee5 	bl	8005494 <printi>
 80056ca:	0003      	movs	r3, r0
 80056cc:	18e4      	adds	r4, r4, r3
				continue;
 80056ce:	e023      	b.n	8005718 <print+0x198>
			}
			if( *format == 'c' ) {
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	2b63      	cmp	r3, #99	; 0x63
 80056d6:	d11f      	bne.n	8005718 <print+0x198>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	1d1a      	adds	r2, r3, #4
 80056dc:	607a      	str	r2, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	b2da      	uxtb	r2, r3
 80056e2:	2114      	movs	r1, #20
 80056e4:	187b      	adds	r3, r7, r1
 80056e6:	701a      	strb	r2, [r3, #0]
				scr[1] = '\0';
 80056e8:	187b      	adds	r3, r7, r1
 80056ea:	2200      	movs	r2, #0
 80056ec:	705a      	strb	r2, [r3, #1]
				pc += prints (out, scr, width, pad);
 80056ee:	1879      	adds	r1, r7, r1
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	0033      	movs	r3, r6
 80056f4:	002a      	movs	r2, r5
 80056f6:	f7ff fe71 	bl	80053dc <prints>
 80056fa:	0003      	movs	r3, r0
 80056fc:	18e4      	adds	r4, r4, r3
				continue;
 80056fe:	e00b      	b.n	8005718 <print+0x198>
			}
		}
		else {
		out:
 8005700:	46c0      	nop			; (mov r8, r8)
 8005702:	e000      	b.n	8005706 <print+0x186>
			if (*format == '%') goto out;
 8005704:	46c0      	nop			; (mov r8, r8)
			printchar (out, *format);
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	001a      	movs	r2, r3
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	0011      	movs	r1, r2
 8005710:	0018      	movs	r0, r3
 8005712:	f7ff fe25 	bl	8005360 <printchar>
			++pc;
 8005716:	3401      	adds	r4, #1
	for (; *format != 0; ++format) {
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	3301      	adds	r3, #1
 800571c:	60bb      	str	r3, [r7, #8]
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d000      	beq.n	8005728 <print+0x1a8>
 8005726:	e733      	b.n	8005590 <print+0x10>
 8005728:	e000      	b.n	800572c <print+0x1ac>
			if (*format == '\0') break;
 800572a:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (out) **out = '\0';
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d003      	beq.n	800573a <print+0x1ba>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2200      	movs	r2, #0
 8005738:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
 800573a:	0023      	movs	r3, r4
}
 800573c:	0018      	movs	r0, r3
 800573e:	46bd      	mov	sp, r7
 8005740:	b007      	add	sp, #28
 8005742:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005744:	08007064 	.word	0x08007064

08005748 <my_sprintf>:
        va_start( args, format );
        return print( 0, format, args );
}

int my_sprintf(char *out, const char *format, ...)
{
 8005748:	b40e      	push	{r1, r2, r3}
 800574a:	b580      	push	{r7, lr}
 800574c:	b085      	sub	sp, #20
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
        va_list args;

        va_start( args, format );
 8005752:	2320      	movs	r3, #32
 8005754:	18fb      	adds	r3, r7, r3
 8005756:	60fb      	str	r3, [r7, #12]
        return print( &out, format, args );
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	69f9      	ldr	r1, [r7, #28]
 800575c:	1d3b      	adds	r3, r7, #4
 800575e:	0018      	movs	r0, r3
 8005760:	f7ff ff0e 	bl	8005580 <print>
 8005764:	0003      	movs	r3, r0
}
 8005766:	0018      	movs	r0, r3
 8005768:	46bd      	mov	sp, r7
 800576a:	b005      	add	sp, #20
 800576c:	bc80      	pop	{r7}
 800576e:	bc08      	pop	{r3}
 8005770:	b003      	add	sp, #12
 8005772:	4718      	bx	r3

08005774 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	af00      	add	r7, sp, #0
}
 8005778:	46c0      	nop			; (mov r8, r8)
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}

0800577e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800577e:	b580      	push	{r7, lr}
 8005780:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8005782:	e7fe      	b.n	8005782 <HardFault_Handler+0x4>

08005784 <DMA1_Channel4_5_6_7_IRQHandler>:
  * @}
  */
extern xSemaphoreHandle xSem_DMA_TC;

void DMA1_Channel4_5_6_7_IRQHandler()
{ 
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800578a:	2300      	movs	r3, #0
 800578c:	607b      	str	r3, [r7, #4]

	if((DMA1->ISR & DMA_ISR_TCIF4_Msk) != 0){
 800578e:	4b0e      	ldr	r3, [pc, #56]	; (80057c8 <DMA1_Channel4_5_6_7_IRQHandler+0x44>)
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	2380      	movs	r3, #128	; 0x80
 8005794:	019b      	lsls	r3, r3, #6
 8005796:	4013      	ands	r3, r2
 8005798:	d011      	beq.n	80057be <DMA1_Channel4_5_6_7_IRQHandler+0x3a>
    //compare the logic interruption mask with interruption TC  
		DMA1->IFCR = DMA_IFCR_CTCIF4;
 800579a:	4b0b      	ldr	r3, [pc, #44]	; (80057c8 <DMA1_Channel4_5_6_7_IRQHandler+0x44>)
 800579c:	2280      	movs	r2, #128	; 0x80
 800579e:	0192      	lsls	r2, r2, #6
 80057a0:	605a      	str	r2, [r3, #4]
    //clear the interruption, signific which the interruption was processed.

		xSemaphoreGiveFromISR(xSem_DMA_TC, &xHigherPriorityTaskWoken);
 80057a2:	4b0a      	ldr	r3, [pc, #40]	; (80057cc <DMA1_Channel4_5_6_7_IRQHandler+0x48>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	1d3a      	adds	r2, r7, #4
 80057a8:	0011      	movs	r1, r2
 80057aa:	0018      	movs	r0, r3
 80057ac:	f7fb fa40 	bl	8000c30 <xQueueGiveFromISR>
    // here we free the semaphore for sincronization and advise if have a task with more priority
		
		portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d003      	beq.n	80057be <DMA1_Channel4_5_6_7_IRQHandler+0x3a>
 80057b6:	4b06      	ldr	r3, [pc, #24]	; (80057d0 <DMA1_Channel4_5_6_7_IRQHandler+0x4c>)
 80057b8:	2280      	movs	r2, #128	; 0x80
 80057ba:	0552      	lsls	r2, r2, #21
 80057bc:	601a      	str	r2, [r3, #0]
    // switch context
  }

}
 80057be:	46c0      	nop			; (mov r8, r8)
 80057c0:	46bd      	mov	sp, r7
 80057c2:	b002      	add	sp, #8
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	46c0      	nop			; (mov r8, r8)
 80057c8:	40020000 	.word	0x40020000
 80057cc:	200034b0 	.word	0x200034b0
 80057d0:	e000ed04 	.word	0xe000ed04

080057d4 <BSP_LED_Init>:
 */

extern uint8_t rx_dma_buffer[8];
extern uint8_t tx_dma_buffer[SIZE_DMA_CHANNEL_5];
void BSP_LED_Init()
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80057d8:	4b22      	ldr	r3, [pc, #136]	; (8005864 <BSP_LED_Init+0x90>)
 80057da:	695a      	ldr	r2, [r3, #20]
 80057dc:	4b21      	ldr	r3, [pc, #132]	; (8005864 <BSP_LED_Init+0x90>)
 80057de:	2180      	movs	r1, #128	; 0x80
 80057e0:	0289      	lsls	r1, r1, #10
 80057e2:	430a      	orrs	r2, r1
 80057e4:	615a      	str	r2, [r3, #20]

	// Configure PA5 as output
	GPIOA->MODER &= ~GPIO_MODER_MODER5_Msk;
 80057e6:	2390      	movs	r3, #144	; 0x90
 80057e8:	05db      	lsls	r3, r3, #23
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	2390      	movs	r3, #144	; 0x90
 80057ee:	05db      	lsls	r3, r3, #23
 80057f0:	491d      	ldr	r1, [pc, #116]	; (8005868 <BSP_LED_Init+0x94>)
 80057f2:	400a      	ands	r2, r1
 80057f4:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (0x01 <<GPIO_MODER_MODER5_Pos);
 80057f6:	2390      	movs	r3, #144	; 0x90
 80057f8:	05db      	lsls	r3, r3, #23
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	2390      	movs	r3, #144	; 0x90
 80057fe:	05db      	lsls	r3, r3, #23
 8005800:	2180      	movs	r1, #128	; 0x80
 8005802:	00c9      	lsls	r1, r1, #3
 8005804:	430a      	orrs	r2, r1
 8005806:	601a      	str	r2, [r3, #0]

	// Configure PA5 as Push-Pull output
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT_5;
 8005808:	2390      	movs	r3, #144	; 0x90
 800580a:	05db      	lsls	r3, r3, #23
 800580c:	685a      	ldr	r2, [r3, #4]
 800580e:	2390      	movs	r3, #144	; 0x90
 8005810:	05db      	lsls	r3, r3, #23
 8005812:	2120      	movs	r1, #32
 8005814:	438a      	bics	r2, r1
 8005816:	605a      	str	r2, [r3, #4]

	// Configure PA5 as High-Speed Output
	GPIOA->OSPEEDR &= ~GPIO_OSPEEDR_OSPEEDR5_Msk;
 8005818:	2390      	movs	r3, #144	; 0x90
 800581a:	05db      	lsls	r3, r3, #23
 800581c:	689a      	ldr	r2, [r3, #8]
 800581e:	2390      	movs	r3, #144	; 0x90
 8005820:	05db      	lsls	r3, r3, #23
 8005822:	4911      	ldr	r1, [pc, #68]	; (8005868 <BSP_LED_Init+0x94>)
 8005824:	400a      	ands	r2, r1
 8005826:	609a      	str	r2, [r3, #8]
	GPIOA->OSPEEDR |= (0x03 <<GPIO_OSPEEDR_OSPEEDR5_Pos);
 8005828:	2390      	movs	r3, #144	; 0x90
 800582a:	05db      	lsls	r3, r3, #23
 800582c:	689a      	ldr	r2, [r3, #8]
 800582e:	2390      	movs	r3, #144	; 0x90
 8005830:	05db      	lsls	r3, r3, #23
 8005832:	21c0      	movs	r1, #192	; 0xc0
 8005834:	0109      	lsls	r1, r1, #4
 8005836:	430a      	orrs	r2, r1
 8005838:	609a      	str	r2, [r3, #8]

	// Disable PA5 Pull-up/Pull-down
	GPIOA->PUPDR &= ~GPIO_PUPDR_PUPDR5_Msk;
 800583a:	2390      	movs	r3, #144	; 0x90
 800583c:	05db      	lsls	r3, r3, #23
 800583e:	68da      	ldr	r2, [r3, #12]
 8005840:	2390      	movs	r3, #144	; 0x90
 8005842:	05db      	lsls	r3, r3, #23
 8005844:	4908      	ldr	r1, [pc, #32]	; (8005868 <BSP_LED_Init+0x94>)
 8005846:	400a      	ands	r2, r1
 8005848:	60da      	str	r2, [r3, #12]

	// Set Initial State OFF
	GPIOA->BSRR |= GPIO_BSRR_BR_5;
 800584a:	2390      	movs	r3, #144	; 0x90
 800584c:	05db      	lsls	r3, r3, #23
 800584e:	699a      	ldr	r2, [r3, #24]
 8005850:	2390      	movs	r3, #144	; 0x90
 8005852:	05db      	lsls	r3, r3, #23
 8005854:	2180      	movs	r1, #128	; 0x80
 8005856:	0389      	lsls	r1, r1, #14
 8005858:	430a      	orrs	r2, r1
 800585a:	619a      	str	r2, [r3, #24]
}
 800585c:	46c0      	nop			; (mov r8, r8)
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	46c0      	nop			; (mov r8, r8)
 8005864:	40021000 	.word	0x40021000
 8005868:	fffff3ff 	.word	0xfffff3ff

0800586c <BSP_PB_Init>:
 * BSP_PB_Init()
 * Initialize Push-Button pin (PC13) as input without Pull-up/Pull-down
 */

void BSP_PB_Init()
{
 800586c:	b580      	push	{r7, lr}
 800586e:	af00      	add	r7, sp, #0
	// Enable GPIOC clock
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8005870:	4b0c      	ldr	r3, [pc, #48]	; (80058a4 <BSP_PB_Init+0x38>)
 8005872:	695a      	ldr	r2, [r3, #20]
 8005874:	4b0b      	ldr	r3, [pc, #44]	; (80058a4 <BSP_PB_Init+0x38>)
 8005876:	2180      	movs	r1, #128	; 0x80
 8005878:	0309      	lsls	r1, r1, #12
 800587a:	430a      	orrs	r2, r1
 800587c:	615a      	str	r2, [r3, #20]

	// Configure PC13 as input
	GPIOC->MODER &= ~GPIO_MODER_MODER13_Msk;
 800587e:	4b0a      	ldr	r3, [pc, #40]	; (80058a8 <BSP_PB_Init+0x3c>)
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	4b09      	ldr	r3, [pc, #36]	; (80058a8 <BSP_PB_Init+0x3c>)
 8005884:	4909      	ldr	r1, [pc, #36]	; (80058ac <BSP_PB_Init+0x40>)
 8005886:	400a      	ands	r2, r1
 8005888:	601a      	str	r2, [r3, #0]
	GPIOC->MODER |= (0x00 <<GPIO_MODER_MODER13_Pos);
 800588a:	4a07      	ldr	r2, [pc, #28]	; (80058a8 <BSP_PB_Init+0x3c>)
 800588c:	4b06      	ldr	r3, [pc, #24]	; (80058a8 <BSP_PB_Init+0x3c>)
 800588e:	6812      	ldr	r2, [r2, #0]
 8005890:	601a      	str	r2, [r3, #0]

	// Disable PC13 Pull-up/Pull-down
	GPIOC->PUPDR &= ~GPIO_PUPDR_PUPDR13_Msk;
 8005892:	4b05      	ldr	r3, [pc, #20]	; (80058a8 <BSP_PB_Init+0x3c>)
 8005894:	68da      	ldr	r2, [r3, #12]
 8005896:	4b04      	ldr	r3, [pc, #16]	; (80058a8 <BSP_PB_Init+0x3c>)
 8005898:	4904      	ldr	r1, [pc, #16]	; (80058ac <BSP_PB_Init+0x40>)
 800589a:	400a      	ands	r2, r1
 800589c:	60da      	str	r2, [r3, #12]
}
 800589e:	46c0      	nop			; (mov r8, r8)
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	40021000 	.word	0x40021000
 80058a8:	48000800 	.word	0x48000800
 80058ac:	f3ffffff 	.word	0xf3ffffff

080058b0 <BSP_Console_Init>:
 * TX -> PA2 (AF1)
 * RX -> PA3 (AF1)
 */

void BSP_Console_Init()
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	af00      	add	r7, sp, #0
	// Enable GPIOA clock
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80058b4:	4b59      	ldr	r3, [pc, #356]	; (8005a1c <BSP_Console_Init+0x16c>)
 80058b6:	695a      	ldr	r2, [r3, #20]
 80058b8:	4b58      	ldr	r3, [pc, #352]	; (8005a1c <BSP_Console_Init+0x16c>)
 80058ba:	2180      	movs	r1, #128	; 0x80
 80058bc:	0289      	lsls	r1, r1, #10
 80058be:	430a      	orrs	r2, r1
 80058c0:	615a      	str	r2, [r3, #20]

	// Configure PA2 and PA3 as Alternate function
	GPIOA->MODER &= ~(GPIO_MODER_MODER2_Msk | GPIO_MODER_MODER3_Msk);
 80058c2:	2390      	movs	r3, #144	; 0x90
 80058c4:	05db      	lsls	r3, r3, #23
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	2390      	movs	r3, #144	; 0x90
 80058ca:	05db      	lsls	r3, r3, #23
 80058cc:	21f0      	movs	r1, #240	; 0xf0
 80058ce:	438a      	bics	r2, r1
 80058d0:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (0x02 <<GPIO_MODER_MODER2_Pos) | (0x02 <<GPIO_MODER_MODER3_Pos);
 80058d2:	2390      	movs	r3, #144	; 0x90
 80058d4:	05db      	lsls	r3, r3, #23
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	2390      	movs	r3, #144	; 0x90
 80058da:	05db      	lsls	r3, r3, #23
 80058dc:	21a0      	movs	r1, #160	; 0xa0
 80058de:	430a      	orrs	r2, r1
 80058e0:	601a      	str	r2, [r3, #0]

	// Set PA2 and PA3 to AF1 (USART2)
	GPIOA->AFR[0] &= ~(0x0000FF00);
 80058e2:	2390      	movs	r3, #144	; 0x90
 80058e4:	05db      	lsls	r3, r3, #23
 80058e6:	6a1a      	ldr	r2, [r3, #32]
 80058e8:	2390      	movs	r3, #144	; 0x90
 80058ea:	05db      	lsls	r3, r3, #23
 80058ec:	494c      	ldr	r1, [pc, #304]	; (8005a20 <BSP_Console_Init+0x170>)
 80058ee:	400a      	ands	r2, r1
 80058f0:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |=  (0x00001100);
 80058f2:	2390      	movs	r3, #144	; 0x90
 80058f4:	05db      	lsls	r3, r3, #23
 80058f6:	6a1a      	ldr	r2, [r3, #32]
 80058f8:	2390      	movs	r3, #144	; 0x90
 80058fa:	05db      	lsls	r3, r3, #23
 80058fc:	2188      	movs	r1, #136	; 0x88
 80058fe:	0149      	lsls	r1, r1, #5
 8005900:	430a      	orrs	r2, r1
 8005902:	621a      	str	r2, [r3, #32]

	// Enable USART2 clock
	RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 8005904:	4b45      	ldr	r3, [pc, #276]	; (8005a1c <BSP_Console_Init+0x16c>)
 8005906:	69da      	ldr	r2, [r3, #28]
 8005908:	4b44      	ldr	r3, [pc, #272]	; (8005a1c <BSP_Console_Init+0x16c>)
 800590a:	2180      	movs	r1, #128	; 0x80
 800590c:	0289      	lsls	r1, r1, #10
 800590e:	430a      	orrs	r2, r1
 8005910:	61da      	str	r2, [r3, #28]

	// Clear USART2 configuration (reset state)
	// 8-bit, 1 start, 1 stop, CTS/RTS disabled
	USART2->CR1 = 0x00000000;
 8005912:	4b44      	ldr	r3, [pc, #272]	; (8005a24 <BSP_Console_Init+0x174>)
 8005914:	2200      	movs	r2, #0
 8005916:	601a      	str	r2, [r3, #0]
	USART2->CR2 = 0x00000000;
 8005918:	4b42      	ldr	r3, [pc, #264]	; (8005a24 <BSP_Console_Init+0x174>)
 800591a:	2200      	movs	r2, #0
 800591c:	605a      	str	r2, [r3, #4]
	USART2->CR3 = 0x00000000;
 800591e:	4b41      	ldr	r3, [pc, #260]	; (8005a24 <BSP_Console_Init+0x174>)
 8005920:	2200      	movs	r2, #0
 8005922:	609a      	str	r2, [r3, #8]

	// Select PCLK (APB1) as clock source
	// PCLK -> 48 MHz
	RCC->CFGR3 &= ~RCC_CFGR3_USART2SW_Msk;
 8005924:	4b3d      	ldr	r3, [pc, #244]	; (8005a1c <BSP_Console_Init+0x16c>)
 8005926:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005928:	4b3c      	ldr	r3, [pc, #240]	; (8005a1c <BSP_Console_Init+0x16c>)
 800592a:	493f      	ldr	r1, [pc, #252]	; (8005a28 <BSP_Console_Init+0x178>)
 800592c:	400a      	ands	r2, r1
 800592e:	631a      	str	r2, [r3, #48]	; 0x30
	// BRR = 833 -> Baud Rate = 115246.0984 -> 0.04% error (better)

	//USART2->CR1 |= USART_CR1_OVER8;
	//USART2->BRR = 833;
	
	USART2->CR1 &= ~USART_CR1_OVER8;
 8005930:	4b3c      	ldr	r3, [pc, #240]	; (8005a24 <BSP_Console_Init+0x174>)
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	4b3b      	ldr	r3, [pc, #236]	; (8005a24 <BSP_Console_Init+0x174>)
 8005936:	493d      	ldr	r1, [pc, #244]	; (8005a2c <BSP_Console_Init+0x17c>)
 8005938:	400a      	ands	r2, r1
 800593a:	601a      	str	r2, [r3, #0]
	USART2->BRR = 5000;
 800593c:	4b39      	ldr	r3, [pc, #228]	; (8005a24 <BSP_Console_Init+0x174>)
 800593e:	4a3c      	ldr	r2, [pc, #240]	; (8005a30 <BSP_Console_Init+0x180>)
 8005940:	60da      	str	r2, [r3, #12]

	// Enable both Transmitter and Receiver   ( habilita interrupcao USART )
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;
 8005942:	4b38      	ldr	r3, [pc, #224]	; (8005a24 <BSP_Console_Init+0x174>)
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	4b37      	ldr	r3, [pc, #220]	; (8005a24 <BSP_Console_Init+0x174>)
 8005948:	210c      	movs	r1, #12
 800594a:	430a      	orrs	r2, r1
 800594c:	601a      	str	r2, [r3, #0]
	//USART2->CR1 |= USART_CR1_RXNEIE;

	// Setup RX on DMA Channel 5

	// Start DMA clock
	RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 800594e:	4b33      	ldr	r3, [pc, #204]	; (8005a1c <BSP_Console_Init+0x16c>)
 8005950:	695a      	ldr	r2, [r3, #20]
 8005952:	4b32      	ldr	r3, [pc, #200]	; (8005a1c <BSP_Console_Init+0x16c>)
 8005954:	2101      	movs	r1, #1
 8005956:	430a      	orrs	r2, r1
 8005958:	615a      	str	r2, [r3, #20]
			 Setup for CHannel 4

	*/

	// Reset DMA1 Channel 4 configuration
	DMA1_Channel4->CCR = 0x00000000;
 800595a:	4b36      	ldr	r3, [pc, #216]	; (8005a34 <BSP_Console_Init+0x184>)
 800595c:	2200      	movs	r2, #0
 800595e:	601a      	str	r2, [r3, #0]

	// Set direction Memory -> Peripheral
	DMA1_Channel4->CCR = DMA_CCR_DIR;
 8005960:	4b34      	ldr	r3, [pc, #208]	; (8005a34 <BSP_Console_Init+0x184>)
 8005962:	2210      	movs	r2, #16
 8005964:	601a      	str	r2, [r3, #0]

	// Peripheral is USART2 TDR
	DMA1_Channel4->CPAR = (uint32_t)&USART2->TDR;
 8005966:	4b33      	ldr	r3, [pc, #204]	; (8005a34 <BSP_Console_Init+0x184>)
 8005968:	4a33      	ldr	r2, [pc, #204]	; (8005a38 <BSP_Console_Init+0x188>)
 800596a:	609a      	str	r2, [r3, #8]

	// Peripheral data size is 8-bit (byte)
	DMA1_Channel4->CCR |= (0x00 <<DMA_CCR_PSIZE_Pos);
 800596c:	4a31      	ldr	r2, [pc, #196]	; (8005a34 <BSP_Console_Init+0x184>)
 800596e:	4b31      	ldr	r3, [pc, #196]	; (8005a34 <BSP_Console_Init+0x184>)
 8005970:	6812      	ldr	r2, [r2, #0]
 8005972:	601a      	str	r2, [r3, #0]

	// Enable Transfer complete interrupt enable
	DMA1_Channel4->CCR |= DMA_CCR_TCIE;
 8005974:	4b2f      	ldr	r3, [pc, #188]	; (8005a34 <BSP_Console_Init+0x184>)
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	4b2e      	ldr	r3, [pc, #184]	; (8005a34 <BSP_Console_Init+0x184>)
 800597a:	2102      	movs	r1, #2
 800597c:	430a      	orrs	r2, r1
 800597e:	601a      	str	r2, [r3, #0]

	// Memory is tx_dma_buffer
	DMA1_Channel4->CMAR = (uint32_t)tx_dma_buffer;
 8005980:	4b2c      	ldr	r3, [pc, #176]	; (8005a34 <BSP_Console_Init+0x184>)
 8005982:	4a2e      	ldr	r2, [pc, #184]	; (8005a3c <BSP_Console_Init+0x18c>)
 8005984:	60da      	str	r2, [r3, #12]

	// Memory data size is 8-bit (byte)
	DMA1_Channel4->CCR |= (0x00 <<DMA_CCR_MSIZE_Pos);
 8005986:	4a2b      	ldr	r2, [pc, #172]	; (8005a34 <BSP_Console_Init+0x184>)
 8005988:	4b2a      	ldr	r3, [pc, #168]	; (8005a34 <BSP_Console_Init+0x184>)
 800598a:	6812      	ldr	r2, [r2, #0]
 800598c:	601a      	str	r2, [r3, #0]

	// Enable auto-increment Memory address
	DMA1_Channel4->CCR |= DMA_CCR_MINC;
 800598e:	4b29      	ldr	r3, [pc, #164]	; (8005a34 <BSP_Console_Init+0x184>)
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	4b28      	ldr	r3, [pc, #160]	; (8005a34 <BSP_Console_Init+0x184>)
 8005994:	2180      	movs	r1, #128	; 0x80
 8005996:	430a      	orrs	r2, r1
 8005998:	601a      	str	r2, [r3, #0]
		Setup Channel 5

	*/

	// Reset DMA1 Channel 5 configuration
	DMA1_Channel5->CCR = 0x00000000;
 800599a:	4b29      	ldr	r3, [pc, #164]	; (8005a40 <BSP_Console_Init+0x190>)
 800599c:	2200      	movs	r2, #0
 800599e:	601a      	str	r2, [r3, #0]

	// Set direction Peripheral -> Memory
	DMA1_Channel5->CCR &= ~DMA_CCR_DIR;
 80059a0:	4b27      	ldr	r3, [pc, #156]	; (8005a40 <BSP_Console_Init+0x190>)
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	4b26      	ldr	r3, [pc, #152]	; (8005a40 <BSP_Console_Init+0x190>)
 80059a6:	2110      	movs	r1, #16
 80059a8:	438a      	bics	r2, r1
 80059aa:	601a      	str	r2, [r3, #0]

	// Peripheral is USART2 RDR
	DMA1_Channel5->CPAR = (uint32_t)&USART2->RDR;
 80059ac:	4b24      	ldr	r3, [pc, #144]	; (8005a40 <BSP_Console_Init+0x190>)
 80059ae:	4a25      	ldr	r2, [pc, #148]	; (8005a44 <BSP_Console_Init+0x194>)
 80059b0:	609a      	str	r2, [r3, #8]

	// Peripheral data size is 8-bit (byte)
	DMA1_Channel5->CCR |= (0x00 <<DMA_CCR_PSIZE_Pos);
 80059b2:	4a23      	ldr	r2, [pc, #140]	; (8005a40 <BSP_Console_Init+0x190>)
 80059b4:	4b22      	ldr	r3, [pc, #136]	; (8005a40 <BSP_Console_Init+0x190>)
 80059b6:	6812      	ldr	r2, [r2, #0]
 80059b8:	601a      	str	r2, [r3, #0]

	// Disable auto-increment Peripheral address
	DMA1_Channel5->CCR &= ~DMA_CCR_PINC;
 80059ba:	4b21      	ldr	r3, [pc, #132]	; (8005a40 <BSP_Console_Init+0x190>)
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	4b20      	ldr	r3, [pc, #128]	; (8005a40 <BSP_Console_Init+0x190>)
 80059c0:	2140      	movs	r1, #64	; 0x40
 80059c2:	438a      	bics	r2, r1
 80059c4:	601a      	str	r2, [r3, #0]

	// Memory is rx_dma_buffer
	DMA1_Channel5->CMAR = (uint32_t)rx_dma_buffer;
 80059c6:	4b1e      	ldr	r3, [pc, #120]	; (8005a40 <BSP_Console_Init+0x190>)
 80059c8:	4a1f      	ldr	r2, [pc, #124]	; (8005a48 <BSP_Console_Init+0x198>)
 80059ca:	60da      	str	r2, [r3, #12]

	// Memory data size is 8-bit (byte)
	DMA1_Channel5->CCR |= (0x00 <<DMA_CCR_MSIZE_Pos);
 80059cc:	4a1c      	ldr	r2, [pc, #112]	; (8005a40 <BSP_Console_Init+0x190>)
 80059ce:	4b1c      	ldr	r3, [pc, #112]	; (8005a40 <BSP_Console_Init+0x190>)
 80059d0:	6812      	ldr	r2, [r2, #0]
 80059d2:	601a      	str	r2, [r3, #0]

	// Enable auto-increment Memory address
	DMA1_Channel5->CCR |= DMA_CCR_MINC;
 80059d4:	4b1a      	ldr	r3, [pc, #104]	; (8005a40 <BSP_Console_Init+0x190>)
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	4b19      	ldr	r3, [pc, #100]	; (8005a40 <BSP_Console_Init+0x190>)
 80059da:	2180      	movs	r1, #128	; 0x80
 80059dc:	430a      	orrs	r2, r1
 80059de:	601a      	str	r2, [r3, #0]

	// Set Memory Buffer size
	DMA1_Channel5->CNDTR = SIZE_DMA_CHANNEL_5;
 80059e0:	4b17      	ldr	r3, [pc, #92]	; (8005a40 <BSP_Console_Init+0x190>)
 80059e2:	2232      	movs	r2, #50	; 0x32
 80059e4:	605a      	str	r2, [r3, #4]

	// DMA mode is circular
	DMA1_Channel5->CCR |= DMA_CCR_CIRC;
 80059e6:	4b16      	ldr	r3, [pc, #88]	; (8005a40 <BSP_Console_Init+0x190>)
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	4b15      	ldr	r3, [pc, #84]	; (8005a40 <BSP_Console_Init+0x190>)
 80059ec:	2120      	movs	r1, #32
 80059ee:	430a      	orrs	r2, r1
 80059f0:	601a      	str	r2, [r3, #0]

	// Enable DMA1 Channel 5
	DMA1_Channel5->CCR |= DMA_CCR_EN;
 80059f2:	4b13      	ldr	r3, [pc, #76]	; (8005a40 <BSP_Console_Init+0x190>)
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	4b12      	ldr	r3, [pc, #72]	; (8005a40 <BSP_Console_Init+0x190>)
 80059f8:	2101      	movs	r1, #1
 80059fa:	430a      	orrs	r2, r1
 80059fc:	601a      	str	r2, [r3, #0]

	// Enable USART2 DMA Request on RX
	USART2->CR3 |= USART_CR3_DMAR;
 80059fe:	4b09      	ldr	r3, [pc, #36]	; (8005a24 <BSP_Console_Init+0x174>)
 8005a00:	689a      	ldr	r2, [r3, #8]
 8005a02:	4b08      	ldr	r3, [pc, #32]	; (8005a24 <BSP_Console_Init+0x174>)
 8005a04:	2140      	movs	r1, #64	; 0x40
 8005a06:	430a      	orrs	r2, r1
 8005a08:	609a      	str	r2, [r3, #8]
	
	// Enable USART2
	USART2->CR1 |= USART_CR1_UE;
 8005a0a:	4b06      	ldr	r3, [pc, #24]	; (8005a24 <BSP_Console_Init+0x174>)
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	4b05      	ldr	r3, [pc, #20]	; (8005a24 <BSP_Console_Init+0x174>)
 8005a10:	2101      	movs	r1, #1
 8005a12:	430a      	orrs	r2, r1
 8005a14:	601a      	str	r2, [r3, #0]

}
 8005a16:	46c0      	nop			; (mov r8, r8)
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	40021000 	.word	0x40021000
 8005a20:	ffff00ff 	.word	0xffff00ff
 8005a24:	40004400 	.word	0x40004400
 8005a28:	fffcffff 	.word	0xfffcffff
 8005a2c:	ffff7fff 	.word	0xffff7fff
 8005a30:	00001388 	.word	0x00001388
 8005a34:	40020044 	.word	0x40020044
 8005a38:	40004428 	.word	0x40004428
 8005a3c:	200034c8 	.word	0x200034c8
 8005a40:	40020058 	.word	0x40020058
 8005a44:	40004424 	.word	0x40004424
 8005a48:	200034c0 	.word	0x200034c0

08005a4c <BSP_NVIC_Init>:
 * BSP_NVIC_Init()
 * Setup NVIC controller for desired interrupts
 */

void BSP_NVIC_Init()
{	// Allow interruption for TC
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	af00      	add	r7, sp, #0
	//NVIC_SetPriority(USART2_IRQn, 1);

	// Enable USART2 interrupts
	//NVIC_EnableIRQ(USART2_IRQn);
	// Set maximum priority for EXTI line 4 to 15 interrupts
 8005a50:	46c0      	nop			; (mov r8, r8)
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
	...

08005a58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005a58:	480d      	ldr	r0, [pc, #52]	; (8005a90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005a5a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005a5c:	f000 f825 	bl	8005aaa <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005a60:	480c      	ldr	r0, [pc, #48]	; (8005a94 <LoopForever+0x6>)
  ldr r1, =_edata
 8005a62:	490d      	ldr	r1, [pc, #52]	; (8005a98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005a64:	4a0d      	ldr	r2, [pc, #52]	; (8005a9c <LoopForever+0xe>)
  movs r3, #0
 8005a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005a68:	e002      	b.n	8005a70 <LoopCopyDataInit>

08005a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005a6e:	3304      	adds	r3, #4

08005a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005a74:	d3f9      	bcc.n	8005a6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005a76:	4a0a      	ldr	r2, [pc, #40]	; (8005aa0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005a78:	4c0a      	ldr	r4, [pc, #40]	; (8005aa4 <LoopForever+0x16>)
  movs r3, #0
 8005a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005a7c:	e001      	b.n	8005a82 <LoopFillZerobss>

08005a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005a80:	3204      	adds	r2, #4

08005a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005a84:	d3fb      	bcc.n	8005a7e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005a86:	f000 f8a3 	bl	8005bd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005a8a:	f7ff fa4d 	bl	8004f28 <main>

08005a8e <LoopForever>:

LoopForever:
    b LoopForever
 8005a8e:	e7fe      	b.n	8005a8e <LoopForever>
  ldr   r0, =_estack
 8005a90:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8005a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005a98:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8005a9c:	080070d0 	.word	0x080070d0
  ldr r2, =_sbss
 8005aa0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8005aa4:	20003500 	.word	0x20003500

08005aa8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005aa8:	e7fe      	b.n	8005aa8 <ADC1_COMP_IRQHandler>

08005aaa <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005aaa:	b580      	push	{r7, lr}
 8005aac:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8005aae:	46c0      	nop			; (mov r8, r8)
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
 8005aba:	2300      	movs	r3, #0
 8005abc:	60fb      	str	r3, [r7, #12]
 8005abe:	2300      	movs	r3, #0
 8005ac0:	60bb      	str	r3, [r7, #8]
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	607b      	str	r3, [r7, #4]
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8005aca:	4b38      	ldr	r3, [pc, #224]	; (8005bac <SystemCoreClockUpdate+0xf8>)
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	220c      	movs	r2, #12
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	60fb      	str	r3, [r7, #12]

  switch (tmp)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2b08      	cmp	r3, #8
 8005ad8:	d011      	beq.n	8005afe <SystemCoreClockUpdate+0x4a>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2b08      	cmp	r3, #8
 8005ade:	d84f      	bhi.n	8005b80 <SystemCoreClockUpdate+0xcc>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d003      	beq.n	8005aee <SystemCoreClockUpdate+0x3a>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2b04      	cmp	r3, #4
 8005aea:	d004      	beq.n	8005af6 <SystemCoreClockUpdate+0x42>
 8005aec:	e048      	b.n	8005b80 <SystemCoreClockUpdate+0xcc>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8005aee:	4b30      	ldr	r3, [pc, #192]	; (8005bb0 <SystemCoreClockUpdate+0xfc>)
 8005af0:	4a30      	ldr	r2, [pc, #192]	; (8005bb4 <SystemCoreClockUpdate+0x100>)
 8005af2:	601a      	str	r2, [r3, #0]
      break;
 8005af4:	e048      	b.n	8005b88 <SystemCoreClockUpdate+0xd4>
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8005af6:	4b2e      	ldr	r3, [pc, #184]	; (8005bb0 <SystemCoreClockUpdate+0xfc>)
 8005af8:	4a2e      	ldr	r2, [pc, #184]	; (8005bb4 <SystemCoreClockUpdate+0x100>)
 8005afa:	601a      	str	r2, [r3, #0]
      break;
 8005afc:	e044      	b.n	8005b88 <SystemCoreClockUpdate+0xd4>
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 8005afe:	4b2b      	ldr	r3, [pc, #172]	; (8005bac <SystemCoreClockUpdate+0xf8>)
 8005b00:	685a      	ldr	r2, [r3, #4]
 8005b02:	23f0      	movs	r3, #240	; 0xf0
 8005b04:	039b      	lsls	r3, r3, #14
 8005b06:	4013      	ands	r3, r2
 8005b08:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8005b0a:	4b28      	ldr	r3, [pc, #160]	; (8005bac <SystemCoreClockUpdate+0xf8>)
 8005b0c:	685a      	ldr	r2, [r3, #4]
 8005b0e:	23c0      	movs	r3, #192	; 0xc0
 8005b10:	025b      	lsls	r3, r3, #9
 8005b12:	4013      	ands	r3, r2
 8005b14:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	0c9b      	lsrs	r3, r3, #18
 8005b1a:	3302      	adds	r3, #2
 8005b1c:	60bb      	str	r3, [r7, #8]
      predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 8005b1e:	4b23      	ldr	r3, [pc, #140]	; (8005bac <SystemCoreClockUpdate+0xf8>)
 8005b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b22:	220f      	movs	r2, #15
 8005b24:	4013      	ands	r3, r2
 8005b26:	3301      	adds	r3, #1
 8005b28:	603b      	str	r3, [r7, #0]

      if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	2380      	movs	r3, #128	; 0x80
 8005b2e:	025b      	lsls	r3, r3, #9
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d10a      	bne.n	8005b4a <SystemCoreClockUpdate+0x96>
      {
        /* HSE used as PLL clock source : SystemCoreClock = HSE/PREDIV * PLLMUL */
        SystemCoreClock = (HSE_VALUE/predivfactor) * pllmull;
 8005b34:	6839      	ldr	r1, [r7, #0]
 8005b36:	481f      	ldr	r0, [pc, #124]	; (8005bb4 <SystemCoreClockUpdate+0x100>)
 8005b38:	f7fa fae6 	bl	8000108 <__udivsi3>
 8005b3c:	0003      	movs	r3, r0
 8005b3e:	001a      	movs	r2, r3
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	435a      	muls	r2, r3
 8005b44:	4b1a      	ldr	r3, [pc, #104]	; (8005bb0 <SystemCoreClockUpdate+0xfc>)
 8005b46:	601a      	str	r2, [r3, #0]
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
#endif /* STM32F042x6 || STM32F048xx || STM32F070x6 || 
          STM32F071xB || STM32F072xB || STM32F078xx || STM32F070xB ||
          STM32F091xC || STM32F098xx || STM32F030xC */
	  }
      break;
 8005b48:	e01e      	b.n	8005b88 <SystemCoreClockUpdate+0xd4>
      else if (pllsource == RCC_CFGR_PLLSRC_HSI48_PREDIV)
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	23c0      	movs	r3, #192	; 0xc0
 8005b4e:	025b      	lsls	r3, r3, #9
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d10a      	bne.n	8005b6a <SystemCoreClockUpdate+0xb6>
        SystemCoreClock = (HSI48_VALUE/predivfactor) * pllmull;
 8005b54:	6839      	ldr	r1, [r7, #0]
 8005b56:	4818      	ldr	r0, [pc, #96]	; (8005bb8 <SystemCoreClockUpdate+0x104>)
 8005b58:	f7fa fad6 	bl	8000108 <__udivsi3>
 8005b5c:	0003      	movs	r3, r0
 8005b5e:	001a      	movs	r2, r3
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	435a      	muls	r2, r3
 8005b64:	4b12      	ldr	r3, [pc, #72]	; (8005bb0 <SystemCoreClockUpdate+0xfc>)
 8005b66:	601a      	str	r2, [r3, #0]
      break;
 8005b68:	e00e      	b.n	8005b88 <SystemCoreClockUpdate+0xd4>
        SystemCoreClock = (HSI_VALUE/predivfactor) * pllmull;
 8005b6a:	6839      	ldr	r1, [r7, #0]
 8005b6c:	4811      	ldr	r0, [pc, #68]	; (8005bb4 <SystemCoreClockUpdate+0x100>)
 8005b6e:	f7fa facb 	bl	8000108 <__udivsi3>
 8005b72:	0003      	movs	r3, r0
 8005b74:	001a      	movs	r2, r3
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	435a      	muls	r2, r3
 8005b7a:	4b0d      	ldr	r3, [pc, #52]	; (8005bb0 <SystemCoreClockUpdate+0xfc>)
 8005b7c:	601a      	str	r2, [r3, #0]
      break;
 8005b7e:	e003      	b.n	8005b88 <SystemCoreClockUpdate+0xd4>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8005b80:	4b0b      	ldr	r3, [pc, #44]	; (8005bb0 <SystemCoreClockUpdate+0xfc>)
 8005b82:	4a0c      	ldr	r2, [pc, #48]	; (8005bb4 <SystemCoreClockUpdate+0x100>)
 8005b84:	601a      	str	r2, [r3, #0]
      break;
 8005b86:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8005b88:	4b08      	ldr	r3, [pc, #32]	; (8005bac <SystemCoreClockUpdate+0xf8>)
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	091b      	lsrs	r3, r3, #4
 8005b8e:	220f      	movs	r2, #15
 8005b90:	4013      	ands	r3, r2
 8005b92:	4a0a      	ldr	r2, [pc, #40]	; (8005bbc <SystemCoreClockUpdate+0x108>)
 8005b94:	5cd3      	ldrb	r3, [r2, r3]
 8005b96:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8005b98:	4b05      	ldr	r3, [pc, #20]	; (8005bb0 <SystemCoreClockUpdate+0xfc>)
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	40da      	lsrs	r2, r3
 8005ba0:	4b03      	ldr	r3, [pc, #12]	; (8005bb0 <SystemCoreClockUpdate+0xfc>)
 8005ba2:	601a      	str	r2, [r3, #0]
}
 8005ba4:	46c0      	nop			; (mov r8, r8)
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	b004      	add	sp, #16
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	40021000 	.word	0x40021000
 8005bb0:	20000014 	.word	0x20000014
 8005bb4:	007a1200 	.word	0x007a1200
 8005bb8:	02dc6c00 	.word	0x02dc6c00
 8005bbc:	080070b8 	.word	0x080070b8

08005bc0 <memset>:
 8005bc0:	0003      	movs	r3, r0
 8005bc2:	1882      	adds	r2, r0, r2
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d100      	bne.n	8005bca <memset+0xa>
 8005bc8:	4770      	bx	lr
 8005bca:	7019      	strb	r1, [r3, #0]
 8005bcc:	3301      	adds	r3, #1
 8005bce:	e7f9      	b.n	8005bc4 <memset+0x4>

08005bd0 <__libc_init_array>:
 8005bd0:	b570      	push	{r4, r5, r6, lr}
 8005bd2:	2600      	movs	r6, #0
 8005bd4:	4c0c      	ldr	r4, [pc, #48]	; (8005c08 <__libc_init_array+0x38>)
 8005bd6:	4d0d      	ldr	r5, [pc, #52]	; (8005c0c <__libc_init_array+0x3c>)
 8005bd8:	1b64      	subs	r4, r4, r5
 8005bda:	10a4      	asrs	r4, r4, #2
 8005bdc:	42a6      	cmp	r6, r4
 8005bde:	d109      	bne.n	8005bf4 <__libc_init_array+0x24>
 8005be0:	2600      	movs	r6, #0
 8005be2:	f000 f823 	bl	8005c2c <_init>
 8005be6:	4c0a      	ldr	r4, [pc, #40]	; (8005c10 <__libc_init_array+0x40>)
 8005be8:	4d0a      	ldr	r5, [pc, #40]	; (8005c14 <__libc_init_array+0x44>)
 8005bea:	1b64      	subs	r4, r4, r5
 8005bec:	10a4      	asrs	r4, r4, #2
 8005bee:	42a6      	cmp	r6, r4
 8005bf0:	d105      	bne.n	8005bfe <__libc_init_array+0x2e>
 8005bf2:	bd70      	pop	{r4, r5, r6, pc}
 8005bf4:	00b3      	lsls	r3, r6, #2
 8005bf6:	58eb      	ldr	r3, [r5, r3]
 8005bf8:	4798      	blx	r3
 8005bfa:	3601      	adds	r6, #1
 8005bfc:	e7ee      	b.n	8005bdc <__libc_init_array+0xc>
 8005bfe:	00b3      	lsls	r3, r6, #2
 8005c00:	58eb      	ldr	r3, [r5, r3]
 8005c02:	4798      	blx	r3
 8005c04:	3601      	adds	r6, #1
 8005c06:	e7f2      	b.n	8005bee <__libc_init_array+0x1e>
 8005c08:	080070c8 	.word	0x080070c8
 8005c0c:	080070c8 	.word	0x080070c8
 8005c10:	080070cc 	.word	0x080070cc
 8005c14:	080070c8 	.word	0x080070c8

08005c18 <memcpy>:
 8005c18:	2300      	movs	r3, #0
 8005c1a:	b510      	push	{r4, lr}
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d100      	bne.n	8005c22 <memcpy+0xa>
 8005c20:	bd10      	pop	{r4, pc}
 8005c22:	5ccc      	ldrb	r4, [r1, r3]
 8005c24:	54c4      	strb	r4, [r0, r3]
 8005c26:	3301      	adds	r3, #1
 8005c28:	e7f8      	b.n	8005c1c <memcpy+0x4>
	...

08005c2c <_init>:
 8005c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c2e:	46c0      	nop			; (mov r8, r8)
 8005c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c32:	bc08      	pop	{r3}
 8005c34:	469e      	mov	lr, r3
 8005c36:	4770      	bx	lr

08005c38 <_fini>:
 8005c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c3a:	46c0      	nop			; (mov r8, r8)
 8005c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c3e:	bc08      	pop	{r3}
 8005c40:	469e      	mov	lr, r3
 8005c42:	4770      	bx	lr
